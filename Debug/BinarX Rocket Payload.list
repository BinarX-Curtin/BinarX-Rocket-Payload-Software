
BinarX Rocket Payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004750  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004924  08004924  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800492c  0800492c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000020  08004954  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08004954  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a1b  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e42  00000000  00000000  00036aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  000398f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f21  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002566b  00000000  00000000  0003bbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d5d  00000000  00000000  0006121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3664  00000000  00000000  00079f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d0  00000000  00000000  0015d5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001628b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080048c4 	.word	0x080048c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	080048c4 	.word	0x080048c4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd43 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f816 	bl	8000500 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d4:	f000 f86e 	bl	80005b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa40 	bl	800095c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f898 	bl	8000610 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80004e4:	f000 f938 	bl	8000758 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f964 	bl	80007b4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004ec:	f000 f992 	bl	8000814 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f0:	f000 f9ce 	bl	8000890 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80004f4:	f000 fa0a 	bl	800090c <MX_USB_PCD_Init>
  MX_FATFS_Init();
 80004f8:	f004 f8f2 	bl	80046e0 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x34>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b096      	sub	sp, #88	; 0x58
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2244      	movs	r2, #68	; 0x44
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 f9ab 	bl	800486a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000526:	f002 f933 	bl	8002790 <HAL_PWREx_ControlVoltageScaling>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000530:	f000 fa96 	bl	8000a60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000534:	f002 f90e 	bl	8002754 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <SystemClock_Config+0xb0>)
 800053a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <SystemClock_Config+0xb0>)
 8000540:	f023 0318 	bic.w	r3, r3, #24
 8000544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
 8000548:	2315      	movs	r3, #21
 800054a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055e:	2360      	movs	r3, #96	; 0x60
 8000560:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	2300      	movs	r3, #0
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f966 	bl	800283c <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000576:	f000 fa73 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800057e:	2302      	movs	r3, #2
 8000580:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fd66 	bl	8003064 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800059e:	f000 fa5f 	bl	8000a60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005a2:	f003 f9cb 	bl	800393c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005a6:	bf00      	nop
 80005a8:	3758      	adds	r7, #88	; 0x58
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b098      	sub	sp, #96	; 0x60
 80005b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2260      	movs	r2, #96	; 0x60
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 f952 	bl	800486a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80005c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005d8:	2301      	movs	r3, #1
 80005da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005e0:	2318      	movs	r3, #24
 80005e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80005f0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80005f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ff55 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000604:	f000 fa2c 	bl	8000a60 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3760      	adds	r7, #96	; 0x60
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <MX_ADC1_Init+0xc0>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_ADC1_Init+0xbc>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_ADC1_Init+0xbc>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000646:	2204      	movs	r2, #4
 8000648:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xbc>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000652:	2200      	movs	r2, #0
 8000654:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000658:	2201      	movs	r2, #1
 800065a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC1_Init+0xbc>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC1_Init+0xbc>)
 800067a:	2200      	movs	r2, #0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_ADC1_Init+0xbc>)
 8000688:	f000 fe66 	bl	8001358 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000692:	f000 f9e5 	bl	8000a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0xc4>)
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0xbc>)
 80006b4:	f000 ff92 	bl	80015dc <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006be:	f000 f9cf 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000003c 	.word	0x2000003c
 80006d0:	50040000 	.word	0x50040000
 80006d4:	14f00020 	.word	0x14f00020

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	f001 fdbc 	bl	8002290 <HAL_I2C_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 f99f 	bl	8000a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <MX_I2C1_Init+0x74>)
 8000726:	f001 fe4e 	bl	80023c6 <HAL_I2CEx_ConfigAnalogFilter>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f996 	bl	8000a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000738:	f001 fe90 	bl	800245c <HAL_I2CEx_ConfigDigitalFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f98d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000a0 	.word	0x200000a0
 8000750:	40005400 	.word	0x40005400
 8000754:	00303d5b 	.word	0x00303d5b

08000758 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_LPUART1_UART_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_LPUART1_UART_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_LPUART1_UART_Init+0x50>)
 8000796:	f003 fa76 	bl	8003c86 <HAL_UART_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f95e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000f4 	.word	0x200000f4
 80007ac:	40008000 	.word	0x40008000
 80007b0:	00033324 	.word	0x00033324

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	f003 fa45 	bl	8003c86 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f92d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000017c 	.word	0x2000017c
 8000810:	40013800 	.word	0x40013800

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f003 f964 	bl	8003b40 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f8ef 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000204 	.word	0x20000204
 800088c:	40013000 	.word	0x40013000

08000890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_SPI2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_SPI2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI2_Init+0x74>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI2_Init+0x74>)
 80008aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI2_Init+0x74>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI2_Init+0x74>)
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI2_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI2_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_SPI2_Init+0x74>)
 80008f0:	f003 f926 	bl	8003b40 <HAL_SPI_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f8b1 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000268 	.word	0x20000268
 8000908:	40003800 	.word	0x40003800

0800090c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <MX_USB_PCD_Init+0x4c>)
 8000914:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000918:	2208      	movs	r2, #8
 800091a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800091e:	2202      	movs	r2, #2
 8000920:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000924:	2202      	movs	r2, #2
 8000926:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000942:	f001 fdd7 	bl	80024f4 <HAL_PCD_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800094c:	f000 f888 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200002cc 	.word	0x200002cc
 8000958:	40006800 	.word	0x40006800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_GPIO_Init+0xf8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a2b      	ldr	r2, [pc, #172]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xf8>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_GPIO_Port, uSD_CS_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	481f      	ldr	r0, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xfc>)
 80009da:	f001 fc41 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	481a      	ldr	r0, [pc, #104]	; (8000a5c <MX_GPIO_Init+0x100>)
 80009f4:	f001 faba 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80009f8:	f240 3336 	movw	r3, #822	; 0x336
 80009fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xfc>)
 8000a0e:	f001 faad 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CS_Pin */
  GPIO_InitStruct.Pin = uSD_CS_Pin;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0xfc>)
 8000a2c:	f001 fa9e 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000a30:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 fa90 	bl	8001f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	48000800 	.word	0x48000800

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_ADC_MspInit+0x74>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d124      	bne.n	8000b20 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_ADC_MspInit+0x78>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b06:	231f      	movs	r3, #31
 8000b08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 fa26 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	50040000 	.word	0x50040000
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0a2      	sub	sp, #136	; 0x88
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2260      	movs	r2, #96	; 0x60
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fe8a 	bl	800486a <memset>
  if(hi2c->Instance==I2C1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_I2C_MspInit+0xa8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d137      	bne.n	8000bd0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fc9b 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b78:	f7ff ff72 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_I2C_MspInit+0xb0>)
 8000bb4:	f001 f9da 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_I2C_MspInit+0xac>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3788      	adds	r7, #136	; 0x88
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0a4      	sub	sp, #144	; 0x90
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2260      	movs	r2, #96	; 0x60
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fe30 	bl	800486a <memset>
  if(huart->Instance==LPUART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <HAL_UART_MspInit+0x134>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13b      	bne.n	8000c8c <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c14:	2320      	movs	r3, #32
 8000c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fc41 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff ff18 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c30:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c34:	4a39      	ldr	r2, [pc, #228]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c82:	4619      	mov	r1, r3
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <HAL_UART_MspInit+0x13c>)
 8000c86:	f001 f971 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c8a:	e040      	b.n	8000d0e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <HAL_UART_MspInit+0x140>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d13b      	bne.n	8000d0e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fc00 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000cae:	f7ff fed7 	bl	8000a60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0x138>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f001 f92f 	bl	8001f6c <HAL_GPIO_Init>
}
 8000d0e:	bf00      	nop
 8000d10:	3790      	adds	r7, #144	; 0x90
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40008000 	.word	0x40008000
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	40013800 	.word	0x40013800

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <HAL_SPI_MspInit+0x114>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d145      	bne.n	8000dd6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a3c      	ldr	r2, [pc, #240]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23e0      	movs	r3, #224	; 0xe0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da2:	2305      	movs	r3, #5
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f001 f8dc 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481d      	ldr	r0, [pc, #116]	; (8000e44 <HAL_SPI_MspInit+0x11c>)
 8000dd0:	f001 f8cc 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dd4:	e02d      	b.n	8000e32 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_SPI_MspInit+0x120>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d128      	bne.n	8000e32 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dea:	6593      	str	r3, [r2, #88]	; 0x58
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x118>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e22:	2305      	movs	r3, #5
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x11c>)
 8000e2e:	f001 f89d 	bl	8001f6c <HAL_GPIO_Init>
}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	; 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	40003800 	.word	0x40003800

08000e4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_PCD_MspInit+0x38>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10b      	bne.n	8000e76 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_PCD_MspInit+0x3c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_PCD_MspInit+0x3c>)
 8000e64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_PCD_MspInit+0x3c>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40006800 	.word	0x40006800
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f892 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f08:	f7ff ffea 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f003 fca3 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f36:	f7ff fac7 	bl	80004c8 <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000f48:	08004934 	.word	0x08004934
  ldr r2, =_sbss
 8000f4c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f50:	200005dc 	.word	0x200005dc

08000f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_IRQHandler>

08000f56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 ffcf 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f80e 	bl	8000f88 <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e001      	b.n	8000f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f78:	f7ff fd78 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d023      	beq.n	8000fe4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_InitTick+0x70>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 ffcd 	bl	8001f52 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10f      	bne.n	8000fde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 ffa5 	bl	8001f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x74>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e004      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e001      	b.n	8000fe8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	200005c4 	.word	0x200005c4

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200005c4 	.word	0x200005c4

08001040 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <LL_ADC_SetOffset+0x44>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	03fff000 	.word	0x03fff000

080010f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3360      	adds	r3, #96	; 0x60
 80010fe:	461a      	mov	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3360      	adds	r3, #96	; 0x60
 800112c:	461a      	mov	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001146:	bf00      	nop
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001152:	b480      	push	{r7}
 8001154:	b087      	sub	sp, #28
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	461a      	mov	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	4413      	add	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	211f      	movs	r1, #31
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0e9b      	lsrs	r3, r3, #26
 800118a:	f003 011f 	and.w	r1, r3, #31
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800119e:	bf00      	nop
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b087      	sub	sp, #28
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3314      	adds	r3, #20
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	0e5b      	lsrs	r3, r3, #25
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	0d1b      	lsrs	r3, r3, #20
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	2107      	movs	r1, #7
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	0d1b      	lsrs	r3, r3, #20
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	431a      	orrs	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011f4:	bf00      	nop
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0318 	and.w	r3, r3, #24
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001224:	40d9      	lsrs	r1, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	400b      	ands	r3, r1
 800122a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800122e:	431a      	orrs	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	0007ffff 	.word	0x0007ffff

08001248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6093      	str	r3, [r2, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800127c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <LL_ADC_IsEnabled+0x18>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <LL_ADC_IsEnabled+0x1a>
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b04      	cmp	r3, #4
 800131c:	d101      	bne.n	8001322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b08      	cmp	r3, #8
 8001342:	d101      	bne.n	8001348 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e126      	b.n	80015c0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fb97 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff67 	bl	800126c <LL_ADC_IsDeepPowerDownEnabled>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff4d 	bl	8001248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff82 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff66 	bl	8001294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c8:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <HAL_ADC_Init+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	4a7f      	ldr	r2, [pc, #508]	; (80015cc <HAL_ADC_Init+0x274>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff64 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10d      	bne.n	8001416 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f043 0210 	orr.w	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff75 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001420:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 80bf 	bne.w	80015ae <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80bb 	bne.w	80015ae <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff49 	bl	80012e4 <LL_ADC_IsEnabled>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001458:	485d      	ldr	r0, [pc, #372]	; (80015d0 <HAL_ADC_Init+0x278>)
 800145a:	f7ff ff43 	bl	80012e4 <LL_ADC_IsEnabled>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4619      	mov	r1, r3
 800146a:	485a      	ldr	r0, [pc, #360]	; (80015d4 <HAL_ADC_Init+0x27c>)
 800146c:	f7ff fde8 	bl	8001040 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7e5b      	ldrb	r3, [r3, #25]
 8001474:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001480:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001486:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d106      	bne.n	80014ac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	3b01      	subs	r3, #1
 80014a4:	045b      	lsls	r3, r3, #17
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_ADC_Init+0x280>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	430b      	orrs	r3, r1
 80014da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff25 	bl	8001330 <LL_ADC_INJ_IsConversionOngoing>
 80014e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d13d      	bne.n	800156a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d13a      	bne.n	800156a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001500:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001510:	f023 0302 	bic.w	r3, r3, #2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	69b9      	ldr	r1, [r7, #24]
 800151a:	430b      	orrs	r3, r1
 800151c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001524:	2b01      	cmp	r3, #1
 8001526:	d118      	bne.n	800155a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800153e:	4311      	orrs	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001544:	4311      	orrs	r1, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800154a:	430a      	orrs	r2, r1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	e007      	b.n	800156a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10c      	bne.n	800158c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f023 010f 	bic.w	r1, r3, #15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
 800158a:	e007      	b.n	800159c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020f 	bic.w	r2, r2, #15
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	f023 0303 	bic.w	r3, r3, #3
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015be:	7ffb      	ldrb	r3, [r7, #31]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	053e2d63 	.word	0x053e2d63
 80015d0:	50040000 	.word	0x50040000
 80015d4:	50040300 	.word	0x50040300
 80015d8:	fff0c007 	.word	0xfff0c007

080015dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0b6      	sub	sp, #216	; 0xd8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x22>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e3bb      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x79a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe7d 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 83a0 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d824      	bhi.n	8001672 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	3b02      	subs	r3, #2
 800162e:	2b03      	cmp	r3, #3
 8001630:	d81b      	bhi.n	800166a <HAL_ADC_ConfigChannel+0x8e>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <HAL_ADC_ConfigChannel+0x5c>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	08001651 	.word	0x08001651
 8001640:	08001659 	.word	0x08001659
 8001644:	08001661 	.word	0x08001661
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001648:	230c      	movs	r3, #12
 800164a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800164e:	e010      	b.n	8001672 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001650:	2312      	movs	r3, #18
 8001652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001656:	e00c      	b.n	8001672 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001658:	2318      	movs	r3, #24
 800165a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800165e:	e008      	b.n	8001672 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001668:	e003      	b.n	8001672 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800166a:	2306      	movs	r3, #6
 800166c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001670:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001680:	f7ff fd67 	bl	8001152 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe3e 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 800168e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe4a 	bl	8001330 <LL_ADC_INJ_IsConversionOngoing>
 800169c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 81a4 	bne.w	80019f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 819f 	bne.w	80019f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f7ff fd72 	bl	80011aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d00a      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6919      	ldr	r1, [r3, #16]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016f8:	f7ff fcd6 	bl	80010a8 <LL_ADC_SetOffset>
 80016fc:	e179      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fcf3 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <HAL_ADC_ConfigChannel+0x14e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fce8 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	e01e      	b.n	8001768 <HAL_ADC_ConfigChannel+0x18c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fcdd 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001758:	2320      	movs	r3, #32
 800175a:	e004      	b.n	8001766 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800175c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1a4>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0e9b      	lsrs	r3, r3, #26
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	e018      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1d6>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800179c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80017a4:	2320      	movs	r3, #32
 80017a6:	e004      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80017a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d106      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fcac 	bl	800111c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fc90 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x214>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fc85 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 021f 	and.w	r2, r3, #31
 80017ee:	e01e      	b.n	800182e <HAL_ADC_ConfigChannel+0x252>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2101      	movs	r1, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc7a 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800180e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800181e:	2320      	movs	r3, #32
 8001820:	e004      	b.n	800182c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x26a>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0e9b      	lsrs	r3, r3, #26
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	e018      	b.n	8001878 <HAL_ADC_ConfigChannel+0x29c>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800185a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800185e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001862:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800186a:	2320      	movs	r3, #32
 800186c:	e004      	b.n	8001878 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800186e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001878:	429a      	cmp	r2, r3
 800187a:	d106      	bne.n	800188a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc49 	bl	800111c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2102      	movs	r1, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fc2d 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10a      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x2da>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2102      	movs	r1, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc22 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	e01e      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x318>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2102      	movs	r1, #2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fc17 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80018d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80018dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80018e4:	2320      	movs	r3, #32
 80018e6:	e004      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80018e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_ADC_ConfigChannel+0x330>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	e014      	b.n	8001936 <HAL_ADC_ConfigChannel+0x35a>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800191a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800191c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e004      	b.n	8001936 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800192c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001936:	429a      	cmp	r2, r3
 8001938:	d106      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	2102      	movs	r1, #2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fbea 	bl	800111c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2103      	movs	r1, #3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fbce 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x398>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2103      	movs	r1, #3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fbc3 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	0e9b      	lsrs	r3, r3, #26
 800196e:	f003 021f 	and.w	r2, r3, #31
 8001972:	e017      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x3c8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2103      	movs	r1, #3
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbb8 	bl	80010f0 <LL_ADC_GetOffsetChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800198c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800198e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001996:	2320      	movs	r3, #32
 8001998:	e003      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800199a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x3e0>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0e9b      	lsrs	r3, r3, #26
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	e011      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x404>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80019ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e003      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80019d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb95 	bl	800111c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc74 	bl	80012e4 <LL_ADC_IsEnabled>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8140 	bne.w	8001c84 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f7ff fbf5 	bl	8001200 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a8f      	ldr	r2, [pc, #572]	; (8001c58 <HAL_ADC_ConfigChannel+0x67c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	f040 8131 	bne.w	8001c84 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10b      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x46e>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0e9b      	lsrs	r3, r3, #26
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2b09      	cmp	r3, #9
 8001a40:	bf94      	ite	ls
 8001a42:	2301      	movls	r3, #1
 8001a44:	2300      	movhi	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	e019      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x4a2>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e003      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d079      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x4c2>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	3301      	adds	r3, #1
 8001a96:	069b      	lsls	r3, r3, #26
 8001a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a9c:	e015      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4ee>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aae:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	069b      	lsls	r3, r3, #26
 8001ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x50e>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	3301      	adds	r3, #1
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	e017      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x53e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e003      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	ea42 0103 	orr.w	r1, r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x564>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	051b      	lsls	r3, r3, #20
 8001b3e:	e018      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x596>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b72:	430b      	orrs	r3, r1
 8001b74:	e081      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x5b6>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	3301      	adds	r3, #1
 8001b8a:	069b      	lsls	r3, r3, #26
 8001b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b90:	e015      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x5e2>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001baa:	2320      	movs	r3, #32
 8001bac:	e003      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	069b      	lsls	r3, r3, #26
 8001bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x602>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	e017      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x632>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	61bb      	str	r3, [r7, #24]
  return result;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e003      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	ea42 0103 	orr.w	r1, r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x65e>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b1e      	subs	r3, #30
 8001c32:	051b      	lsls	r3, r3, #20
 8001c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c38:	e01e      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x69c>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	60fb      	str	r3, [r7, #12]
  return result;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e006      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x688>
 8001c56:	bf00      	nop
 8001c58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	f003 021f 	and.w	r2, r3, #31
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b1e      	subs	r3, #30
 8001c72:	051b      	lsls	r3, r3, #20
 8001c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7ff fa93 	bl	80011aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d06c      	beq.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c90:	483c      	ldr	r0, [pc, #240]	; (8001d84 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c92:	f7ff f9fb 	bl	800108c <LL_ADC_GetCommonPathInternalCh>
 8001c96:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d127      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d121      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_ADC_ConfigChannel+0x7b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d157      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	482f      	ldr	r0, [pc, #188]	; (8001d84 <HAL_ADC_ConfigChannel+0x7a8>)
 8001cc6:	f7ff f9ce 	bl	8001066 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	4a30      	ldr	r2, [pc, #192]	; (8001d94 <HAL_ADC_ConfigChannel+0x7b8>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f9      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cf2:	e03a      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_ADC_ConfigChannel+0x7bc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d113      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_ADC_ConfigChannel+0x7b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d12a      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d20:	f7ff f9a1 	bl	8001066 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d24:	e021      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11c      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d116      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_ADC_ConfigChannel+0x7b0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d52:	f7ff f988 	bl	8001066 <LL_ADC_SetCommonPathInternalCh>
 8001d56:	e008      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f043 0220 	orr.w	r2, r3, #32
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d72:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	37d8      	adds	r7, #216	; 0xd8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	80080000 	.word	0x80080000
 8001d84:	50040300 	.word	0x50040300
 8001d88:	c7520000 	.word	0xc7520000
 8001d8c:	50040000 	.word	0x50040000
 8001d90:	20000000 	.word	0x20000000
 8001d94:	053e2d63 	.word	0x053e2d63
 8001d98:	cb840000 	.word	0xcb840000
 8001d9c:	80000001 	.word	0x80000001

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5c 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e154      	b.n	8002226 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8146 	beq.w	8002220 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x40>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80a0 	beq.w	8002220 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b58      	ldr	r3, [pc, #352]	; (8002244 <HAL_GPIO_Init+0x2d8>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	4a57      	ldr	r2, [pc, #348]	; (8002244 <HAL_GPIO_Init+0x2d8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6613      	str	r3, [r2, #96]	; 0x60
 80020ec:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_GPIO_Init+0x2d8>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f8:	4a53      	ldr	r2, [pc, #332]	; (8002248 <HAL_GPIO_Init+0x2dc>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002122:	d019      	beq.n	8002158 <HAL_GPIO_Init+0x1ec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a49      	ldr	r2, [pc, #292]	; (800224c <HAL_GPIO_Init+0x2e0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x1e8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a48      	ldr	r2, [pc, #288]	; (8002250 <HAL_GPIO_Init+0x2e4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x1e4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a47      	ldr	r2, [pc, #284]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1e0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a46      	ldr	r2, [pc, #280]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_GPIO_Init+0x1dc>
 8002144:	2304      	movs	r3, #4
 8002146:	e008      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002148:	2307      	movs	r3, #7
 800214a:	e006      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 800214c:	2303      	movs	r3, #3
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002150:	2302      	movs	r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002158:	2300      	movs	r3, #0
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216a:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x2dc>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002178:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_GPIO_Init+0x2f0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_GPIO_Init+0x2f0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_GPIO_Init+0x2f0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_GPIO_Init+0x2f0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_GPIO_Init+0x2f0>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <HAL_GPIO_Init+0x2f0>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_GPIO_Init+0x2f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_GPIO_Init+0x2f0>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aea3 	bne.w	8001f7c <HAL_GPIO_Init+0x10>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	48000c00 	.word	0x48000c00
 8002258:	48001000 	.word	0x48001000
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e08d      	b.n	80023be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fc3a 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e006      	b.n	8002318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d108      	bne.n	8002332 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	e007      	b.n	8002342 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d138      	bne.n	800244e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e032      	b.n	8002450 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2224      	movs	r2, #36	; 0x24
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002418:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	d139      	bne.n	80024e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800247c:	2302      	movs	r3, #2
 800247e:	e033      	b.n	80024e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	b08b      	sub	sp, #44	; 0x2c
 80024f8:	af06      	add	r7, sp, #24
 80024fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0f8      	b.n	80026f8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fc96 	bl	8000e4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2203      	movs	r2, #3
 8002524:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 f879 	bl	8004624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	687e      	ldr	r6, [r7, #4]
 800253a:	466d      	mov	r5, sp
 800253c:	f106 0410 	add.w	r4, r6, #16
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	1d33      	adds	r3, r6, #4
 800254a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254c:	6838      	ldr	r0, [r7, #0]
 800254e:	f002 f858 	bl	8004602 <USB_CoreInit>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0c9      	b.n	80026f8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f002 f875 	bl	800465a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e040      	b.n	80025f8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3301      	adds	r3, #1
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3303      	adds	r3, #3
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3338      	adds	r3, #56	; 0x38
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	333c      	adds	r3, #60	; 0x3c
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3340      	adds	r3, #64	; 0x40
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3b9      	bcc.n	8002576 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	f203 1369 	addw	r3, r3, #361	; 0x169
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3b5      	bcc.n	8002608 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	687e      	ldr	r6, [r7, #4]
 80026a4:	466d      	mov	r5, sp
 80026a6:	f106 0410 	add.w	r4, r6, #16
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	602b      	str	r3, [r5, #0]
 80026b2:	1d33      	adds	r3, r6, #4
 80026b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f001 ffdc 	bl	8004674 <USB_DevInit>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e014      	b.n	80026f8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f80a 	bl	8002700 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 ffe0 	bl	80046b6 <USB_DevDisconnect>

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002724:	b29b      	uxth	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002738:	b29b      	uxth	r3, r3
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40007000 	.word	0x40007000

08002774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_PWREx_GetVoltageRange+0x18>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279e:	d130      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d038      	beq.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2232      	movs	r2, #50	; 0x32
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9b      	lsrs	r3, r3, #18
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d4:	e002      	b.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d102      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f2      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	d110      	bne.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d007      	beq.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40007000 	.word	0x40007000
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83

0800283c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f000 bc02 	b.w	8003054 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002850:	4b96      	ldr	r3, [pc, #600]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285a:	4b94      	ldr	r3, [pc, #592]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80e4 	beq.w	8002a3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_RCC_OscConfig+0x4c>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	f040 808b 	bne.w	8002996 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b01      	cmp	r3, #1
 8002884:	f040 8087 	bne.w	8002996 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x64>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e3d9      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_RCC_OscConfig+0x7e>
 80028b0:	4b7e      	ldr	r3, [pc, #504]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	e005      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a>
 80028ba:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d223      	bcs.n	8002912 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fd8a 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e3ba      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a72      	ldr	r2, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	496d      	ldr	r1, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e025      	b.n	800295e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4960      	ldr	r1, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	495b      	ldr	r1, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd4a 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e37a      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295e:	f000 fc81 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4950      	ldr	r1, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_RCC_OscConfig+0x278>)
 800297c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fb00 	bl	8000f88 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d052      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	e35e      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d032      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fb3d 	bl	8001028 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b2:	f7fe fb39 	bl	8001028 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e347      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4930      	ldr	r1, [pc, #192]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	492b      	ldr	r1, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
 8002a02:	e01a      	b.n	8002a3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb0a 	bl	8001028 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7fe fb06 	bl	8001028 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e314      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1dc>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d073      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x21c>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d10e      	bne.n	8002a70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d063      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d15f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e2f1      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x24c>
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e025      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d114      	bne.n	8002abc <HAL_RCC_OscConfig+0x280>
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e013      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080048dc 	.word	0x080048dc
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a9f      	ldr	r2, [pc, #636]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b9d      	ldr	r3, [pc, #628]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a9c      	ldr	r2, [pc, #624]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe faa4 	bl	8001028 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe faa0 	bl	8001028 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e2ae      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2a8>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fa90 	bl	8001028 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fa8c 	bl	8001028 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e29a      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2d0>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d060      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x310>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	4b7c      	ldr	r3, [pc, #496]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x328>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e277      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4973      	ldr	r1, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	e040      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fa4b 	bl	8001028 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fa47 	bl	8001028 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e255      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	495f      	ldr	r1, [pc, #380]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fa27 	bl	8001028 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fa23 	bl	8001028 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e231      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fa02 	bl	8001028 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe f9fe 	bl	8001028 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e20c      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
 8002c48:	e01b      	b.n	8002c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f9e5 	bl	8001028 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe f9e1 	bl	8001028 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1ef      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80a6 	beq.w	8002ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d118      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f9a8 	bl	8001028 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7fe f9a4 	bl	8001028 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1b2      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d8>
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d12:	e029      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d115      	bne.n	8002d48 <HAL_RCC_OscConfig+0x50c>
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	4b9a      	ldr	r3, [pc, #616]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	4a99      	ldr	r2, [pc, #612]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d58:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a95      	ldr	r2, [pc, #596]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f95a 	bl	8001028 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe f956 	bl	8001028 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e162      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ed      	beq.n	8002d78 <HAL_RCC_OscConfig+0x53c>
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f943 	bl	8001028 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe f93f 	bl	8001028 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e14b      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dbc:	4b7d      	ldr	r3, [pc, #500]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ed      	bne.n	8002da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	4a77      	ldr	r2, [pc, #476]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df6:	4a6f      	ldr	r2, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe f912 	bl	8001028 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e08:	f7fe f90e 	bl	8001028 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e11c      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <HAL_RCC_OscConfig+0x5cc>
 8002e28:	e01b      	b.n	8002e62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e2a:	4b62      	ldr	r3, [pc, #392]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e30:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe f8f5 	bl	8001028 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e42:	f7fe f8f1 	bl	8001028 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0ff      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e54:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ef      	bne.n	8002e42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80f3 	beq.w	8003052 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 80c9 	bne.w	8003008 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e76:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0203 	and.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d12c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	3b01      	subs	r3, #1
 8002e96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d123      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d113      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d062      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0ac      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f06:	f7fe f88f 	bl	8001028 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe f88b 	bl	8001028 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e099      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_OscConfig+0x77c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f46:	0212      	lsls	r2, r2, #8
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f4e:	0852      	lsrs	r2, r2, #1
 8002f50:	3a01      	subs	r2, #1
 8002f52:	0552      	lsls	r2, r2, #21
 8002f54:	4311      	orrs	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f5a:	0852      	lsrs	r2, r2, #1
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0652      	lsls	r2, r2, #25
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f66:	06d2      	lsls	r2, r2, #27
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4912      	ldr	r1, [pc, #72]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f88:	f7fe f84e 	bl	8001028 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f84a 	bl	8001028 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e058      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_RCC_OscConfig+0x778>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fae:	e050      	b.n	8003052 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04f      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d144      	bne.n	8003052 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe0:	f7fe f822 	bl	8001028 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f81e 	bl	8001028 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e02c      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x7ac>
 8003006:	e024      	b.n	8003052 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d01f      	beq.n	800304e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8003014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fe f805 	bl	8001028 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe f801 	bl	8001028 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e00f      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4905      	ldr	r1, [pc, #20]	; (800305c <HAL_RCC_OscConfig+0x820>)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x824>)
 8003048:	4013      	ands	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	e001      	b.n	8003052 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	feeefffc 	.word	0xfeeefffc

08003064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0e7      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4970      	ldr	r1, [pc, #448]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cf      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b66      	ldr	r3, [pc, #408]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d908      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4960      	ldr	r1, [pc, #384]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04c      	beq.n	800317c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0a6      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b54      	ldr	r3, [pc, #336]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311a:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e08e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e086      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b46      	ldr	r3, [pc, #280]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4943      	ldr	r1, [pc, #268]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fd ff6c 	bl	8001028 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fd ff68 	bl	8001028 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e06e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	492b      	ldr	r1, [pc, #172]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d210      	bcs.n	80031da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4923      	ldr	r1, [pc, #140]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e036      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4918      	ldr	r1, [pc, #96]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4910      	ldr	r1, [pc, #64]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003218:	f000 f824 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	490b      	ldr	r1, [pc, #44]	; (8003258 <HAL_RCC_ClockConfig+0x1f4>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1f8>)
 8003236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1fc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fea3 	bl	8000f88 <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
 8003244:	72fb      	strb	r3, [r7, #11]

  return status;
 8003246:	7afb      	ldrb	r3, [r7, #11]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40022000 	.word	0x40022000
 8003254:	40021000 	.word	0x40021000
 8003258:	080048dc 	.word	0x080048dc
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003298:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d134      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b1e      	ldr	r3, [pc, #120]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xa6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xac>
 8003308:	e005      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 800330c:	617b      	str	r3, [r7, #20]
      break;
 800330e:	e005      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 8003312:	617b      	str	r3, [r7, #20]
      break;
 8003314:	e002      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	fb03 f202 	mul.w	r2, r3, r2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	0e5b      	lsrs	r3, r3, #25
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	3301      	adds	r3, #1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800335c:	69bb      	ldr	r3, [r7, #24]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	080048f4 	.word	0x080048f4
 8003374:	00f42400 	.word	0x00f42400

08003378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080048ec 	.word	0x080048ec

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c0:	f7ff ffda 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	080048ec 	.word	0x080048ec

080033e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff f9b8 	bl	8002774 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	e014      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff f9a8 	bl	8002774 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d10b      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d919      	bls.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2ba0      	cmp	r3, #160	; 0xa0
 8003444:	d902      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e013      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e010      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d902      	bls.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003458:	2303      	movs	r3, #3
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e00a      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d102      	bne.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003464:	2302      	movs	r3, #2
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e004      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b70      	cmp	r3, #112	; 0x70
 800346e:	d101      	bne.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003470:	2301      	movs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 0207 	bic.w	r2, r3, #7
 800347c:	4909      	ldr	r1, [pc, #36]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40022000 	.word	0x40022000

080034a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b0:	2300      	movs	r3, #0
 80034b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034cc:	d01a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d2:	d814      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034dc:	d10f      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a5c      	ldr	r2, [pc, #368]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fa32 	bl	800395c <RCCEx_PLLSAI1_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	74fb      	strb	r3, [r7, #19]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	494e      	ldr	r1, [pc, #312]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 809e 	beq.w	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
 800355c:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a39      	ldr	r2, [pc, #228]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003578:	f7fd fd56 	bl	8001028 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800357e:	e009      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd fd52 	bl	8001028 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	74fb      	strb	r3, [r7, #19]
        break;
 8003592:	e005      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ef      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d15a      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035a6:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01e      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d019      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fd12 	bl	8001028 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	e00b      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fd fd0e 	bl	8001028 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d902      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	74fb      	strb	r3, [r7, #19]
            break;
 800361e:	e006      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ec      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003660:	7c7b      	ldrb	r3, [r7, #17]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	4b8d      	ldr	r3, [pc, #564]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	4a8c      	ldr	r2, [pc, #560]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800367e:	4b87      	ldr	r3, [pc, #540]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f023 0203 	bic.w	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4983      	ldr	r1, [pc, #524]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a0:	4b7e      	ldr	r3, [pc, #504]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 020c 	bic.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	497b      	ldr	r1, [pc, #492]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c2:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	4972      	ldr	r1, [pc, #456]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e4:	4b6d      	ldr	r3, [pc, #436]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	496a      	ldr	r1, [pc, #424]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	4961      	ldr	r1, [pc, #388]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003728:	4b5c      	ldr	r3, [pc, #368]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4959      	ldr	r1, [pc, #356]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4950      	ldr	r1, [pc, #320]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4948      	ldr	r1, [pc, #288]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800378e:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	493f      	ldr	r1, [pc, #252]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d028      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b0:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	4937      	ldr	r1, [pc, #220]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ce:	d106      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a31      	ldr	r2, [pc, #196]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	60d3      	str	r3, [r2, #12]
 80037dc:	e011      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e6:	d10c      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f8b4 	bl	800395c <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d028      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	491f      	ldr	r1, [pc, #124]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382c:	d106      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003838:	60d3      	str	r3, [r2, #12]
 800383a:	e011      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003844:	d10c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f885 	bl	800395c <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388a:	d109      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a02      	ldr	r2, [pc, #8]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003896:	60d3      	str	r3, [r2, #12]
 8003898:	e014      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f853 	bl	800395c <RCCEx_PLLSAI1_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01c      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ee:	d10c      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2102      	movs	r1, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f830 	bl	800395c <RCCEx_PLLSAI1_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800392c:	7cbb      	ldrb	r3, [r7, #18]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003946:	f043 0304 	orr.w	r3, r3, #4
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800396a:	4b74      	ldr	r3, [pc, #464]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003976:	4b71      	ldr	r3, [pc, #452]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d10d      	bne.n	80039a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
       ||
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800398e:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
       ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d047      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e044      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d018      	beq.n	80039e2 <RCCEx_PLLSAI1_Config+0x86>
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d825      	bhi.n	8003a00 <RCCEx_PLLSAI1_Config+0xa4>
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d002      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x62>
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d009      	beq.n	80039d0 <RCCEx_PLLSAI1_Config+0x74>
 80039bc:	e020      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039be:	4b5f      	ldr	r3, [pc, #380]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ce:	e01a      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d0:	4b5a      	ldr	r3, [pc, #360]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d116      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e0:	e013      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ee:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039fe:	e006      	b.n	8003a0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e004      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a16:	4b49      	ldr	r3, [pc, #292]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	4943      	ldr	r1, [pc, #268]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d17c      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3f      	ldr	r2, [pc, #252]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a44:	f7fd faf0 	bl	8001028 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a4a:	e009      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a4c:	f7fd faec 	bl	8001028 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d902      	bls.n	8003a60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a5e:	e005      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ef      	bne.n	8003a4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d15f      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	0211      	lsls	r1, r2, #8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68d2      	ldr	r2, [r2, #12]
 8003a8e:	06d2      	lsls	r2, r2, #27
 8003a90:	430a      	orrs	r2, r1
 8003a92:	492a      	ldr	r1, [pc, #168]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
 8003a98:	e027      	b.n	8003aea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d112      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa0:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	0211      	lsls	r1, r2, #8
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6912      	ldr	r2, [r2, #16]
 8003ab6:	0852      	lsrs	r2, r2, #1
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	0552      	lsls	r2, r2, #21
 8003abc:	430a      	orrs	r2, r1
 8003abe:	491f      	ldr	r1, [pc, #124]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	610b      	str	r3, [r1, #16]
 8003ac4:	e011      	b.n	8003aea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ace:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6892      	ldr	r2, [r2, #8]
 8003ad6:	0211      	lsls	r1, r2, #8
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6952      	ldr	r2, [r2, #20]
 8003adc:	0852      	lsrs	r2, r2, #1
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	0652      	lsls	r2, r2, #25
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	4915      	ldr	r1, [pc, #84]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd fa97 	bl	8001028 <HAL_GetTick>
 8003afa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003afc:	e009      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afe:	f7fd fa93 	bl	8001028 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d902      	bls.n	8003b12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b10:	e005      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ef      	beq.n	8003afe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4903      	ldr	r1, [pc, #12]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000

08003b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e095      	b.n	8003c7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d009      	beq.n	8003b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	61da      	str	r2, [r3, #28]
 8003b6a:	e005      	b.n	8003b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd f8c8 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d902      	bls.n	8003bc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bce:	d007      	beq.n	8003be0 <HAL_SPI_Init+0xa0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	ea42 0103 	orr.w	r1, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f003 0204 	and.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c5c:	ea42 0103 	orr.w	r1, r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e040      	b.n	8003d1a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fc ff9b 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fa83 	bl	80041d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f826 	bl	8003d24 <UART_SetConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e01b      	b.n	8003d1a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb02 	bl	800431c <UART_CheckIdleState>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b08a      	sub	sp, #40	; 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b9e      	ldr	r3, [pc, #632]	; (8003fcc <UART_SetConfig+0x2a8>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a93      	ldr	r2, [pc, #588]	; (8003fd0 <UART_SetConfig+0x2ac>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a8a      	ldr	r2, [pc, #552]	; (8003fd4 <UART_SetConfig+0x2b0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d126      	bne.n	8003dfc <UART_SetConfig+0xd8>
 8003dae:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <UART_SetConfig+0x2b4>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0xd0>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0xa0>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e0ab      	b.n	8003f34 <UART_SetConfig+0x210>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e0a7      	b.n	8003f34 <UART_SetConfig+0x210>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e0a3      	b.n	8003f34 <UART_SetConfig+0x210>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e09f      	b.n	8003f34 <UART_SetConfig+0x210>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e09b      	b.n	8003f34 <UART_SetConfig+0x210>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a76      	ldr	r2, [pc, #472]	; (8003fdc <UART_SetConfig+0x2b8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d138      	bne.n	8003e78 <UART_SetConfig+0x154>
 8003e06:	4b74      	ldr	r3, [pc, #464]	; (8003fd8 <UART_SetConfig+0x2b4>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d82d      	bhi.n	8003e70 <UART_SetConfig+0x14c>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0xf8>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e06d      	b.n	8003f34 <UART_SetConfig+0x210>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e069      	b.n	8003f34 <UART_SetConfig+0x210>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e065      	b.n	8003f34 <UART_SetConfig+0x210>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e061      	b.n	8003f34 <UART_SetConfig+0x210>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e05d      	b.n	8003f34 <UART_SetConfig+0x210>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <UART_SetConfig+0x2bc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d125      	bne.n	8003ece <UART_SetConfig+0x1aa>
 8003e82:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <UART_SetConfig+0x2b4>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e8c:	2b30      	cmp	r3, #48	; 0x30
 8003e8e:	d016      	beq.n	8003ebe <UART_SetConfig+0x19a>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d818      	bhi.n	8003ec6 <UART_SetConfig+0x1a2>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d00a      	beq.n	8003eae <UART_SetConfig+0x18a>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d814      	bhi.n	8003ec6 <UART_SetConfig+0x1a2>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <UART_SetConfig+0x182>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d008      	beq.n	8003eb6 <UART_SetConfig+0x192>
 8003ea4:	e00f      	b.n	8003ec6 <UART_SetConfig+0x1a2>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eac:	e042      	b.n	8003f34 <UART_SetConfig+0x210>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb4:	e03e      	b.n	8003f34 <UART_SetConfig+0x210>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebc:	e03a      	b.n	8003f34 <UART_SetConfig+0x210>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec4:	e036      	b.n	8003f34 <UART_SetConfig+0x210>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ecc:	e032      	b.n	8003f34 <UART_SetConfig+0x210>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <UART_SetConfig+0x2ac>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d12a      	bne.n	8003f2e <UART_SetConfig+0x20a>
 8003ed8:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <UART_SetConfig+0x2b4>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee6:	d01a      	beq.n	8003f1e <UART_SetConfig+0x1fa>
 8003ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eec:	d81b      	bhi.n	8003f26 <UART_SetConfig+0x202>
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef2:	d00c      	beq.n	8003f0e <UART_SetConfig+0x1ea>
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef8:	d815      	bhi.n	8003f26 <UART_SetConfig+0x202>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <UART_SetConfig+0x1e2>
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d008      	beq.n	8003f16 <UART_SetConfig+0x1f2>
 8003f04:	e00f      	b.n	8003f26 <UART_SetConfig+0x202>
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0c:	e012      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f14:	e00e      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f16:	2304      	movs	r3, #4
 8003f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1c:	e00a      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f24:	e006      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f26:	2310      	movs	r3, #16
 8003f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2c:	e002      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f2e:	2310      	movs	r3, #16
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <UART_SetConfig+0x2ac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f040 808a 	bne.w	8004054 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d824      	bhi.n	8003f92 <UART_SetConfig+0x26e>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x22c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f93 	.word	0x08003f93
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f93 	.word	0x08003f93
 8003f60:	08003f83 	.word	0x08003f83
 8003f64:	08003f93 	.word	0x08003f93
 8003f68:	08003f93 	.word	0x08003f93
 8003f6c:	08003f93 	.word	0x08003f93
 8003f70:	08003f8b 	.word	0x08003f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7ff fa0c 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8003f78:	61f8      	str	r0, [r7, #28]
        break;
 8003f7a:	e010      	b.n	8003f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <UART_SetConfig+0x2c0>)
 8003f7e:	61fb      	str	r3, [r7, #28]
        break;
 8003f80:	e00d      	b.n	8003f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7ff f96f 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003f86:	61f8      	str	r0, [r7, #28]
        break;
 8003f88:	e009      	b.n	8003f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8e:	61fb      	str	r3, [r7, #28]
        break;
 8003f90:	e005      	b.n	8003f9e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8109 	beq.w	80041b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d305      	bcc.n	8003fc2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d912      	bls.n	8003fe8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fc8:	e0f6      	b.n	80041b8 <UART_SetConfig+0x494>
 8003fca:	bf00      	nop
 8003fcc:	efff69f3 	.word	0xefff69f3
 8003fd0:	40008000 	.word	0x40008000
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2200      	movs	r2, #0
 8003fec:	461c      	mov	r4, r3
 8003fee:	4615      	mov	r5, r2
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	022b      	lsls	r3, r5, #8
 8003ffa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ffe:	0222      	lsls	r2, r4, #8
 8004000:	68f9      	ldr	r1, [r7, #12]
 8004002:	6849      	ldr	r1, [r1, #4]
 8004004:	0849      	lsrs	r1, r1, #1
 8004006:	2000      	movs	r0, #0
 8004008:	4688      	mov	r8, r1
 800400a:	4681      	mov	r9, r0
 800400c:	eb12 0a08 	adds.w	sl, r2, r8
 8004010:	eb43 0b09 	adc.w	fp, r3, r9
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004022:	4650      	mov	r0, sl
 8004024:	4659      	mov	r1, fp
 8004026:	f7fc f8d1 	bl	80001cc <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4613      	mov	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d308      	bcc.n	800404c <UART_SetConfig+0x328>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004040:	d204      	bcs.n	800404c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e0b5      	b.n	80041b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004052:	e0b1      	b.n	80041b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405c:	d15d      	bne.n	800411a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800405e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004062:	2b08      	cmp	r3, #8
 8004064:	d827      	bhi.n	80040b6 <UART_SetConfig+0x392>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x348>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff f97e 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004094:	61f8      	str	r0, [r7, #28]
        break;
 8004096:	e014      	b.n	80040c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7ff f990 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 800409c:	61f8      	str	r0, [r7, #28]
        break;
 800409e:	e010      	b.n	80040c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <UART_SetConfig+0x4b0>)
 80040a2:	61fb      	str	r3, [r7, #28]
        break;
 80040a4:	e00d      	b.n	80040c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7ff f8dd 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80040aa:	61f8      	str	r0, [r7, #28]
        break;
 80040ac:	e009      	b.n	80040c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
        break;
 80040b4:	e005      	b.n	80040c2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d077      	beq.n	80041b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005a      	lsls	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	441a      	add	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d916      	bls.n	8004112 <UART_SetConfig+0x3ee>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d212      	bcs.n	8004112 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f023 030f 	bic.w	r3, r3, #15
 80040f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	b29a      	uxth	r2, r3
 8004102:	8afb      	ldrh	r3, [r7, #22]
 8004104:	4313      	orrs	r3, r2
 8004106:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	8afa      	ldrh	r2, [r7, #22]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e052      	b.n	80041b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004118:	e04e      	b.n	80041b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800411a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800411e:	2b08      	cmp	r3, #8
 8004120:	d827      	bhi.n	8004172 <UART_SetConfig+0x44e>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x404>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004173 	.word	0x08004173
 8004138:	08004163 	.word	0x08004163
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
 8004148:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7ff f920 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e014      	b.n	800417e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7ff f932 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004158:	61f8      	str	r0, [r7, #28]
        break;
 800415a:	e010      	b.n	800417e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <UART_SetConfig+0x4b0>)
 800415e:	61fb      	str	r3, [r7, #28]
        break;
 8004160:	e00d      	b.n	800417e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7ff f87f 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8004166:	61f8      	str	r0, [r7, #28]
        break;
 8004168:	e009      	b.n	800417e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	61fb      	str	r3, [r7, #28]
        break;
 8004170:	e005      	b.n	800417e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800417c:	bf00      	nop
    }

    if (pclk != 0U)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	085a      	lsrs	r2, r3, #1
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	441a      	add	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0f      	cmp	r3, #15
 800419c:	d909      	bls.n	80041b2 <UART_SetConfig+0x48e>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d205      	bcs.n	80041b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	e002      	b.n	80041b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3728      	adds	r7, #40	; 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d2:	bf00      	nop
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01a      	beq.n	80042ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d6:	d10a      	bne.n	80042ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b098      	sub	sp, #96	; 0x60
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800432c:	f7fc fe7c 	bl	8001028 <HAL_GetTick>
 8004330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d12e      	bne.n	800439e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004348:	2200      	movs	r2, #0
 800434a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f88c 	bl	800446c <UART_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d021      	beq.n	800439e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	653b      	str	r3, [r7, #80]	; 0x50
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
 800437a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800437e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e062      	b.n	8004464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d149      	bne.n	8004440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	2200      	movs	r2, #0
 80043b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f856 	bl	800446c <UART_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d03c      	beq.n	8004440 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	623b      	str	r3, [r7, #32]
   return(result);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
 80043e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60fb      	str	r3, [r7, #12]
   return(result);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004418:	61fa      	str	r2, [r7, #28]
 800441a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	617b      	str	r3, [r7, #20]
   return(result);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e011      	b.n	8004464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3758      	adds	r7, #88	; 0x58
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447c:	e049      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d045      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fc fdcf 	bl	8001028 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <UART_WaitOnFlagUntilTimeout+0x30>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e048      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d031      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d110      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f838 	bl	800453a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2208      	movs	r2, #8
 80044ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e029      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d111      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f81e 	bl	800453a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0a6      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b095      	sub	sp, #84	; 0x54
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	643b      	str	r3, [r7, #64]	; 0x40
 8004562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e6      	bne.n	8004542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	61fb      	str	r3, [r7, #28]
   return(result);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3308      	adds	r3, #8
 8004592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d118      	bne.n	80045e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0310 	bic.w	r3, r3, #16
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	613b      	str	r3, [r7, #16]
   return(result);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045f6:	bf00      	nop
 80045f8:	3754      	adds	r7, #84	; 0x54
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004602:	b084      	sub	sp, #16
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	f107 0014 	add.w	r0, r7, #20
 8004610:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr

08004624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800462c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004630:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	b29b      	uxth	r3, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	4013      	ands	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004674:	b084      	sub	sp, #16
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	f107 0014 	add.w	r0, r7, #20
 8004682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	b004      	add	sp, #16
 80046b4:	4770      	bx	lr

080046b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80046e4:	4904      	ldr	r1, [pc, #16]	; (80046f8 <MX_FATFS_Init+0x18>)
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <MX_FATFS_Init+0x1c>)
 80046e8:	f000 f8b0 	bl	800484c <FATFS_LinkDriver>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <MX_FATFS_Init+0x20>)
 80046f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200005cc 	.word	0x200005cc
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	200005c8 	.word	0x200005c8

08004704 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <USER_initialize+0x24>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <USER_initialize+0x24>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000009 	.word	0x20000009

0800472c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <USER_status+0x24>)
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <USER_status+0x24>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000009 	.word	0x20000009

08004754 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004764:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004782:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	603a      	str	r2, [r7, #0]
 800479a:	71fb      	strb	r3, [r7, #7]
 800479c:	460b      	mov	r3, r1
 800479e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
    return res;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047cc:	7a5b      	ldrb	r3, [r3, #9]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d131      	bne.n	8004838 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047d6:	7a5b      	ldrb	r3, [r3, #9]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047e4:	7a5b      	ldrb	r3, [r3, #9]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047f4:	7a5b      	ldrb	r3, [r3, #9]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 80047fc:	4413      	add	r3, r2
 80047fe:	79fa      	ldrb	r2, [r7, #7]
 8004800:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 8004804:	7a5b      	ldrb	r3, [r3, #9]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	b2d1      	uxtb	r1, r2
 800480c:	4a0e      	ldr	r2, [pc, #56]	; (8004848 <FATFS_LinkDriverEx+0x94>)
 800480e:	7251      	strb	r1, [r2, #9]
 8004810:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004812:	7dbb      	ldrb	r3, [r7, #22]
 8004814:	3330      	adds	r3, #48	; 0x30
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	3301      	adds	r3, #1
 8004820:	223a      	movs	r2, #58	; 0x3a
 8004822:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3302      	adds	r3, #2
 8004828:	222f      	movs	r2, #47	; 0x2f
 800482a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	3303      	adds	r3, #3
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	200005d0 	.word	0x200005d0

0800484c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004856:	2200      	movs	r2, #0
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ffaa 	bl	80047b4 <FATFS_LinkDriverEx>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <memset>:
 800486a:	4402      	add	r2, r0
 800486c:	4603      	mov	r3, r0
 800486e:	4293      	cmp	r3, r2
 8004870:	d100      	bne.n	8004874 <memset+0xa>
 8004872:	4770      	bx	lr
 8004874:	f803 1b01 	strb.w	r1, [r3], #1
 8004878:	e7f9      	b.n	800486e <memset+0x4>
	...

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	; (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	; (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x44>)
 8004890:	f000 f818 	bl	80048c4 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	0800492c 	.word	0x0800492c
 80048b8:	0800492c 	.word	0x0800492c
 80048bc:	0800492c 	.word	0x0800492c
 80048c0:	08004930 	.word	0x08004930

080048c4 <_init>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr

080048d0 <_fini>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr
