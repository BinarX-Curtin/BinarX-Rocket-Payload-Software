
BinarX Rocket Payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009578  08009578  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009580  08009580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000074  080095fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  080095fc  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a319  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003658  00000000  00000000  0003a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117a  00000000  00000000  0003f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026af0  00000000  00000000  0004027a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e5af  00000000  00000000  00066d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e57e7  00000000  00000000  00085319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064ac  00000000  00000000  0016ab00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00170fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009230 	.word	0x08009230

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009230 	.word	0x08009230

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 ff0b 	bl	800139e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f9a8 	bl	80008dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058c:	f000 fa00 	bl	8000990 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fbd2 	bl	8000d38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 fa2a 	bl	80009ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 fa8c 	bl	8000ab4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800059c:	f000 faca 	bl	8000b34 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 faf6 	bl	8000b90 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005a4:	f000 fb24 	bl	8000bf0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005a8:	f000 fb60 	bl	8000c6c <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80005ac:	f000 fb9c 	bl	8000ce8 <MX_USB_PCD_Init>
  MX_FATFS_Init();
 80005b0:	f005 f862 	bl	8005678 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000); //delay to prevent double printing after reboot during programming
 80005b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b8:	f000 ff66 	bl	8001488 <HAL_Delay>

  sprintf(serial_string, "Hello from STM32L4 via UART.\r\n"); //load serial string buffer
 80005bc:	49b4      	ldr	r1, [pc, #720]	; (8000890 <main+0x314>)
 80005be:	48b5      	ldr	r0, [pc, #724]	; (8000894 <main+0x318>)
 80005c0:	f008 f992 	bl	80088e8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 80005c4:	48b3      	ldr	r0, [pc, #716]	; (8000894 <main+0x318>)
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	230a      	movs	r3, #10
 80005d0:	49b0      	ldr	r1, [pc, #704]	; (8000894 <main+0x318>)
 80005d2:	48b1      	ldr	r0, [pc, #708]	; (8000898 <main+0x31c>)
 80005d4:	f004 fae8 	bl	8004ba8 <HAL_UART_Transmit>

  HAL_Delay(1000); //delay to let SD card finish initialisation
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 ff54 	bl	8001488 <HAL_Delay>

  sprintf(serial_string, "Finished SD card initialisation delay.\r\n"); //load serial string buffer
 80005e0:	49ae      	ldr	r1, [pc, #696]	; (800089c <main+0x320>)
 80005e2:	48ac      	ldr	r0, [pc, #688]	; (8000894 <main+0x318>)
 80005e4:	f008 f980 	bl	80088e8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 80005e8:	48aa      	ldr	r0, [pc, #680]	; (8000894 <main+0x318>)
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	230a      	movs	r3, #10
 80005f4:	49a7      	ldr	r1, [pc, #668]	; (8000894 <main+0x318>)
 80005f6:	48a8      	ldr	r0, [pc, #672]	; (8000898 <main+0x31c>)
 80005f8:	f004 fad6 	bl	8004ba8 <HAL_UART_Transmit>
  FATFS FatFs; 	//Fatfs handle
  FIL f; 		//File handle
  FRESULT fr; //Result after operations

  //Open the file system
  fr = f_mount(&FatFs, "", 1); //1=mount now
 80005fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000600:	2201      	movs	r2, #1
 8000602:	49a7      	ldr	r1, [pc, #668]	; (80008a0 <main+0x324>)
 8000604:	4618      	mov	r0, r3
 8000606:	f006 fde3 	bl	80071d0 <f_mount>
 800060a:	4603      	mov	r3, r0
 800060c:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fr != FR_OK) {
 8000610:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000614:	2b00      	cmp	r3, #0
 8000616:	d011      	beq.n	800063c <main+0xc0>
	  sprintf(serial_string, "File mount error: (%i)\r\n", fr);
 8000618:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800061c:	461a      	mov	r2, r3
 800061e:	49a1      	ldr	r1, [pc, #644]	; (80008a4 <main+0x328>)
 8000620:	489c      	ldr	r0, [pc, #624]	; (8000894 <main+0x318>)
 8000622:	f008 f961 	bl	80088e8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 8000626:	489b      	ldr	r0, [pc, #620]	; (8000894 <main+0x318>)
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	230a      	movs	r3, #10
 8000632:	4998      	ldr	r1, [pc, #608]	; (8000894 <main+0x318>)
 8000634:	4898      	ldr	r0, [pc, #608]	; (8000898 <main+0x31c>)
 8000636:	f004 fab7 	bl	8004ba8 <HAL_UART_Transmit>
    while(1); // stop here if there was an error
 800063a:	e7fe      	b.n	800063a <main+0xbe>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fr = f_getfree("", &free_clusters, &getFreeFs);
 800063c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000644:	4619      	mov	r1, r3
 8000646:	4896      	ldr	r0, [pc, #600]	; (80008a0 <main+0x324>)
 8000648:	f007 fb22 	bl	8007c90 <f_getfree>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fr != FR_OK) {
 8000652:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000656:	2b00      	cmp	r3, #0
 8000658:	d011      	beq.n	800067e <main+0x102>
	  sprintf(serial_string, "f_getfree error (%i)\r\n", fr);
 800065a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800065e:	461a      	mov	r2, r3
 8000660:	4991      	ldr	r1, [pc, #580]	; (80008a8 <main+0x32c>)
 8000662:	488c      	ldr	r0, [pc, #560]	; (8000894 <main+0x318>)
 8000664:	f008 f940 	bl	80088e8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 8000668:	488a      	ldr	r0, [pc, #552]	; (8000894 <main+0x318>)
 800066a:	f7ff fdb1 	bl	80001d0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	230a      	movs	r3, #10
 8000674:	4987      	ldr	r1, [pc, #540]	; (8000894 <main+0x318>)
 8000676:	4888      	ldr	r0, [pc, #544]	; (8000898 <main+0x31c>)
 8000678:	f004 fa96 	bl	8004ba8 <HAL_UART_Transmit>
 	while(1); // stop here if there was an error
 800067c:	e7fe      	b.n	800067c <main+0x100>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800067e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000682:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	3b02      	subs	r3, #2
 800068c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000690:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	8952      	ldrh	r2, [r2, #10]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 80006a0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006a4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	895b      	ldrh	r3, [r3, #10]
 80006ac:	461a      	mov	r2, r3
 80006ae:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006b2:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  sprintf(serial_string, "SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006c0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006c4:	085a      	lsrs	r2, r3, #1
 80006c6:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006ca:	085b      	lsrs	r3, r3, #1
 80006cc:	4977      	ldr	r1, [pc, #476]	; (80008ac <main+0x330>)
 80006ce:	4871      	ldr	r0, [pc, #452]	; (8000894 <main+0x318>)
 80006d0:	f008 f90a 	bl	80088e8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 80006d4:	486f      	ldr	r0, [pc, #444]	; (8000894 <main+0x318>)
 80006d6:	f7ff fd7b 	bl	80001d0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	230a      	movs	r3, #10
 80006e0:	496c      	ldr	r1, [pc, #432]	; (8000894 <main+0x318>)
 80006e2:	486d      	ldr	r0, [pc, #436]	; (8000898 <main+0x31c>)
 80006e4:	f004 fa60 	bl	8004ba8 <HAL_UART_Transmit>

  //Now let's try to open file "test.txt"
  fr = f_open(&f, "hello.txt", FA_READ);
 80006e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ec:	2201      	movs	r2, #1
 80006ee:	4970      	ldr	r1, [pc, #448]	; (80008b0 <main+0x334>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fdb3 	bl	800725c <f_open>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fr != FR_OK) {
 80006fc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000700:	2b00      	cmp	r3, #0
 8000702:	d011      	beq.n	8000728 <main+0x1ac>
  sprintf(serial_string, "f_open error (%i)\r\n", fr);
 8000704:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000708:	461a      	mov	r2, r3
 800070a:	496a      	ldr	r1, [pc, #424]	; (80008b4 <main+0x338>)
 800070c:	4861      	ldr	r0, [pc, #388]	; (8000894 <main+0x318>)
 800070e:	f008 f8eb 	bl	80088e8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 8000712:	4860      	ldr	r0, [pc, #384]	; (8000894 <main+0x318>)
 8000714:	f7ff fd5c 	bl	80001d0 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	230a      	movs	r3, #10
 800071e:	495d      	ldr	r1, [pc, #372]	; (8000894 <main+0x318>)
 8000720:	485d      	ldr	r0, [pc, #372]	; (8000898 <main+0x31c>)
 8000722:	f004 fa41 	bl	8004ba8 <HAL_UART_Transmit>
  while(1); // stop here if there was an error
 8000726:	e7fe      	b.n	8000726 <main+0x1aa>
    }
  sprintf(serial_string, "I was able to open \"hello.txt\" for reading!\r\n");
 8000728:	4963      	ldr	r1, [pc, #396]	; (80008b8 <main+0x33c>)
 800072a:	485a      	ldr	r0, [pc, #360]	; (8000894 <main+0x318>)
 800072c:	f008 f8dc 	bl	80088e8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 8000730:	4858      	ldr	r0, [pc, #352]	; (8000894 <main+0x318>)
 8000732:	f7ff fd4d 	bl	80001d0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	230a      	movs	r3, #10
 800073c:	4955      	ldr	r1, [pc, #340]	; (8000894 <main+0x318>)
 800073e:	4856      	ldr	r0, [pc, #344]	; (8000898 <main+0x31c>)
 8000740:	f004 fa32 	bl	8004ba8 <HAL_UART_Transmit>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* r_res = f_gets((TCHAR*)readBuf, 30, &f);
 8000744:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	211e      	movs	r1, #30
 800074e:	4618      	mov	r0, r3
 8000750:	f007 fb53 	bl	8007dfa <f_gets>
 8000754:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
  if(r_res != 0) {
 8000758:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800075c:	2b00      	cmp	r3, #0
 800075e:	d011      	beq.n	8000784 <main+0x208>
	sprintf(serial_string, "Read string from 'hello_world.txt' contents: %s\r\n", readBuf);
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	461a      	mov	r2, r3
 8000766:	4955      	ldr	r1, [pc, #340]	; (80008bc <main+0x340>)
 8000768:	484a      	ldr	r0, [pc, #296]	; (8000894 <main+0x318>)
 800076a:	f008 f8bd 	bl	80088e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 800076e:	4849      	ldr	r0, [pc, #292]	; (8000894 <main+0x318>)
 8000770:	f7ff fd2e 	bl	80001d0 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	230a      	movs	r3, #10
 800077a:	4946      	ldr	r1, [pc, #280]	; (8000894 <main+0x318>)
 800077c:	4846      	ldr	r0, [pc, #280]	; (8000898 <main+0x31c>)
 800077e:	f004 fa13 	bl	8004ba8 <HAL_UART_Transmit>
 8000782:	e010      	b.n	80007a6 <main+0x22a>
  } else {
	sprintf(serial_string, "f_gets error (%i)\r\n", fr);
 8000784:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000788:	461a      	mov	r2, r3
 800078a:	494d      	ldr	r1, [pc, #308]	; (80008c0 <main+0x344>)
 800078c:	4841      	ldr	r0, [pc, #260]	; (8000894 <main+0x318>)
 800078e:	f008 f8ab 	bl	80088e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 8000792:	4840      	ldr	r0, [pc, #256]	; (8000894 <main+0x318>)
 8000794:	f7ff fd1c 	bl	80001d0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	230a      	movs	r3, #10
 800079e:	493d      	ldr	r1, [pc, #244]	; (8000894 <main+0x318>)
 80007a0:	483d      	ldr	r0, [pc, #244]	; (8000898 <main+0x31c>)
 80007a2:	f004 fa01 	bl	8004ba8 <HAL_UART_Transmit>
  }

  //close file
  f_close(&f);
 80007a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 fa46 	bl	8007c3c <f_close>

  fr = f_open(&f, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 80007b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b4:	2232      	movs	r2, #50	; 0x32
 80007b6:	4943      	ldr	r1, [pc, #268]	; (80008c4 <main+0x348>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f006 fd4f 	bl	800725c <f_open>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fr == FR_OK) {
 80007c4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10e      	bne.n	80007ea <main+0x26e>
	sprintf(serial_string, "Opened data.csv for writing (appending lines)\r\n");
 80007cc:	493e      	ldr	r1, [pc, #248]	; (80008c8 <main+0x34c>)
 80007ce:	4831      	ldr	r0, [pc, #196]	; (8000894 <main+0x318>)
 80007d0:	f008 f88a 	bl	80088e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 80007d4:	482f      	ldr	r0, [pc, #188]	; (8000894 <main+0x318>)
 80007d6:	f7ff fcfb 	bl	80001d0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	230a      	movs	r3, #10
 80007e0:	492c      	ldr	r1, [pc, #176]	; (8000894 <main+0x318>)
 80007e2:	482d      	ldr	r0, [pc, #180]	; (8000898 <main+0x31c>)
 80007e4:	f004 f9e0 	bl	8004ba8 <HAL_UART_Transmit>
 80007e8:	e010      	b.n	800080c <main+0x290>
  }
  else {
	sprintf(serial_string, "f_open error (%i)\r\n", fr);
 80007ea:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007ee:	461a      	mov	r2, r3
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <main+0x338>)
 80007f2:	4828      	ldr	r0, [pc, #160]	; (8000894 <main+0x318>)
 80007f4:	f008 f878 	bl	80088e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 80007f8:	4826      	ldr	r0, [pc, #152]	; (8000894 <main+0x318>)
 80007fa:	f7ff fce9 	bl	80001d0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	230a      	movs	r3, #10
 8000804:	4923      	ldr	r1, [pc, #140]	; (8000894 <main+0x318>)
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <main+0x31c>)
 8000808:	f004 f9ce 	bl	8004ba8 <HAL_UART_Transmit>
  }

  UINT bytes_written;
  sprintf(file_string, "An additional line.\r\n");
 800080c:	492f      	ldr	r1, [pc, #188]	; (80008cc <main+0x350>)
 800080e:	4830      	ldr	r0, [pc, #192]	; (80008d0 <main+0x354>)
 8000810:	f008 f86a 	bl	80088e8 <siprintf>
  fr = f_write(&f, file_string, strlen(file_string), &bytes_written);
 8000814:	482e      	ldr	r0, [pc, #184]	; (80008d0 <main+0x354>)
 8000816:	f7ff fcdb 	bl	80001d0 <strlen>
 800081a:	4602      	mov	r2, r0
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000822:	492b      	ldr	r1, [pc, #172]	; (80008d0 <main+0x354>)
 8000824:	f007 f817 	bl	8007856 <f_write>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fr == FR_OK) {
 800082e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000832:	2b00      	cmp	r3, #0
 8000834:	d114      	bne.n	8000860 <main+0x2e4>
    sprintf(serial_string, "Wrote %i bytes to data.csv.\r\n", bytes_written);
 8000836:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800083a:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4924      	ldr	r1, [pc, #144]	; (80008d4 <main+0x358>)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <main+0x318>)
 8000846:	f008 f84f 	bl	80088e8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <main+0x318>)
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	230a      	movs	r3, #10
 8000856:	490f      	ldr	r1, [pc, #60]	; (8000894 <main+0x318>)
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <main+0x31c>)
 800085a:	f004 f9a5 	bl	8004ba8 <HAL_UART_Transmit>
 800085e:	e010      	b.n	8000882 <main+0x306>
  }
  else {
    sprintf(serial_string, "f_write error (%i)\r\n", fr);
 8000860:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000864:	461a      	mov	r2, r3
 8000866:	491c      	ldr	r1, [pc, #112]	; (80008d8 <main+0x35c>)
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <main+0x318>)
 800086a:	f008 f83d 	bl	80088e8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)serial_string, strlen(serial_string), 10); //transmit serial_string with a 10ms timeout using USART1
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <main+0x318>)
 8000870:	f7ff fcae 	bl	80001d0 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29a      	uxth	r2, r3
 8000878:	230a      	movs	r3, #10
 800087a:	4906      	ldr	r1, [pc, #24]	; (8000894 <main+0x318>)
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <main+0x31c>)
 800087e:	f004 f993 	bl	8004ba8 <HAL_UART_Transmit>
  }

  f_close(&f);
 8000882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000886:	4618      	mov	r0, r3
 8000888:	f007 f9d8 	bl	8007c3c <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088c:	e7fe      	b.n	800088c <main+0x310>
 800088e:	bf00      	nop
 8000890:	08009248 	.word	0x08009248
 8000894:	20000618 	.word	0x20000618
 8000898:	200001d0 	.word	0x200001d0
 800089c:	08009268 	.word	0x08009268
 80008a0:	08009294 	.word	0x08009294
 80008a4:	08009298 	.word	0x08009298
 80008a8:	080092b4 	.word	0x080092b4
 80008ac:	080092cc 	.word	0x080092cc
 80008b0:	08009314 	.word	0x08009314
 80008b4:	08009320 	.word	0x08009320
 80008b8:	08009334 	.word	0x08009334
 80008bc:	08009364 	.word	0x08009364
 80008c0:	08009398 	.word	0x08009398
 80008c4:	080093ac 	.word	0x080093ac
 80008c8:	080093b8 	.word	0x080093b8
 80008cc:	080093e8 	.word	0x080093e8
 80008d0:	20000680 	.word	0x20000680
 80008d4:	08009400 	.word	0x08009400
 80008d8:	08009420 	.word	0x08009420

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b096      	sub	sp, #88	; 0x58
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2244      	movs	r2, #68	; 0x44
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f008 f81c 	bl	8008928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000902:	f002 f98d 	bl	8002c20 <HAL_PWREx_ControlVoltageScaling>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800090c:	f000 fa96 	bl	8000e3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000910:	f002 f968 	bl	8002be4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <SystemClock_Config+0xb0>)
 8000916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <SystemClock_Config+0xb0>)
 800091c:	f023 0318 	bic.w	r3, r3, #24
 8000920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
 8000924:	2315      	movs	r3, #21
 8000926:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4618      	mov	r0, r3
 8000948:	f002 f9c0 	bl	8002ccc <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000952:	f000 fa73 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800095a:	2302      	movs	r3, #2
 800095c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fdc0 	bl	80034f4 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800097a:	f000 fa5f 	bl	8000e3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800097e:	f003 fa25 	bl	8003dcc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000982:	bf00      	nop
 8000984:	3758      	adds	r7, #88	; 0x58
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b098      	sub	sp, #96	; 0x60
 8000994:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2260      	movs	r2, #96	; 0x60
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f007 ffc3 	bl	8008928 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80009a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009b4:	2301      	movs	r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009bc:	2318      	movs	r3, #24
 80009be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80009cc:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80009d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 ffaf 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80009e0:	f000 fa2c 	bl	8000e3c <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3760      	adds	r7, #96	; 0x60
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a04:	4a29      	ldr	r2, [pc, #164]	; (8000aac <MX_ADC1_Init+0xc0>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a64:	f000 fec0 	bl	80017e8 <HAL_ADC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a6e:	f000 f9e5 	bl	8000e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_ADC1_Init+0xc4>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a76:	2306      	movs	r3, #6
 8000a78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7e:	237f      	movs	r3, #127	; 0x7f
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a82:	2304      	movs	r3, #4
 8000a84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a90:	f000 ffec 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a9a:	f000 f9cf 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000090 	.word	0x20000090
 8000aac:	50040000 	.word	0x50040000
 8000ab0:	14f00020 	.word	0x14f00020

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MX_I2C1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <MX_I2C1_Init+0x7c>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000af0:	f001 fe16 	bl	8002720 <HAL_I2C_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f000 f99f 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000b02:	f001 fea8 	bl	8002856 <HAL_I2CEx_ConfigAnalogFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b0c:	f000 f996 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000b14:	f001 feea 	bl	80028ec <HAL_I2CEx_ConfigDigitalFilter>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f98d 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000f4 	.word	0x200000f4
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	00303d5b 	.word	0x00303d5b

08000b34 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_LPUART1_UART_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_LPUART1_UART_Init+0x58>)
 8000b42:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b4a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_LPUART1_UART_Init+0x50>)
 8000b72:	f003 ffcb 	bl	8004b0c <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000b7c:	f000 f95e 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000148 	.word	0x20000148
 8000b88:	40008000 	.word	0x40008000
 8000b8c:	00033324 	.word	0x00033324

08000b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_USART1_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bd4:	f003 ff9a 	bl	8004b0c <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 f92d 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001d0 	.word	0x200001d0
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <MX_SPI1_Init+0x78>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c3e:	2207      	movs	r2, #7
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c50:	f003 f9be 	bl	8003fd0 <HAL_SPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 f8ef 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000258 	.word	0x20000258
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <MX_SPI2_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000cba:	2207      	movs	r2, #7
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_SPI2_Init+0x74>)
 8000ccc:	f003 f980 	bl	8003fd0 <HAL_SPI_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 f8b1 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200002bc 	.word	0x200002bc
 8000ce4:	40003800 	.word	0x40003800

08000ce8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <MX_USB_PCD_Init+0x4c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_USB_PCD_Init+0x48>)
 8000d1e:	f001 fe31 	bl	8002984 <HAL_PCD_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d28:	f000 f888 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000320 	.word	0x20000320
 8000d34:	40006800 	.word	0x40006800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a2b      	ldr	r2, [pc, #172]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_GPIO_Port, uSD_CS_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	481f      	ldr	r0, [pc, #124]	; (8000e34 <MX_GPIO_Init+0xfc>)
 8000db6:	f001 fc9b 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_GPIO_Init+0x100>)
 8000dd0:	f001 fb14 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000dd4:	f240 3336 	movw	r3, #822	; 0x336
 8000dd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4812      	ldr	r0, [pc, #72]	; (8000e34 <MX_GPIO_Init+0xfc>)
 8000dea:	f001 fb07 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CS_Pin */
  GPIO_InitStruct.Pin = uSD_CS_Pin;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0xfc>)
 8000e08:	f001 faf8 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000e0c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 faea 	bl	80023fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400
 8000e38:	48000800 	.word	0x48000800

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <HAL_ADC_MspInit+0x74>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d124      	bne.n	8000efc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0x78>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f001 fa80 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	50040000 	.word	0x50040000
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0a2      	sub	sp, #136	; 0x88
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2260      	movs	r2, #96	; 0x60
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f007 fcfb 	bl	8008928 <memset>
  if(hi2c->Instance==I2C1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_I2C_MspInit+0xa8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d137      	bne.n	8000fac <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fcf5 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f54:	f7ff ff72 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f82:	2304      	movs	r3, #4
 8000f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_I2C_MspInit+0xb0>)
 8000f90:	f001 fa34 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_I2C_MspInit+0xac>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3788      	adds	r7, #136	; 0x88
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a4      	sub	sp, #144	; 0x90
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2260      	movs	r2, #96	; 0x60
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 fca1 	bl	8008928 <memset>
  if(huart->Instance==LPUART1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a42      	ldr	r2, [pc, #264]	; (80010f4 <HAL_UART_MspInit+0x134>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d13b      	bne.n	8001068 <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fc9b 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001008:	f7ff ff18 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_UART_MspInit+0x138>)
 800100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001010:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_UART_MspInit+0x138>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_UART_MspInit+0x138>)
 800101a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_UART_MspInit+0x138>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_UART_MspInit+0x138>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_UART_MspInit+0x138>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800103c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001040:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001054:	2308      	movs	r3, #8
 8001056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800105e:	4619      	mov	r1, r3
 8001060:	4826      	ldr	r0, [pc, #152]	; (80010fc <HAL_UART_MspInit+0x13c>)
 8001062:	f001 f9cb 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001066:	e040      	b.n	80010ea <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_UART_MspInit+0x140>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d13b      	bne.n	80010ea <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001076:	2300      	movs	r3, #0
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fc5a 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800108a:	f7ff fed7 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_UART_MspInit+0x138>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_UART_MspInit+0x138>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0x138>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0x138>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_UART_MspInit+0x138>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_UART_MspInit+0x138>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d6:	2307      	movs	r3, #7
 80010d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 f989 	bl	80023fc <HAL_GPIO_Init>
}
 80010ea:	bf00      	nop
 80010ec:	3790      	adds	r7, #144	; 0x90
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40008000 	.word	0x40008000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400
 8001100:	40013800 	.word	0x40013800

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3d      	ldr	r2, [pc, #244]	; (8001218 <HAL_SPI_MspInit+0x114>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d145      	bne.n	80011b2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a3c      	ldr	r2, [pc, #240]	; (800121c <HAL_SPI_MspInit+0x118>)
 800112c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_SPI_MspInit+0x118>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a30      	ldr	r2, [pc, #192]	; (800121c <HAL_SPI_MspInit+0x118>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <HAL_SPI_MspInit+0x118>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800116e:	23e0      	movs	r3, #224	; 0xe0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f001 f936 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a0:	2305      	movs	r3, #5
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	481d      	ldr	r0, [pc, #116]	; (8001220 <HAL_SPI_MspInit+0x11c>)
 80011ac:	f001 f926 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011b0:	e02d      	b.n	800120e <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_SPI_MspInit+0x120>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d128      	bne.n	800120e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6593      	str	r3, [r2, #88]	; 0x58
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_SPI_MspInit+0x118>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fe:	2305      	movs	r3, #5
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_SPI_MspInit+0x11c>)
 800120a:	f001 f8f7 	bl	80023fc <HAL_GPIO_Init>
}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40013000 	.word	0x40013000
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	40003800 	.word	0x40003800

08001228 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_PCD_MspInit+0x38>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10b      	bne.n	8001252 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_PCD_MspInit+0x3c>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_PCD_MspInit+0x3c>)
 8001240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PCD_MspInit+0x3c>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40006800 	.word	0x40006800
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8c8 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f007 fb24 	bl	8008938 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20010000 	.word	0x20010000
 800131c:	00000400 	.word	0x00000400
 8001320:	2000074c 	.word	0x2000074c
 8001324:	200008e8 	.word	0x200008e8

08001328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001350:	f7ff ffea 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f007 fae3 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137e:	f7ff f8fd 	bl	800057c <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001384:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001390:	08009588 	.word	0x08009588
  ldr r2, =_sbss
 8001394:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001398:	200008e4 	.word	0x200008e4

0800139c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>

0800139e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fff3 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f80e 	bl	80013d0 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c0:	f7ff fd42 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_InitTick+0x70>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_InitTick+0x6c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fff1 	bl	80023e2 <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d809      	bhi.n	8001420 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 ffc9 	bl	80023aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_InitTick+0x74>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e007      	b.n	8001430 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e004      	b.n	8001430 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e001      	b.n	8001430 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20000750 	.word	0x20000750

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000750 	.word	0x20000750

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3360      	adds	r3, #96	; 0x60
 800154a:	461a      	mov	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <LL_ADC_SetOffset+0x44>)
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	4313      	orrs	r3, r2
 8001568:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	03fff000 	.word	0x03fff000

08001580 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3360      	adds	r3, #96	; 0x60
 800158e:	461a      	mov	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3360      	adds	r3, #96	; 0x60
 80015bc:	461a      	mov	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3330      	adds	r3, #48	; 0x30
 80015f2:	461a      	mov	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	4413      	add	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	211f      	movs	r1, #31
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	401a      	ands	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	0e9b      	lsrs	r3, r3, #26
 800161a:	f003 011f 	and.w	r1, r3, #31
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800163a:	b480      	push	{r7}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3314      	adds	r3, #20
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	0e5b      	lsrs	r3, r3, #25
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	0d1b      	lsrs	r3, r3, #20
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2107      	movs	r1, #7
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	0d1b      	lsrs	r3, r3, #20
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	431a      	orrs	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0318 	and.w	r3, r3, #24
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016b4:	40d9      	lsrs	r1, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	400b      	ands	r3, r1
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	431a      	orrs	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	0007ffff 	.word	0x0007ffff

080016d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800170c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001710:	d101      	bne.n	8001716 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001738:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001760:	d101      	bne.n	8001766 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <LL_ADC_IsEnabled+0x18>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <LL_ADC_IsEnabled+0x1a>
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d101      	bne.n	80017b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e126      	b.n	8001a50 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fb3d 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff67 	bl	80016fc <LL_ADC_IsDeepPowerDownEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff4d 	bl	80016d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff82 	bl	800174c <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff66 	bl	8001724 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001858:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_ADC_Init+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_ADC_Init+0x274>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800186c:	e002      	b.n	8001874 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff64 	bl	800174c <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0210 	orr.w	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff75 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 80018b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80bf 	bne.w	8001a3e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80bb 	bne.w	8001a3e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff49 	bl	8001774 <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e8:	485d      	ldr	r0, [pc, #372]	; (8001a60 <HAL_ADC_Init+0x278>)
 80018ea:	f7ff ff43 	bl	8001774 <LL_ADC_IsEnabled>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4619      	mov	r1, r3
 80018fa:	485a      	ldr	r0, [pc, #360]	; (8001a64 <HAL_ADC_Init+0x27c>)
 80018fc:	f7ff fde8 	bl	80014d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e5b      	ldrb	r3, [r3, #25]
 8001904:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001910:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001916:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d106      	bne.n	800193c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	045b      	lsls	r3, r3, #17
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_ADC_Init+0x280>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	430b      	orrs	r3, r1
 800196a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff25 	bl	80017c0 <LL_ADC_INJ_IsConversionOngoing>
 8001976:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d13d      	bne.n	80019fa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d13a      	bne.n	80019fa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001988:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001990:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019a0:	f023 0302 	bic.w	r3, r3, #2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	69b9      	ldr	r1, [r7, #24]
 80019aa:	430b      	orrs	r3, r1
 80019ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d118      	bne.n	80019ea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019da:	430a      	orrs	r2, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	e007      	b.n	80019fa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10c      	bne.n	8001a1c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	f023 010f 	bic.w	r1, r3, #15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1a:	e007      	b.n	8001a2c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020f 	bic.w	r2, r2, #15
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	053e2d63 	.word	0x053e2d63
 8001a60:	50040000 	.word	0x50040000
 8001a64:	50040300 	.word	0x50040300
 8001a68:	fff0c007 	.word	0xfff0c007

08001a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0b6      	sub	sp, #216	; 0xd8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x22>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e3bb      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe7d 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 83a0 	bne.w	80021e8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d824      	bhi.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	3b02      	subs	r3, #2
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d81b      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x8e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001ae1 	.word	0x08001ae1
 8001ad0:	08001ae9 	.word	0x08001ae9
 8001ad4:	08001af1 	.word	0x08001af1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ade:	e010      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ae6:	e00c      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ae8:	2318      	movs	r3, #24
 8001aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001aee:	e008      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001af8:	e003      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001afa:	2306      	movs	r3, #6
 8001afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b10:	f7ff fd67 	bl	80015e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fe3e 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe4a 	bl	80017c0 <LL_ADC_INJ_IsConversionOngoing>
 8001b2c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81a4 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 819f 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f7ff fd72 	bl	800163a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00a      	beq.n	8001b8e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b88:	f7ff fcd6 	bl	8001538 <LL_ADC_SetOffset>
 8001b8c:	e179      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fcf3 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x14e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fce8 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x18c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fcdd 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001bec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1a4>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	e018      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1d6>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fcac 	bl	80015ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc90 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x214>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fc85 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	e01e      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x252>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc7a 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e004      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x26a>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	e018      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x29c>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e004      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fc49 	bl	80015ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc2d 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x2da>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2102      	movs	r1, #2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc22 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	e01e      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x318>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc17 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e004      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x330>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	e014      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x35a>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e004      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fbea 	bl	80015ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fbce 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x398>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2103      	movs	r1, #3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fbc3 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	e017      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x3c8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2103      	movs	r1, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fbb8 	bl	8001580 <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x3e0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	e011      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x404>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fb95 	bl	80015ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fc74 	bl	8001774 <LL_ADC_IsEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8140 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff fbf5 	bl	8001690 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4a8f      	ldr	r2, [pc, #572]	; (80020e8 <HAL_ADC_ConfigChannel+0x67c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	f040 8131 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x46e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	bf94      	ite	ls
 8001ed2:	2301      	movls	r3, #1
 8001ed4:	2300      	movhi	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e019      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x4a2>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	bf94      	ite	ls
 8001f08:	2301      	movls	r3, #1
 8001f0a:	2300      	movhi	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d079      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x4c2>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	3301      	adds	r3, #1
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2c:	e015      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x4ee>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e003      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	069b      	lsls	r3, r3, #26
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x50e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	e017      	b.n	8001faa <HAL_ADC_ConfigChannel+0x53e>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x564>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 021f 	and.w	r2, r3, #31
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	e018      	b.n	8002002 <HAL_ADC_ConfigChannel+0x596>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002002:	430b      	orrs	r3, r1
 8002004:	e081      	b.n	800210a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x5b6>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	3301      	adds	r3, #1
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002020:	e015      	b.n	800204e <HAL_ADC_ConfigChannel+0x5e2>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	069b      	lsls	r3, r3, #26
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_ConfigChannel+0x602>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	e017      	b.n	800209e <HAL_ADC_ConfigChannel+0x632>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	61bb      	str	r3, [r7, #24]
  return result;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	ea42 0103 	orr.w	r1, r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x65e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c8:	e01e      	b.n	8002108 <HAL_ADC_ConfigChannel+0x69c>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  return result;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e006      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x688>
 80020e6:	bf00      	nop
 80020e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	3b1e      	subs	r3, #30
 8002102:	051b      	lsls	r3, r3, #20
 8002104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002108:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210e:	4619      	mov	r1, r3
 8002110:	f7ff fa93 	bl	800163a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d06c      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002120:	483c      	ldr	r0, [pc, #240]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 8002122:	f7ff f9fb 	bl	800151c <LL_ADC_GetCommonPathInternalCh>
 8002126:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_ADC_ConfigChannel+0x7ac>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d127      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d121      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d157      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002152:	4619      	mov	r1, r3
 8002154:	482f      	ldr	r0, [pc, #188]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 8002156:	f7ff f9ce 	bl	80014f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002174:	e002      	b.n	800217c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002182:	e03a      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_ADC_ConfigChannel+0x7bc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d113      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800218e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ac:	4619      	mov	r1, r3
 80021ae:	4819      	ldr	r0, [pc, #100]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 80021b0:	f7ff f9a1 	bl	80014f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021b4:	e021      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x7c0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d11c      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 80021e2:	f7ff f988 	bl	80014f6 <LL_ADC_SetCommonPathInternalCh>
 80021e6:	e008      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002202:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002206:	4618      	mov	r0, r3
 8002208:	37d8      	adds	r7, #216	; 0xd8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	80080000 	.word	0x80080000
 8002214:	50040300 	.word	0x50040300
 8002218:	c7520000 	.word	0xc7520000
 800221c:	50040000 	.word	0x50040000
 8002220:	20000000 	.word	0x20000000
 8002224:	053e2d63 	.word	0x053e2d63
 8002228:	cb840000 	.word	0xcb840000
 800222c:	80000001 	.word	0x80000001

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff47 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff5c 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff8e 	bl	80022e8 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffb0 	bl	8002350 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	e154      	b.n	80026b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8146 	beq.w	80026b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d005      	beq.n	800243c <HAL_GPIO_Init+0x40>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d130      	bne.n	800249e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002472:	2201      	movs	r2, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d017      	beq.n	80024da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a0 	beq.w	80026b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002570:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6613      	str	r3, [r2, #96]	; 0x60
 800257c:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 800257e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002588:	4a53      	ldr	r2, [pc, #332]	; (80026d8 <HAL_GPIO_Init+0x2dc>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b2:	d019      	beq.n	80025e8 <HAL_GPIO_Init+0x1ec>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a49      	ldr	r2, [pc, #292]	; (80026dc <HAL_GPIO_Init+0x2e0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_GPIO_Init+0x1e8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a48      	ldr	r2, [pc, #288]	; (80026e0 <HAL_GPIO_Init+0x2e4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_GPIO_Init+0x1e4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a47      	ldr	r2, [pc, #284]	; (80026e4 <HAL_GPIO_Init+0x2e8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a46      	ldr	r2, [pc, #280]	; (80026e8 <HAL_GPIO_Init+0x2ec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_GPIO_Init+0x1dc>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e008      	b.n	80025ea <HAL_GPIO_Init+0x1ee>
 80025d8:	2307      	movs	r3, #7
 80025da:	e006      	b.n	80025ea <HAL_GPIO_Init+0x1ee>
 80025dc:	2303      	movs	r3, #3
 80025de:	e004      	b.n	80025ea <HAL_GPIO_Init+0x1ee>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x1ee>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_GPIO_Init+0x1ee>
 80025e8:	2300      	movs	r3, #0
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	f002 0203 	and.w	r2, r2, #3
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	4093      	lsls	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025fa:	4937      	ldr	r1, [pc, #220]	; (80026d8 <HAL_GPIO_Init+0x2dc>)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800262c:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002632:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002656:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f47f aea3 	bne.w	800240c <HAL_GPIO_Init+0x10>
  }
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010000 	.word	0x40010000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	48000800 	.word	0x48000800
 80026e4:	48000c00 	.word	0x48000c00
 80026e8:	48001000 	.word	0x48001000
 80026ec:	40010400 	.word	0x40010400

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270c:	e002      	b.n	8002714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e08d      	b.n	800284e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fbe0 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e006      	b.n	80027a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d108      	bne.n	80027c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	e007      	b.n	80027d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b20      	cmp	r3, #32
 800286a:	d138      	bne.n	80028de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002876:	2302      	movs	r3, #2
 8002878:	e032      	b.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2224      	movs	r2, #36	; 0x24
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d139      	bne.n	8002976 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800290c:	2302      	movs	r3, #2
 800290e:	e033      	b.n	8002978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800293e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af06      	add	r7, sp, #24
 800298a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0f8      	b.n	8002b88 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fc3c 	bl	8001228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fdfd 	bl	80055bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	687e      	ldr	r6, [r7, #4]
 80029ca:	466d      	mov	r5, sp
 80029cc:	f106 0410 	add.w	r4, r6, #16
 80029d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	1d33      	adds	r3, r6, #4
 80029da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029dc:	6838      	ldr	r0, [r7, #0]
 80029de:	f002 fddc 	bl	800559a <USB_CoreInit>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0c9      	b.n	8002b88 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fdf9 	bl	80055f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e040      	b.n	8002a88 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3301      	adds	r3, #1
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	3303      	adds	r3, #3
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	3338      	adds	r3, #56	; 0x38
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	333c      	adds	r3, #60	; 0x3c
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3340      	adds	r3, #64	; 0x40
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	3301      	adds	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b9      	bcc.n	8002a06 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	e044      	b.n	8002b22 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3b5      	bcc.n	8002a98 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	687e      	ldr	r6, [r7, #4]
 8002b34:	466d      	mov	r5, sp
 8002b36:	f106 0410 	add.w	r4, r6, #16
 8002b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	1d33      	adds	r3, r6, #4
 8002b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	f002 fd60 	bl	800560c <USB_DevInit>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e014      	b.n	8002b88 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f80a 	bl	8002b90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fd64 	bl	800564e <USB_DevDisconnect>

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40007000 	.word	0x40007000

08002c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2e:	d130      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3c:	d038      	beq.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2232      	movs	r2, #50	; 0x32
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9b      	lsrs	r3, r3, #18
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c64:	e002      	b.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c78:	d102      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f2      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8c:	d110      	bne.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e00f      	b.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9e:	d007      	beq.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca8:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f000 bc02 	b.w	80034e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cea:	4b94      	ldr	r3, [pc, #592]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80e4 	beq.w	8002eca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4c>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	f040 808b 	bne.w	8002e26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	f040 8087 	bne.w	8002e26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x64>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e3d9      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_RCC_OscConfig+0x7e>
 8002d40:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	e005      	b.n	8002d56 <HAL_RCC_OscConfig+0x8a>
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d223      	bcs.n	8002da2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fd8a 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3ba      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6e:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a72      	ldr	r2, [pc, #456]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	496d      	ldr	r1, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	4b6b      	ldr	r3, [pc, #428]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	4968      	ldr	r1, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	e025      	b.n	8002dee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4960      	ldr	r1, [pc, #384]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc0:	4b5e      	ldr	r3, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	495b      	ldr	r1, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fd4a 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e37a      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dee:	f000 fc81 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	4950      	ldr	r1, [pc, #320]	; (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_RCC_OscConfig+0x278>)
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCC_OscConfig+0x27c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fadc 	bl	80013d0 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d052      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	e35e      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d032      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e2e:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fb19 	bl	8001470 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e42:	f7fe fb15 	bl	8001470 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e347      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e54:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a35      	ldr	r2, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4930      	ldr	r1, [pc, #192]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	492b      	ldr	r1, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 8002e92:	e01a      	b.n	8002eca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fae6 	bl	8001470 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fae2 	bl	8001470 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e314      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1dc>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d073      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x21c>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d10e      	bne.n	8002f00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d063      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d15f      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e2f1      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_OscConfig+0x24c>
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e025      	b.n	8002f64 <HAL_RCC_OscConfig+0x298>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f20:	d114      	bne.n	8002f4c <HAL_RCC_OscConfig+0x280>
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e013      	b.n	8002f64 <HAL_RCC_OscConfig+0x298>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	0800947c 	.word	0x0800947c
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9c      	ldr	r2, [pc, #624]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fa80 	bl	8001470 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fa7c 	bl	8001470 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e2ae      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2a8>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fa6c 	bl	8001470 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fa68 	bl	8001470 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e29a      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2d0>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d060      	beq.n	800308c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x310>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d116      	bne.n	800300a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x328>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e277      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4973      	ldr	r1, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	e040      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d023      	beq.n	800305a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003012:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fa27 	bl	8001470 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe fa23 	bl	8001470 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e255      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	495f      	ldr	r1, [pc, #380]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	e018      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe fa03 	bl	8001470 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f9ff 	bl	8001470 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e231      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03c      	beq.n	8003112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe f9de 	bl	8001470 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe f9da 	bl	8001470 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e20c      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCC_OscConfig+0x3ec>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	4a3b      	ldr	r2, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe f9c1 	bl	8001470 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe f9bd 	bl	8001470 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1ef      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ef      	bne.n	80030f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a6 	beq.w	800326c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10d      	bne.n	800314c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_OscConfig+0x508>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d118      	bne.n	800318a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_OscConfig+0x508>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0x508>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe f984 	bl	8001470 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe f980 	bl	8001470 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1b2      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x508>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d108      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d8>
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a2:	e029      	b.n	80031f8 <HAL_RCC_OscConfig+0x52c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d115      	bne.n	80031d8 <HAL_RCC_OscConfig+0x50c>
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a03      	ldr	r2, [pc, #12]	; (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031cc:	e014      	b.n	80031f8 <HAL_RCC_OscConfig+0x52c>
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	4b9a      	ldr	r3, [pc, #616]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a99      	ldr	r2, [pc, #612]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e8:	4b96      	ldr	r3, [pc, #600]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a95      	ldr	r2, [pc, #596]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe f936 	bl	8001470 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe f932 	bl	8001470 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e162      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b89      	ldr	r3, [pc, #548]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ed      	beq.n	8003208 <HAL_RCC_OscConfig+0x53c>
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe f91f 	bl	8001470 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe f91b 	bl	8001470 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e14b      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	4b7d      	ldr	r3, [pc, #500]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ed      	bne.n	8003236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325a:	7ffb      	ldrb	r3, [r7, #31]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b78      	ldr	r3, [pc, #480]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a77      	ldr	r2, [pc, #476]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003280:	4b70      	ldr	r3, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003286:	4a6f      	ldr	r2, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe f8ee 	bl	8001470 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003298:	f7fe f8ea 	bl	8001470 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e11c      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032aa:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCC_OscConfig+0x5cc>
 80032b8:	e01b      	b.n	80032f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c0:	4a60      	ldr	r2, [pc, #384]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe f8d1 	bl	8001470 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d2:	f7fe f8cd 	bl	8001470 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0ff      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e4:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80f3 	beq.w	80034e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 80c9 	bne.w	8003498 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003306:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	429a      	cmp	r2, r3
 8003318:	d12c      	bne.n	8003374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	3b01      	subs	r3, #1
 8003326:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d123      	bne.n	8003374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d11b      	bne.n	8003374 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d113      	bne.n	8003374 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	3b01      	subs	r3, #1
 800335a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d109      	bne.n	8003374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d06b      	beq.n	800344c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d062      	beq.n	8003440 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800337a:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0ac      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003394:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003396:	f7fe f86b 	bl	8001470 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe f867 	bl	8001470 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e099      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x77c>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033cc:	3a01      	subs	r2, #1
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d6:	0212      	lsls	r2, r2, #8
 80033d8:	4311      	orrs	r1, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0552      	lsls	r2, r2, #21
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ea:	0852      	lsrs	r2, r2, #1
 80033ec:	3a01      	subs	r2, #1
 80033ee:	0652      	lsls	r2, r2, #25
 80033f0:	4311      	orrs	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f6:	06d2      	lsls	r2, r2, #27
 80033f8:	430a      	orrs	r2, r1
 80033fa:	4912      	ldr	r1, [pc, #72]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003416:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003418:	f7fe f82a 	bl	8001470 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe f826 	bl	8001470 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e058      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_OscConfig+0x778>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800343e:	e050      	b.n	80034e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04f      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
 8003444:	40021000 	.word	0x40021000
 8003448:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d144      	bne.n	80034e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a20      	ldr	r2, [pc, #128]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003470:	f7fd fffe 	bl	8001470 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fd fffa 	bl	8001470 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e02c      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x7ac>
 8003496:	e024      	b.n	80034e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d01f      	beq.n	80034de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 80034a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd ffe1 	bl	8001470 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd ffdd 	bl	8001470 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4905      	ldr	r1, [pc, #20]	; (80034ec <HAL_RCC_OscConfig+0x820>)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x824>)
 80034d8:	4013      	ands	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
 80034dc:	e001      	b.n	80034e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	feeefffc 	.word	0xfeeefffc

080034f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0e7      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b72      	ldr	r3, [pc, #456]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4970      	ldr	r1, [pc, #448]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0cf      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	429a      	cmp	r2, r3
 8003552:	d908      	bls.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4960      	ldr	r1, [pc, #384]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04c      	beq.n	800360c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d121      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0a6      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e09a      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08e      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e086      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4943      	ldr	r1, [pc, #268]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd ff48 	bl	8001470 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd ff44 	bl	8001470 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e06e      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003624:	429a      	cmp	r2, r3
 8003626:	d208      	bcs.n	800363a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	492b      	ldr	r1, [pc, #172]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d210      	bcs.n	800366a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	4923      	ldr	r1, [pc, #140]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e036      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4918      	ldr	r1, [pc, #96]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4910      	ldr	r1, [pc, #64]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036a8:	f000 f824 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	490b      	ldr	r1, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1f4>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1f8>)
 80036c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1fc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fe7f 	bl	80013d0 <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40022000 	.word	0x40022000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	0800947c 	.word	0x0800947c
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x34>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d121      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d11e      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003750:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003764:	e00a      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d102      	bne.n	8003772 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	e004      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d101      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 800377a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d134      	bne.n	80037ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0xa6>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d003      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003798:	e005      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800379a:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 800379c:	617b      	str	r3, [r7, #20]
      break;
 800379e:	e005      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037a0:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 80037a2:	617b      	str	r3, [r7, #20]
      break;
 80037a4:	e002      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	617b      	str	r3, [r7, #20]
      break;
 80037aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	fb03 f202 	mul.w	r2, r3, r2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	0e5b      	lsrs	r3, r3, #25
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	3301      	adds	r3, #1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037ec:	69bb      	ldr	r3, [r7, #24]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	08009494 	.word	0x08009494
 8003804:	00f42400 	.word	0x00f42400

08003808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000000 	.word	0x20000000

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003824:	f7ff fff0 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	0800948c 	.word	0x0800948c

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003850:	f7ff ffda 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0adb      	lsrs	r3, r3, #11
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	0800948c 	.word	0x0800948c

08003878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003890:	f7ff f9b8 	bl	8002c04 <HAL_PWREx_GetVoltageRange>
 8003894:	6178      	str	r0, [r7, #20]
 8003896:	e014      	b.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	; 0x58
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038b0:	f7ff f9a8 	bl	8002c04 <HAL_PWREx_GetVoltageRange>
 80038b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d10b      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d919      	bls.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2ba0      	cmp	r3, #160	; 0xa0
 80038d4:	d902      	bls.n	80038dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d6:	2302      	movs	r3, #2
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e013      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e010      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d902      	bls.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038e8:	2303      	movs	r3, #3
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e00a      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b80      	cmp	r3, #128	; 0x80
 80038f2:	d102      	bne.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038f4:	2302      	movs	r3, #2
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e004      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d101      	bne.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003900:	2301      	movs	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	4909      	ldr	r1, [pc, #36]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40022000 	.word	0x40022000

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003940:	2300      	movs	r3, #0
 8003942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003944:	2300      	movs	r3, #0
 8003946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d031      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800395c:	d01a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800395e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003962:	d814      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800396c:	d10f      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800396e:	4b5d      	ldr	r3, [pc, #372]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fa32 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	74fb      	strb	r3, [r7, #19]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399c:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	494e      	ldr	r1, [pc, #312]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039b2:	e001      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 809e 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ca:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a3f      	ldr	r2, [pc, #252]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
 80039ec:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a39      	ldr	r2, [pc, #228]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a08:	f7fd fd32 	bl	8001470 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a0e:	e009      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd fd2e 	bl	8001470 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	74fb      	strb	r3, [r7, #19]
        break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ef      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d15a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d019      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a7e:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd fcee 	bl	8001470 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd fcea 	bl	8001470 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d902      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	74fb      	strb	r3, [r7, #19]
            break;
 8003aae:	e006      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ec      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	4904      	ldr	r1, [pc, #16]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ada:	e009      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af0:	7c7b      	ldrb	r3, [r7, #17]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b8d      	ldr	r3, [pc, #564]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	4a8c      	ldr	r2, [pc, #560]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b0e:	4b87      	ldr	r3, [pc, #540]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f023 0203 	bic.w	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4983      	ldr	r1, [pc, #524]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b30:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 020c 	bic.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	497b      	ldr	r1, [pc, #492]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	4972      	ldr	r1, [pc, #456]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b74:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	496a      	ldr	r1, [pc, #424]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	4961      	ldr	r1, [pc, #388]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bb8:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4959      	ldr	r1, [pc, #356]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bda:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4950      	ldr	r1, [pc, #320]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	4948      	ldr	r1, [pc, #288]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1e:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	493f      	ldr	r1, [pc, #252]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d028      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6a:	60d3      	str	r3, [r2, #12]
 8003c6c:	e011      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c76:	d10c      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f8b4 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	491f      	ldr	r1, [pc, #124]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc8:	60d3      	str	r3, [r2, #12]
 8003cca:	e011      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f885 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02b      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a02      	ldr	r2, [pc, #8]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
 8003d28:	e014      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f853 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f830 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	4b74      	ldr	r3, [pc, #464]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e06:	4b71      	ldr	r3, [pc, #452]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e1e:	4b6b      	ldr	r3, [pc, #428]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d047      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e044      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d018      	beq.n	8003e72 <RCCEx_PLLSAI1_Config+0x86>
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d825      	bhi.n	8003e90 <RCCEx_PLLSAI1_Config+0xa4>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x62>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d009      	beq.n	8003e60 <RCCEx_PLLSAI1_Config+0x74>
 8003e4c:	e020      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e01a      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e60:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e013      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e8e:	e006      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e004      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ea6:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	4943      	ldr	r1, [pc, #268]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d17c      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ec8:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd facc 	bl	8001470 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eda:	e009      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003edc:	f7fd fac8 	bl	8001470 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
        break;
 8003eee:	e005      	b.n	8003efc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ef      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d15f      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	06d2      	lsls	r2, r2, #27
 8003f20:	430a      	orrs	r2, r1
 8003f22:	492a      	ldr	r1, [pc, #168]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
 8003f28:	e027      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d112      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6912      	ldr	r2, [r2, #16]
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0552      	lsls	r2, r2, #21
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	491f      	ldr	r1, [pc, #124]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]
 8003f54:	e011      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6892      	ldr	r2, [r2, #8]
 8003f66:	0211      	lsls	r1, r2, #8
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6952      	ldr	r2, [r2, #20]
 8003f6c:	0852      	lsrs	r2, r2, #1
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0652      	lsls	r2, r2, #25
 8003f72:	430a      	orrs	r2, r1
 8003f74:	4915      	ldr	r1, [pc, #84]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd fa73 	bl	8001470 <HAL_GetTick>
 8003f8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f8c:	e009      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f8e:	f7fd fa6f 	bl	8001470 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d902      	bls.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	73fb      	strb	r3, [r7, #15]
          break;
 8003fa0:	e005      	b.n	8003fae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ef      	beq.n	8003f8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e095      	b.n	800410e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff2:	d009      	beq.n	8004008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
 8003ffa:	e005      	b.n	8004008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd f86e 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004048:	d902      	bls.n	8004050 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e002      	b.n	8004056 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800405e:	d007      	beq.n	8004070 <HAL_SPI_Init+0xa0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004068:	d002      	beq.n	8004070 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	ea42 0103 	orr.w	r1, r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 0204 	and.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040ec:	ea42 0103 	orr.w	r1, r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b088      	sub	sp, #32
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_SPI_Transmit+0x22>
 8004134:	2302      	movs	r3, #2
 8004136:	e15f      	b.n	80043f8 <HAL_SPI_Transmit+0x2e2>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004140:	f7fd f996 	bl	8001470 <HAL_GetTick>
 8004144:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d002      	beq.n	800415c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
    goto error;
 800415a:	e148      	b.n	80043ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Transmit+0x52>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800416c:	e13f      	b.n	80043ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2203      	movs	r2, #3
 8004172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b8:	d10f      	bne.n	80041da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d007      	beq.n	80041f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004200:	d94f      	bls.n	80042a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_SPI_Transmit+0xfa>
 800420a:	8afb      	ldrh	r3, [r7, #22]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d142      	bne.n	8004296 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004234:	e02f      	b.n	8004296 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b02      	cmp	r3, #2
 8004242:	d112      	bne.n	800426a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004268:	e015      	b.n	8004296 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800426a:	f7fd f901 	bl	8001470 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d803      	bhi.n	8004282 <HAL_SPI_Transmit+0x16c>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d102      	bne.n	8004288 <HAL_SPI_Transmit+0x172>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004294:	e0ab      	b.n	80043ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ca      	bne.n	8004236 <HAL_SPI_Transmit+0x120>
 80042a0:	e080      	b.n	80043a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Transmit+0x19a>
 80042aa:	8afb      	ldrh	r3, [r7, #22]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d174      	bne.n	800439a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d912      	bls.n	80042e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	1c9a      	adds	r2, r3, #2
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b02      	subs	r3, #2
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042de:	e05c      	b.n	800439a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004306:	e048      	b.n	800439a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b02      	cmp	r3, #2
 8004314:	d12b      	bne.n	800436e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d912      	bls.n	8004346 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b02      	subs	r3, #2
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004344:	e029      	b.n	800439a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800436c:	e015      	b.n	800439a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436e:	f7fd f87f 	bl	8001470 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d803      	bhi.n	8004386 <HAL_SPI_Transmit+0x270>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d102      	bne.n	800438c <HAL_SPI_Transmit+0x276>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004398:	e029      	b.n	80043ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1b1      	bne.n	8004308 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fb69 	bl	8004a80 <SPI_EndRxTxTransaction>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e003      	b.n	80043ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x26>
 8004422:	2302      	movs	r3, #2
 8004424:	e20a      	b.n	800483c <HAL_SPI_TransmitReceive+0x43c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442e:	f7fd f81f 	bl	8001470 <HAL_GetTick>
 8004432:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800443a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800444a:	7efb      	ldrb	r3, [r7, #27]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d00e      	beq.n	800446e <HAL_SPI_TransmitReceive+0x6e>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004456:	d106      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x66>
 8004460:	7efb      	ldrb	r3, [r7, #27]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d003      	beq.n	800446e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004466:	2302      	movs	r3, #2
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800446c:	e1e0      	b.n	8004830 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x80>
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004486:	e1d3      	b.n	8004830 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b04      	cmp	r3, #4
 8004492:	d003      	beq.n	800449c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2205      	movs	r2, #5
 8004498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044de:	d802      	bhi.n	80044e6 <HAL_SPI_TransmitReceive+0xe6>
 80044e0:	8a3b      	ldrh	r3, [r7, #16]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d908      	bls.n	80044f8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	e007      	b.n	8004508 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d007      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800452e:	f240 8081 	bls.w	8004634 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x140>
 800453a:	8a7b      	ldrh	r3, [r7, #18]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d16d      	bne.n	800461c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004564:	e05a      	b.n	800461c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d11b      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1ac>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1ac>
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	2b01      	cmp	r3, #1
 8004582:	d113      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11c      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x1f4>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	b292      	uxth	r2, r2
 80045d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f0:	2301      	movs	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045f4:	f7fc ff3c 	bl	8001470 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	429a      	cmp	r2, r3
 8004602:	d80b      	bhi.n	800461c <HAL_SPI_TransmitReceive+0x21c>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d007      	beq.n	800461c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800461a:	e109      	b.n	8004830 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d19f      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x166>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d199      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x166>
 8004632:	e0e3      	b.n	80047fc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x244>
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 80cf 	bne.w	80047e2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d912      	bls.n	8004674 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b02      	subs	r3, #2
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004672:	e0b6      	b.n	80047e2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469a:	e0a2      	b.n	80047e2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d134      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x314>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02f      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x314>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d12c      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d912      	bls.n	80046ea <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b02      	subs	r3, #2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e8:	e012      	b.n	8004710 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d148      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x3b4>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d042      	beq.n	80047b4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d923      	bls.n	8004782 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	b292      	uxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b02      	subs	r3, #2
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d81f      	bhi.n	80047b0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e016      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f103 020c 	add.w	r2, r3, #12
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047b0:	2301      	movs	r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047b4:	f7fc fe5c 	bl	8001470 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d803      	bhi.n	80047cc <HAL_SPI_TransmitReceive+0x3cc>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x3d2>
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80047e0:	e026      	b.n	8004830 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f af57 	bne.w	800469c <HAL_SPI_TransmitReceive+0x29c>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f47f af50 	bne.w	800469c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f93d 	bl	8004a80 <SPI_EndRxTxTransaction>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004826:	e003      	b.n	8004830 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004854:	f7fc fe0c 	bl	8001470 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4413      	add	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004864:	f7fc fe04 	bl	8001470 <HAL_GetTick>
 8004868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	0d1b      	lsrs	r3, r3, #20
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800487a:	e054      	b.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d050      	beq.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004884:	f7fc fdf4 	bl	8001470 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d13d      	bne.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d111      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d004      	beq.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d107      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d10f      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e017      	b.n	8004946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3b01      	subs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d19b      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000000 	.word	0x20000000

08004954 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004966:	f7fc fd83 	bl	8001470 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	4413      	add	r3, r2
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004976:	f7fc fd7b 	bl	8001470 <HAL_GetTick>
 800497a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004984:	4b3d      	ldr	r3, [pc, #244]	; (8004a7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00da      	lsls	r2, r3, #3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	0d1b      	lsrs	r3, r3, #20
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800499c:	e060      	b.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049a4:	d107      	bne.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d050      	beq.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049be:	f7fc fd57 	bl	8001470 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d902      	bls.n	80049d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d13d      	bne.n	8004a50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ec:	d111      	bne.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	d004      	beq.n	8004a02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d107      	bne.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1a:	d10f      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e010      	b.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d196      	bne.n	800499e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000

08004a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff ff5b 	bl	8004954 <SPI_WaitFifoStateUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e027      	b.n	8004b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fec0 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e014      	b.n	8004b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ff34 	bl	8004954 <SPI_WaitFifoStateUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e000      	b.n	8004b04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e040      	b.n	8004ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fa46 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb0c 	bl	8005170 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8af 	bl	8004cbc <UART_SetConfig>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e01b      	b.n	8004ba0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fb8b 	bl	80052b4 <UART_CheckIdleState>
 8004b9e:	4603      	mov	r3, r0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d178      	bne.n	8004cb2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit+0x24>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e071      	b.n	8004cb4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2221      	movs	r2, #33	; 0x21
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bde:	f7fc fc47 	bl	8001470 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d108      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e003      	b.n	8004c18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c18:	e030      	b.n	8004c7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fbed 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e03c      	b.n	8004cb4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	3302      	adds	r3, #2
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e008      	b.n	8004c6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b292      	uxth	r2, r2
 8004c62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1c8      	bne.n	8004c1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fbb6 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e005      	b.n	8004cb4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b08a      	sub	sp, #40	; 0x28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b9e      	ldr	r3, [pc, #632]	; (8004f64 <UART_SetConfig+0x2a8>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a93      	ldr	r2, [pc, #588]	; (8004f68 <UART_SetConfig+0x2ac>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	4313      	orrs	r3, r2
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a8a      	ldr	r2, [pc, #552]	; (8004f6c <UART_SetConfig+0x2b0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d126      	bne.n	8004d94 <UART_SetConfig+0xd8>
 8004d46:	4b8a      	ldr	r3, [pc, #552]	; (8004f70 <UART_SetConfig+0x2b4>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d81b      	bhi.n	8004d8c <UART_SetConfig+0xd0>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0xa0>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d6d 	.word	0x08004d6d
 8004d60:	08004d7d 	.word	0x08004d7d
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e0ab      	b.n	8004ecc <UART_SetConfig+0x210>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e0a7      	b.n	8004ecc <UART_SetConfig+0x210>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e0a3      	b.n	8004ecc <UART_SetConfig+0x210>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e09f      	b.n	8004ecc <UART_SetConfig+0x210>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e09b      	b.n	8004ecc <UART_SetConfig+0x210>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a76      	ldr	r2, [pc, #472]	; (8004f74 <UART_SetConfig+0x2b8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d138      	bne.n	8004e10 <UART_SetConfig+0x154>
 8004d9e:	4b74      	ldr	r3, [pc, #464]	; (8004f70 <UART_SetConfig+0x2b4>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d82d      	bhi.n	8004e08 <UART_SetConfig+0x14c>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0xf8>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004e09 	.word	0x08004e09
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004e09 	.word	0x08004e09
 8004dd0:	08004e09 	.word	0x08004e09
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e06d      	b.n	8004ecc <UART_SetConfig+0x210>
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e069      	b.n	8004ecc <UART_SetConfig+0x210>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e065      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e00:	2308      	movs	r3, #8
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e061      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e05d      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <UART_SetConfig+0x2bc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d125      	bne.n	8004e66 <UART_SetConfig+0x1aa>
 8004e1a:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <UART_SetConfig+0x2b4>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d016      	beq.n	8004e56 <UART_SetConfig+0x19a>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d818      	bhi.n	8004e5e <UART_SetConfig+0x1a2>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d00a      	beq.n	8004e46 <UART_SetConfig+0x18a>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d814      	bhi.n	8004e5e <UART_SetConfig+0x1a2>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <UART_SetConfig+0x182>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d008      	beq.n	8004e4e <UART_SetConfig+0x192>
 8004e3c:	e00f      	b.n	8004e5e <UART_SetConfig+0x1a2>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e44:	e042      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e46:	2302      	movs	r3, #2
 8004e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4c:	e03e      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e54:	e03a      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e56:	2308      	movs	r3, #8
 8004e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5c:	e036      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e64:	e032      	b.n	8004ecc <UART_SetConfig+0x210>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <UART_SetConfig+0x2ac>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d12a      	bne.n	8004ec6 <UART_SetConfig+0x20a>
 8004e70:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <UART_SetConfig+0x2b4>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7e:	d01a      	beq.n	8004eb6 <UART_SetConfig+0x1fa>
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e84:	d81b      	bhi.n	8004ebe <UART_SetConfig+0x202>
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d00c      	beq.n	8004ea6 <UART_SetConfig+0x1ea>
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e90:	d815      	bhi.n	8004ebe <UART_SetConfig+0x202>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <UART_SetConfig+0x1e2>
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d008      	beq.n	8004eae <UART_SetConfig+0x1f2>
 8004e9c:	e00f      	b.n	8004ebe <UART_SetConfig+0x202>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e012      	b.n	8004ecc <UART_SetConfig+0x210>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e00e      	b.n	8004ecc <UART_SetConfig+0x210>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	e00a      	b.n	8004ecc <UART_SetConfig+0x210>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebc:	e006      	b.n	8004ecc <UART_SetConfig+0x210>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec4:	e002      	b.n	8004ecc <UART_SetConfig+0x210>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <UART_SetConfig+0x2ac>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f040 808a 	bne.w	8004fec <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d824      	bhi.n	8004f2a <UART_SetConfig+0x26e>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x22c>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f2b 	.word	0x08004f2b
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f2b 	.word	0x08004f2b
 8004ef8:	08004f1b 	.word	0x08004f1b
 8004efc:	08004f2b 	.word	0x08004f2b
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f2b 	.word	0x08004f2b
 8004f08:	08004f23 	.word	0x08004f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7fe fc88 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004f10:	61f8      	str	r0, [r7, #28]
        break;
 8004f12:	e010      	b.n	8004f36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <UART_SetConfig+0x2c0>)
 8004f16:	61fb      	str	r3, [r7, #28]
        break;
 8004f18:	e00d      	b.n	8004f36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fe fbeb 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8004f1e:	61f8      	str	r0, [r7, #28]
        break;
 8004f20:	e009      	b.n	8004f36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	61fb      	str	r3, [r7, #28]
        break;
 8004f28:	e005      	b.n	8004f36 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8109 	beq.w	8005150 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d305      	bcc.n	8004f5a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d912      	bls.n	8004f80 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f60:	e0f6      	b.n	8005150 <UART_SetConfig+0x494>
 8004f62:	bf00      	nop
 8004f64:	efff69f3 	.word	0xefff69f3
 8004f68:	40008000 	.word	0x40008000
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40004800 	.word	0x40004800
 8004f7c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	461c      	mov	r4, r3
 8004f86:	4615      	mov	r5, r2
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	022b      	lsls	r3, r5, #8
 8004f92:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f96:	0222      	lsls	r2, r4, #8
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	6849      	ldr	r1, [r1, #4]
 8004f9c:	0849      	lsrs	r1, r1, #1
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	4688      	mov	r8, r1
 8004fa2:	4681      	mov	r9, r0
 8004fa4:	eb12 0a08 	adds.w	sl, r2, r8
 8004fa8:	eb43 0b09 	adc.w	fp, r3, r9
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	f7fb f95f 	bl	8000280 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd0:	d308      	bcc.n	8004fe4 <UART_SetConfig+0x328>
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd8:	d204      	bcs.n	8004fe4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	e0b5      	b.n	8005150 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fea:	e0b1      	b.n	8005150 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	d15d      	bne.n	80050b2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d827      	bhi.n	800504e <UART_SetConfig+0x392>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x348>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	0800504f 	.word	0x0800504f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800504f 	.word	0x0800504f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe fbfa 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e014      	b.n	800505a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7fe fc0c 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <UART_SetConfig+0x4b0>)
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e00d      	b.n	800505a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe fb59 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8005042:	61f8      	str	r0, [r7, #28]
        break;
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d077      	beq.n	8005150 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005a      	lsls	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b0f      	cmp	r3, #15
 800507a:	d916      	bls.n	80050aa <UART_SetConfig+0x3ee>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005082:	d212      	bcs.n	80050aa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f023 030f 	bic.w	r3, r3, #15
 800508c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	b29a      	uxth	r2, r3
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	4313      	orrs	r3, r2
 800509e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	8afa      	ldrh	r2, [r7, #22]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e052      	b.n	8005150 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b0:	e04e      	b.n	8005150 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d827      	bhi.n	800510a <UART_SetConfig+0x44e>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x404>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fb9c 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fbae 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <UART_SetConfig+0x4b0>)
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fafb 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80050fe:	61f8      	str	r0, [r7, #28]
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005114:	bf00      	nop
    }

    if (pclk != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d019      	beq.n	8005150 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	085a      	lsrs	r2, r3, #1
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d909      	bls.n	800514a <UART_SetConfig+0x48e>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d205      	bcs.n	800514a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e002      	b.n	8005150 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800515c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005160:	4618      	mov	r0, r3
 8005162:	3728      	adds	r7, #40	; 0x28
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516a:	bf00      	nop
 800516c:	00f42400 	.word	0x00f42400

08005170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d10a      	bne.n	8005286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b098      	sub	sp, #96	; 0x60
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c4:	f7fc f8d4 	bl	8001470 <HAL_GetTick>
 80052c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d12e      	bne.n	8005336 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f88c 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d021      	beq.n	8005336 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	653b      	str	r3, [r7, #80]	; 0x50
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
 8005312:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e062      	b.n	80053fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d149      	bne.n	80053d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534c:	2200      	movs	r2, #0
 800534e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f856 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03c      	beq.n	80053d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	623b      	str	r3, [r7, #32]
   return(result);
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e011      	b.n	80053fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3758      	adds	r7, #88	; 0x58
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005414:	e049      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d045      	beq.n	80054aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541e:	f7fc f827 	bl	8001470 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <UART_WaitOnFlagUntilTimeout+0x30>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e048      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d031      	beq.n	80054aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d110      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2208      	movs	r2, #8
 800545a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f838 	bl	80054d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2208      	movs	r2, #8
 8005466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e029      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	d111      	bne.n	80054aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f81e 	bl	80054d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e00f      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d0a6      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b095      	sub	sp, #84	; 0x54
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	643b      	str	r3, [r7, #64]	; 0x40
 80054fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	61fb      	str	r3, [r7, #28]
   return(result);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800552c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	2b01      	cmp	r3, #1
 8005546:	d118      	bne.n	800557a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	60bb      	str	r3, [r7, #8]
   return(result);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0310 	bic.w	r3, r3, #16
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	613b      	str	r3, [r7, #16]
   return(result);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800558e:	bf00      	nop
 8005590:	3754      	adds	r7, #84	; 0x54
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800559a:	b084      	sub	sp, #16
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	f107 0014 	add.w	r0, r7, #20
 80055a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	b004      	add	sp, #16
 80055ba:	4770      	bx	lr

080055bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4013      	ands	r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800560c:	b084      	sub	sp, #16
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	f107 0014 	add.w	r0, r7, #20
 800561a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	b004      	add	sp, #16
 800564c:	4770      	bx	lr

0800564e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800565c:	b29b      	uxth	r3, r3
 800565e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800567c:	4904      	ldr	r1, [pc, #16]	; (8005690 <MX_FATFS_Init+0x18>)
 800567e:	4805      	ldr	r0, [pc, #20]	; (8005694 <MX_FATFS_Init+0x1c>)
 8005680:	f002 fc44 	bl	8007f0c <FATFS_LinkDriver>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <MX_FATFS_Init+0x20>)
 800568a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800568c:	bf00      	nop
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000758 	.word	0x20000758
 8005694:	2000000c 	.word	0x2000000c
 8005698:	20000754 	.word	0x20000754

0800569c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80056a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); // for SPI SD card
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f002 fdc1 	bl	8008240 <USER_SPI_initialize>
 80056be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); // for SPI SD card
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 fe9f 	bl	8008418 <USER_SPI_status>
 80056da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); // for SPI SD card
 80056f4:	7bf8      	ldrb	r0, [r7, #15]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f002 fea2 	bl	8008444 <USER_SPI_read>
 8005700:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); // for SPI SD card
 800571a:	7bf8      	ldrb	r0, [r7, #15]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	f002 fef5 	bl	8008510 <USER_SPI_write>
 8005726:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	603a      	str	r2, [r7, #0]
 800573a:	71fb      	strb	r3, [r7, #7]
 800573c:	460b      	mov	r3, r1
 800573e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); // for SPI SD card
 8005740:	79b9      	ldrb	r1, [r7, #6]
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f002 ff5e 	bl	8008608 <USER_SPI_ioctl>
 800574c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <disk_status+0x30>)
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	79fa      	ldrb	r2, [r7, #7]
 8005770:	4905      	ldr	r1, [pc, #20]	; (8005788 <disk_status+0x30>)
 8005772:	440a      	add	r2, r1
 8005774:	7a12      	ldrb	r2, [r2, #8]
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000784 	.word	0x20000784

0800578c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <disk_initialize+0x48>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d111      	bne.n	80057c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <disk_initialize+0x48>)
 80057a8:	2101      	movs	r1, #1
 80057aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <disk_initialize+0x48>)
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	79fa      	ldrb	r2, [r7, #7]
 80057ba:	4906      	ldr	r1, [pc, #24]	; (80057d4 <disk_initialize+0x48>)
 80057bc:	440a      	add	r2, r1
 80057be:	7a12      	ldrb	r2, [r2, #8]
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000784 	.word	0x20000784

080057d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4603      	mov	r3, r0
 80057e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <disk_read+0x3c>)
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	689c      	ldr	r4, [r3, #8]
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	4a07      	ldr	r2, [pc, #28]	; (8005814 <disk_read+0x3c>)
 80057f8:	4413      	add	r3, r2
 80057fa:	7a18      	ldrb	r0, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	47a0      	blx	r4
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]
  return res;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	bf00      	nop
 8005814:	20000784 	.word	0x20000784

08005818 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <disk_write+0x3c>)
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68dc      	ldr	r4, [r3, #12]
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	4a07      	ldr	r2, [pc, #28]	; (8005854 <disk_write+0x3c>)
 8005838:	4413      	add	r3, r2
 800583a:	7a18      	ldrb	r0, [r3, #8]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	47a0      	blx	r4
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
  return res;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
 8005852:	bf00      	nop
 8005854:	20000784 	.word	0x20000784

08005858 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	603a      	str	r2, [r7, #0]
 8005862:	71fb      	strb	r3, [r7, #7]
 8005864:	460b      	mov	r3, r1
 8005866:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <disk_ioctl+0x38>)
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	79fa      	ldrb	r2, [r7, #7]
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <disk_ioctl+0x38>)
 8005878:	440a      	add	r2, r1
 800587a:	7a10      	ldrb	r0, [r2, #8]
 800587c:	79b9      	ldrb	r1, [r7, #6]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	4798      	blx	r3
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
  return res;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000784 	.word	0x20000784

08005894 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3301      	adds	r3, #1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058a4:	89fb      	ldrh	r3, [r7, #14]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	b21a      	sxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b21b      	sxth	r3, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80058b6:	89fb      	ldrh	r3, [r7, #14]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3303      	adds	r3, #3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	3202      	adds	r2, #2
 80058dc:	7812      	ldrb	r2, [r2, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	3201      	adds	r2, #1
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80058fc:	68fb      	ldr	r3, [r7, #12]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	887a      	ldrh	r2, [r7, #2]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	887b      	ldrh	r3, [r7, #2]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	1c53      	adds	r3, r2, #1
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	6179      	str	r1, [r7, #20]
 80059be:	7812      	ldrb	r2, [r2, #0]
 80059c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f1      	bne.n	80059b2 <mem_cpy+0x1a>
	}
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80059da:	b480      	push	{r7}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	617a      	str	r2, [r7, #20]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f3      	bne.n	80059ea <mem_set+0x10>
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	61fa      	str	r2, [r7, #28]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	61ba      	str	r2, [r7, #24]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	1acb      	subs	r3, r1, r3
 8005a3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <mem_cmp+0x40>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0eb      	beq.n	8005a28 <mem_cmp+0x18>

	return r;
 8005a50:	697b      	ldr	r3, [r7, #20]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3724      	adds	r7, #36	; 0x24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a68:	e002      	b.n	8005a70 <chk_chr+0x12>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <chk_chr+0x26>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d1f2      	bne.n	8005a6a <chk_chr+0xc>
	return *str;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	781b      	ldrb	r3, [r3, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e029      	b.n	8005afc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005aa8:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <chk_lock+0xb4>)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4413      	add	r3, r2
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01d      	beq.n	8005af2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ab6:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <chk_lock+0xb4>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	4413      	add	r3, r2
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d116      	bne.n	8005af6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <chk_lock+0xb4>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4413      	add	r3, r2
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d10c      	bne.n	8005af6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005adc:	4a1a      	ldr	r2, [pc, #104]	; (8005b48 <chk_lock+0xb4>)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d102      	bne.n	8005af6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005af0:	e007      	b.n	8005b02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d9d2      	bls.n	8005aa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d109      	bne.n	8005b1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <chk_lock+0x80>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d101      	bne.n	8005b18 <chk_lock+0x84>
 8005b14:	2300      	movs	r3, #0
 8005b16:	e010      	b.n	8005b3a <chk_lock+0xa6>
 8005b18:	2312      	movs	r3, #18
 8005b1a:	e00e      	b.n	8005b3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d108      	bne.n	8005b34 <chk_lock+0xa0>
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <chk_lock+0xb4>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	4413      	add	r3, r2
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b32:	d101      	bne.n	8005b38 <chk_lock+0xa4>
 8005b34:	2310      	movs	r3, #16
 8005b36:	e000      	b.n	8005b3a <chk_lock+0xa6>
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000764 	.word	0x20000764

08005b4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	e002      	b.n	8005b5e <enq_lock+0x12>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d806      	bhi.n	8005b72 <enq_lock+0x26>
 8005b64:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <enq_lock+0x40>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	4413      	add	r3, r2
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f2      	bne.n	8005b58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000764 	.word	0x20000764

08005b90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e01f      	b.n	8005be0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ba0:	4a41      	ldr	r2, [pc, #260]	; (8005ca8 <inc_lock+0x118>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	4413      	add	r3, r2
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d113      	bne.n	8005bda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005bb2:	4a3d      	ldr	r2, [pc, #244]	; (8005ca8 <inc_lock+0x118>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	3304      	adds	r3, #4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d109      	bne.n	8005bda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005bc6:	4a38      	ldr	r2, [pc, #224]	; (8005ca8 <inc_lock+0x118>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	3308      	adds	r3, #8
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d006      	beq.n	8005be8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d9dc      	bls.n	8005ba0 <inc_lock+0x10>
 8005be6:	e000      	b.n	8005bea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005be8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d132      	bne.n	8005c56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e002      	b.n	8005bfc <inc_lock+0x6c>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d806      	bhi.n	8005c10 <inc_lock+0x80>
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <inc_lock+0x118>)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	4413      	add	r3, r2
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f2      	bne.n	8005bf6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d101      	bne.n	8005c1a <inc_lock+0x8a>
 8005c16:	2300      	movs	r3, #0
 8005c18:	e040      	b.n	8005c9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4922      	ldr	r1, [pc, #136]	; (8005ca8 <inc_lock+0x118>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	440b      	add	r3, r1
 8005c26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	491e      	ldr	r1, [pc, #120]	; (8005ca8 <inc_lock+0x118>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	440b      	add	r3, r1
 8005c34:	3304      	adds	r3, #4
 8005c36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	491a      	ldr	r1, [pc, #104]	; (8005ca8 <inc_lock+0x118>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	440b      	add	r3, r1
 8005c44:	3308      	adds	r3, #8
 8005c46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <inc_lock+0x118>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	4413      	add	r3, r2
 8005c50:	330c      	adds	r3, #12
 8005c52:	2200      	movs	r2, #0
 8005c54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <inc_lock+0xe0>
 8005c5c:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <inc_lock+0x118>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	4413      	add	r3, r2
 8005c64:	330c      	adds	r3, #12
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <inc_lock+0xe0>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e015      	b.n	8005c9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <inc_lock+0xf8>
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <inc_lock+0x118>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	330c      	adds	r3, #12
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	e001      	b.n	8005c8c <inc_lock+0xfc>
 8005c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c8c:	4906      	ldr	r1, [pc, #24]	; (8005ca8 <inc_lock+0x118>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	440b      	add	r3, r1
 8005c94:	330c      	adds	r3, #12
 8005c96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000764 	.word	0x20000764

08005cac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d825      	bhi.n	8005d0c <dec_lock+0x60>
		n = Files[i].ctr;
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <dec_lock+0x74>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4413      	add	r3, r2
 8005cc8:	330c      	adds	r3, #12
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005cce:	89fb      	ldrh	r3, [r7, #14]
 8005cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd4:	d101      	bne.n	8005cda <dec_lock+0x2e>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005cda:	89fb      	ldrh	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <dec_lock+0x3a>
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ce6:	4a0e      	ldr	r2, [pc, #56]	; (8005d20 <dec_lock+0x74>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	4413      	add	r3, r2
 8005cee:	330c      	adds	r3, #12
 8005cf0:	89fa      	ldrh	r2, [r7, #14]
 8005cf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <dec_lock+0x5a>
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <dec_lock+0x74>)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	4413      	add	r3, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	737b      	strb	r3, [r7, #13]
 8005d0a:	e001      	b.n	8005d10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d10:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000764 	.word	0x20000764

08005d24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e010      	b.n	8005d54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d32:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <clear_lock+0x44>)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4413      	add	r3, r2
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d105      	bne.n	8005d4e <clear_lock+0x2a>
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <clear_lock+0x44>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3301      	adds	r3, #1
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d9eb      	bls.n	8005d32 <clear_lock+0xe>
	}
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000764 	.word	0x20000764

08005d6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	78db      	ldrb	r3, [r3, #3]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d034      	beq.n	8005dea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7858      	ldrb	r0, [r3, #1]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d90:	2301      	movs	r3, #1
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	f7ff fd40 	bl	8005818 <disk_write>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e022      	b.n	8005dea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d217      	bcs.n	8005dea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	789b      	ldrb	r3, [r3, #2]
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e010      	b.n	8005de4 <sync_window+0x78>
					wsect += fs->fsize;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7858      	ldrb	r0, [r3, #1]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	f7ff fd1d 	bl	8005818 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d8eb      	bhi.n	8005dc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d01b      	beq.n	8005e44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ffad 	bl	8005d6c <sync_window>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d113      	bne.n	8005e44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7858      	ldrb	r0, [r3, #1]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e26:	2301      	movs	r3, #1
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	f7ff fcd5 	bl	80057d8 <disk_read>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
 8005e38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff87 	bl	8005d6c <sync_window>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d158      	bne.n	8005f1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d148      	bne.n	8005f02 <sync_fs+0xb2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	791b      	ldrb	r3, [r3, #4]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d144      	bne.n	8005f02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3330      	adds	r3, #48	; 0x30
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff fda9 	bl	80059da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3330      	adds	r3, #48	; 0x30
 8005e8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fd38 	bl	800590a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3330      	adds	r3, #48	; 0x30
 8005e9e:	4921      	ldr	r1, [pc, #132]	; (8005f24 <sync_fs+0xd4>)
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fd4d 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3330      	adds	r3, #48	; 0x30
 8005eaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005eae:	491e      	ldr	r1, [pc, #120]	; (8005f28 <sync_fs+0xd8>)
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fd45 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3330      	adds	r3, #48	; 0x30
 8005eba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7ff fd3b 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3330      	adds	r3, #48	; 0x30
 8005ece:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7ff fd31 	bl	8005940 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7858      	ldrb	r0, [r3, #1]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f7ff fc8e 	bl	8005818 <disk_write>
			fs->fsi_flag = 0;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2200      	movs	r2, #0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fca4 	bl	8005858 <disk_ioctl>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <sync_fs+0xca>
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	41615252 	.word	0x41615252
 8005f28:	61417272 	.word	0x61417272

08005f2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	3b02      	subs	r3, #2
 8005f3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	3b02      	subs	r3, #2
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d301      	bcc.n	8005f4c <clust2sect+0x20>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e008      	b.n	8005f5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	895b      	ldrh	r3, [r3, #10]
 8005f50:	461a      	mov	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	fb03 f202 	mul.w	r2, r3, r2
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	4413      	add	r3, r2
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d904      	bls.n	8005f8a <get_fat+0x20>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e08f      	b.n	80060b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295
 8005f94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d062      	beq.n	8006064 <get_fat+0xfa>
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	dc7c      	bgt.n	800609c <get_fat+0x132>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d002      	beq.n	8005fac <get_fat+0x42>
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d042      	beq.n	8006030 <get_fat+0xc6>
 8005faa:	e077      	b.n	800609c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0a5b      	lsrs	r3, r3, #9
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7ff ff14 	bl	8005df4 <move_window>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d167      	bne.n	80060a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	60fa      	str	r2, [r7, #12]
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fe4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	0a5b      	lsrs	r3, r3, #9
 8005fee:	4413      	add	r3, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6938      	ldr	r0, [r7, #16]
 8005ff4:	f7ff fefe 	bl	8005df4 <move_window>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d153      	bne.n	80060a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	461a      	mov	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <get_fat+0xbc>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	e002      	b.n	800602c <get_fat+0xc2>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602c:	617b      	str	r3, [r7, #20]
			break;
 800602e:	e03f      	b.n	80060b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	4413      	add	r3, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6938      	ldr	r0, [r7, #16]
 800603e:	f7ff fed9 	bl	8005df4 <move_window>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d130      	bne.n	80060aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006056:	4413      	add	r3, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fc1b 	bl	8005894 <ld_word>
 800605e:	4603      	mov	r3, r0
 8006060:	617b      	str	r3, [r7, #20]
			break;
 8006062:	e025      	b.n	80060b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	4413      	add	r3, r2
 800606e:	4619      	mov	r1, r3
 8006070:	6938      	ldr	r0, [r7, #16]
 8006072:	f7ff febf 	bl	8005df4 <move_window>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d118      	bne.n	80060ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800608a:	4413      	add	r3, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fc19 	bl	80058c4 <ld_dword>
 8006092:	4603      	mov	r3, r0
 8006094:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006098:	617b      	str	r3, [r7, #20]
			break;
 800609a:	e009      	b.n	80060b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e006      	b.n	80060b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a2:	bf00      	nop
 80060a4:	e004      	b.n	80060b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a6:	bf00      	nop
 80060a8:	e002      	b.n	80060b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060aa:	bf00      	nop
 80060ac:	e000      	b.n	80060b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060ae:	bf00      	nop
		}
	}

	return val;
 80060b0:	697b      	ldr	r3, [r7, #20]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060ba:	b590      	push	{r4, r7, lr}
 80060bc:	b089      	sub	sp, #36	; 0x24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060c6:	2302      	movs	r3, #2
 80060c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f240 80d9 	bls.w	8006284 <put_fat+0x1ca>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	f080 80d3 	bcs.w	8006284 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	f000 8096 	beq.w	8006214 <put_fat+0x15a>
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	f300 80cb 	bgt.w	8006284 <put_fat+0x1ca>
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d002      	beq.n	80060f8 <put_fat+0x3e>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d06e      	beq.n	80061d4 <put_fat+0x11a>
 80060f6:	e0c5      	b.n	8006284 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4413      	add	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	0a5b      	lsrs	r3, r3, #9
 800610e:	4413      	add	r3, r2
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fe6e 	bl	8005df4 <move_window>
 8006118:	4603      	mov	r3, r0
 800611a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800611c:	7ffb      	ldrb	r3, [r7, #31]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 80a9 	bne.w	8006276 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	61b9      	str	r1, [r7, #24]
 8006130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006134:	4413      	add	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <put_fat+0xa4>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b25b      	sxtb	r3, r3
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	b25a      	sxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	b25b      	sxtb	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b25b      	sxtb	r3, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e001      	b.n	8006162 <put_fat+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	0a5b      	lsrs	r3, r3, #9
 8006174:	4413      	add	r3, r2
 8006176:	4619      	mov	r1, r3
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fe3b 	bl	8005df4 <move_window>
 800617e:	4603      	mov	r3, r0
 8006180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006182:	7ffb      	ldrb	r3, [r7, #31]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d178      	bne.n	800627a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006194:	4413      	add	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <put_fat+0xf0>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e00e      	b.n	80061c8 <put_fat+0x10e>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f023 030f 	bic.w	r3, r3, #15
 80061b4:	b25a      	sxtb	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	70da      	strb	r2, [r3, #3]
			break;
 80061d2:	e057      	b.n	8006284 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1a      	ldr	r2, [r3, #32]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	4413      	add	r3, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff fe07 	bl	8005df4 <move_window>
 80061e6:	4603      	mov	r3, r0
 80061e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d146      	bne.n	800627e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80061fe:	4413      	add	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	b292      	uxth	r2, r2
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fb7f 	bl	800590a <st_word>
			fs->wflag = 1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	70da      	strb	r2, [r3, #3]
			break;
 8006212:	e037      	b.n	8006284 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fde7 	bl	8005df4 <move_window>
 8006226:	4603      	mov	r3, r0
 8006228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800622a:	7ffb      	ldrb	r3, [r7, #31]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d128      	bne.n	8006282 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006244:	4413      	add	r3, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fb3c 	bl	80058c4 <ld_dword>
 800624c:	4603      	mov	r3, r0
 800624e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006252:	4323      	orrs	r3, r4
 8006254:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006264:	4413      	add	r3, r2
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fb69 	bl	8005940 <st_dword>
			fs->wflag = 1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	70da      	strb	r2, [r3, #3]
			break;
 8006274:	e006      	b.n	8006284 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006276:	bf00      	nop
 8006278:	e004      	b.n	8006284 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006282:	bf00      	nop
		}
	}
	return res;
 8006284:	7ffb      	ldrb	r3, [r7, #31]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3724      	adds	r7, #36	; 0x24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}

0800628e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b088      	sub	sp, #32
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d904      	bls.n	80062b4 <remove_chain+0x26>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d301      	bcc.n	80062b8 <remove_chain+0x2a>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e04b      	b.n	8006350 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	69b8      	ldr	r0, [r7, #24]
 80062c6:	f7ff fef8 	bl	80060ba <put_fat>
 80062ca:	4603      	mov	r3, r0
 80062cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <remove_chain+0x4a>
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	e03b      	b.n	8006350 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fe45 	bl	8005f6a <get_fat>
 80062e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d031      	beq.n	800634c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <remove_chain+0x64>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e02e      	b.n	8006350 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d101      	bne.n	80062fe <remove_chain+0x70>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e028      	b.n	8006350 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062fe:	2200      	movs	r2, #0
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	69b8      	ldr	r0, [r7, #24]
 8006304:	f7ff fed9 	bl	80060ba <put_fat>
 8006308:	4603      	mov	r3, r0
 800630a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800630c:	7ffb      	ldrb	r3, [r7, #31]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <remove_chain+0x88>
 8006312:	7ffb      	ldrb	r3, [r7, #31]
 8006314:	e01c      	b.n	8006350 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	3b02      	subs	r3, #2
 8006320:	429a      	cmp	r2, r3
 8006322:	d20b      	bcs.n	800633c <remove_chain+0xae>
			fs->free_clst++;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d3c6      	bcc.n	80062d8 <remove_chain+0x4a>
 800634a:	e000      	b.n	800634e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800634c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <create_chain+0x2c>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	429a      	cmp	r2, r3
 8006382:	d31b      	bcc.n	80063bc <create_chain+0x64>
 8006384:	2301      	movs	r3, #1
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e018      	b.n	80063bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fdec 	bl	8005f6a <get_fat>
 8006392:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d801      	bhi.n	800639e <create_chain+0x46>
 800639a:	2301      	movs	r3, #1
 800639c:	e070      	b.n	8006480 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d101      	bne.n	80063aa <create_chain+0x52>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	e06a      	b.n	8006480 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d201      	bcs.n	80063b8 <create_chain+0x60>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	e063      	b.n	8006480 <create_chain+0x128>
		scl = clst;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d307      	bcc.n	80063e0 <create_chain+0x88>
				ncl = 2;
 80063d0:	2302      	movs	r3, #2
 80063d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d901      	bls.n	80063e0 <create_chain+0x88>
 80063dc:	2300      	movs	r3, #0
 80063de:	e04f      	b.n	8006480 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fdc1 	bl	8005f6a <get_fat>
 80063e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d003      	beq.n	80063fe <create_chain+0xa6>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d101      	bne.n	8006402 <create_chain+0xaa>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	e03e      	b.n	8006480 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	429a      	cmp	r2, r3
 8006408:	d1da      	bne.n	80063c0 <create_chain+0x68>
 800640a:	2300      	movs	r3, #0
 800640c:	e038      	b.n	8006480 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800640e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	69f9      	ldr	r1, [r7, #28]
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f7ff fe4f 	bl	80060ba <put_fat>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <create_chain+0xe2>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f7ff fe42 	bl	80060ba <put_fat>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d116      	bne.n	800646e <create_chain+0x116>
		fs->last_clst = ncl;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	3b02      	subs	r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d804      	bhi.n	800645e <create_chain+0x106>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	791b      	ldrb	r3, [r3, #4]
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	711a      	strb	r2, [r3, #4]
 800646c:	e007      	b.n	800647e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d102      	bne.n	800647a <create_chain+0x122>
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	e000      	b.n	800647c <create_chain+0x124>
 800647a:	2301      	movs	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800647e:	69fb      	ldr	r3, [r7, #28]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	3304      	adds	r3, #4
 800649e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	0a5b      	lsrs	r3, r3, #9
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	8952      	ldrh	r2, [r2, #10]
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	613a      	str	r2, [r7, #16]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <clmt_clust+0x3a>
 80064be:	2300      	movs	r3, #0
 80064c0:	e010      	b.n	80064e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d307      	bcc.n	80064da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3304      	adds	r3, #4
 80064d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064d8:	e7e9      	b.n	80064ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80064da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006506:	d204      	bcs.n	8006512 <dir_sdi+0x22>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006512:	2302      	movs	r3, #2
 8006514:	e063      	b.n	80065de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <dir_sdi+0x46>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d902      	bls.n	8006536 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10c      	bne.n	8006556 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	8912      	ldrh	r2, [r2, #8]
 8006544:	4293      	cmp	r3, r2
 8006546:	d301      	bcc.n	800654c <dir_sdi+0x5c>
 8006548:	2302      	movs	r3, #2
 800654a:	e048      	b.n	80065de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	61da      	str	r2, [r3, #28]
 8006554:	e029      	b.n	80065aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	895b      	ldrh	r3, [r3, #10]
 800655a:	025b      	lsls	r3, r3, #9
 800655c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800655e:	e019      	b.n	8006594 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6979      	ldr	r1, [r7, #20]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fd00 	bl	8005f6a <get_fat>
 800656a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d101      	bne.n	8006578 <dir_sdi+0x88>
 8006574:	2301      	movs	r3, #1
 8006576:	e032      	b.n	80065de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d904      	bls.n	8006588 <dir_sdi+0x98>
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	429a      	cmp	r2, r3
 8006586:	d301      	bcc.n	800658c <dir_sdi+0x9c>
 8006588:	2302      	movs	r3, #2
 800658a:	e028      	b.n	80065de <dir_sdi+0xee>
			ofs -= csz;
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	429a      	cmp	r2, r3
 800659a:	d2e1      	bcs.n	8006560 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	6938      	ldr	r0, [r7, #16]
 80065a0:	f7ff fcc4 	bl	8005f2c <clust2sect>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <dir_sdi+0xcc>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e010      	b.n	80065de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	0a5b      	lsrs	r3, r3, #9
 80065c4:	441a      	add	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b086      	sub	sp, #24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	3320      	adds	r3, #32
 80065fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <dir_next+0x28>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660c:	d301      	bcc.n	8006612 <dir_next+0x2c>
 800660e:	2304      	movs	r3, #4
 8006610:	e0aa      	b.n	8006768 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 8098 	bne.w	800674e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	8912      	ldrh	r2, [r2, #8]
 8006638:	4293      	cmp	r3, r2
 800663a:	f0c0 8088 	bcc.w	800674e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	61da      	str	r2, [r3, #28]
 8006644:	2304      	movs	r3, #4
 8006646:	e08f      	b.n	8006768 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	0a5b      	lsrs	r3, r3, #9
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	8952      	ldrh	r2, [r2, #10]
 8006650:	3a01      	subs	r2, #1
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d17a      	bne.n	800674e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7ff fc82 	bl	8005f6a <get_fat>
 8006666:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d801      	bhi.n	8006672 <dir_next+0x8c>
 800666e:	2302      	movs	r3, #2
 8006670:	e07a      	b.n	8006768 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d101      	bne.n	800667e <dir_next+0x98>
 800667a:	2301      	movs	r3, #1
 800667c:	e074      	b.n	8006768 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	429a      	cmp	r2, r3
 8006686:	d358      	bcc.n	800673a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	61da      	str	r2, [r3, #28]
 8006694:	2304      	movs	r3, #4
 8006696:	e067      	b.n	8006768 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f7ff fe59 	bl	8006358 <create_chain>
 80066a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <dir_next+0xcc>
 80066ae:	2307      	movs	r3, #7
 80066b0:	e05a      	b.n	8006768 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <dir_next+0xd6>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e055      	b.n	8006768 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d101      	bne.n	80066c8 <dir_next+0xe2>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e04f      	b.n	8006768 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff fb4f 	bl	8005d6c <sync_window>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <dir_next+0xf2>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e047      	b.n	8006768 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3330      	adds	r3, #48	; 0x30
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff f979 	bl	80059da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	6979      	ldr	r1, [r7, #20]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fc1c 	bl	8005f2c <clust2sect>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80066fa:	e012      	b.n	8006722 <dir_next+0x13c>
						fs->wflag = 1;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fb32 	bl	8005d6c <sync_window>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <dir_next+0x12c>
 800670e:	2301      	movs	r3, #1
 8006710:	e02a      	b.n	8006768 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3301      	adds	r3, #1
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	895b      	ldrh	r3, [r3, #10]
 8006726:	461a      	mov	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4293      	cmp	r3, r2
 800672c:	d3e6      	bcc.n	80066fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff fbf2 	bl	8005f2c <clust2sect>
 8006748:	4602      	mov	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006780:	2100      	movs	r1, #0
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff feb4 	bl	80064f0 <dir_sdi>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d12b      	bne.n	80067ea <dir_alloc+0x7a>
		n = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fb29 	bl	8005df4 <move_window>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d11d      	bne.n	80067e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2be5      	cmp	r3, #229	; 0xe5
 80067b4:	d004      	beq.n	80067c0 <dir_alloc+0x50>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3301      	adds	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d102      	bne.n	80067d4 <dir_alloc+0x64>
 80067ce:	e00c      	b.n	80067ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff05 	bl	80065e6 <dir_next>
 80067dc:	4603      	mov	r3, r0
 80067de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0d7      	beq.n	8006796 <dir_alloc+0x26>
 80067e6:	e000      	b.n	80067ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d101      	bne.n	80067f4 <dir_alloc+0x84>
 80067f0:	2307      	movs	r3, #7
 80067f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	331a      	adds	r3, #26
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff f841 	bl	8005894 <ld_word>
 8006812:	4603      	mov	r3, r0
 8006814:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d109      	bne.n	8006832 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff f836 	bl	8005894 <ld_word>
 8006828:	4603      	mov	r3, r0
 800682a:	041b      	lsls	r3, r3, #16
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	331a      	adds	r3, #26
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	b292      	uxth	r2, r2
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f859 	bl	800590a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d109      	bne.n	8006874 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f103 0214 	add.w	r2, r3, #20
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	b29b      	uxth	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7ff f84b 	bl	800590a <st_word>
	}
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800688a:	2100      	movs	r1, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fe2f 	bl	80064f0 <dir_sdi>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <dir_find+0x24>
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	e03e      	b.n	800691e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6938      	ldr	r0, [r7, #16]
 80068a8:	f7ff faa4 	bl	8005df4 <move_window>
 80068ac:	4603      	mov	r3, r0
 80068ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12f      	bne.n	8006916 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <dir_find+0x4e>
 80068c4:	2304      	movs	r3, #4
 80068c6:	75fb      	strb	r3, [r7, #23]
 80068c8:	e028      	b.n	800691c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	330b      	adds	r3, #11
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	330b      	adds	r3, #11
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <dir_find+0x86>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a18      	ldr	r0, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	220b      	movs	r2, #11
 80068f6:	4619      	mov	r1, r3
 80068f8:	f7ff f88a 	bl	8005a10 <mem_cmp>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff fe6e 	bl	80065e6 <dir_next>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c5      	beq.n	80068a0 <dir_find+0x24>
 8006914:	e002      	b.n	800691c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800691a:	bf00      	nop

	return res;
 800691c:	7dfb      	ldrb	r3, [r7, #23]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006934:	2101      	movs	r1, #1
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff1a 	bl	8006770 <dir_alloc>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11c      	bne.n	8006980 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4619      	mov	r1, r3
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f7ff fa51 	bl	8005df4 <move_window>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d111      	bne.n	8006980 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	2220      	movs	r2, #32
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff f838 	bl	80059da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a18      	ldr	r0, [r3, #32]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	220b      	movs	r2, #11
 8006974:	4619      	mov	r1, r3
 8006976:	f7ff f80f 	bl	8005998 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2201      	movs	r2, #1
 800697e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3324      	adds	r3, #36	; 0x24
 80069a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80069a2:	220b      	movs	r2, #11
 80069a4:	2120      	movs	r1, #32
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f7ff f817 	bl	80059da <mem_set>
	si = i = 0; ni = 8;
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	2308      	movs	r3, #8
 80069b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	61fa      	str	r2, [r7, #28]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80069c6:	7efb      	ldrb	r3, [r7, #27]
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d94e      	bls.n	8006a6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80069cc:	7efb      	ldrb	r3, [r7, #27]
 80069ce:	2b2f      	cmp	r3, #47	; 0x2f
 80069d0:	d006      	beq.n	80069e0 <create_name+0x54>
 80069d2:	7efb      	ldrb	r3, [r7, #27]
 80069d4:	2b5c      	cmp	r3, #92	; 0x5c
 80069d6:	d110      	bne.n	80069fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069d8:	e002      	b.n	80069e0 <create_name+0x54>
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3301      	adds	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b2f      	cmp	r3, #47	; 0x2f
 80069ea:	d0f6      	beq.n	80069da <create_name+0x4e>
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b5c      	cmp	r3, #92	; 0x5c
 80069f6:	d0f0      	beq.n	80069da <create_name+0x4e>
			break;
 80069f8:	e038      	b.n	8006a6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80069fa:	7efb      	ldrb	r3, [r7, #27]
 80069fc:	2b2e      	cmp	r3, #46	; 0x2e
 80069fe:	d003      	beq.n	8006a08 <create_name+0x7c>
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d30c      	bcc.n	8006a22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b0b      	cmp	r3, #11
 8006a0c:	d002      	beq.n	8006a14 <create_name+0x88>
 8006a0e:	7efb      	ldrb	r3, [r7, #27]
 8006a10:	2b2e      	cmp	r3, #46	; 0x2e
 8006a12:	d001      	beq.n	8006a18 <create_name+0x8c>
 8006a14:	2306      	movs	r3, #6
 8006a16:	e044      	b.n	8006aa2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006a18:	2308      	movs	r3, #8
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	230b      	movs	r3, #11
 8006a1e:	617b      	str	r3, [r7, #20]
			continue;
 8006a20:	e022      	b.n	8006a68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006a22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da04      	bge.n	8006a34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006a2a:	7efb      	ldrb	r3, [r7, #27]
 8006a2c:	3b80      	subs	r3, #128	; 0x80
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <create_name+0x120>)
 8006a30:	5cd3      	ldrb	r3, [r2, r3]
 8006a32:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006a34:	7efb      	ldrb	r3, [r7, #27]
 8006a36:	4619      	mov	r1, r3
 8006a38:	481d      	ldr	r0, [pc, #116]	; (8006ab0 <create_name+0x124>)
 8006a3a:	f7ff f810 	bl	8005a5e <chk_chr>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <create_name+0xbc>
 8006a44:	2306      	movs	r3, #6
 8006a46:	e02c      	b.n	8006aa2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006a48:	7efb      	ldrb	r3, [r7, #27]
 8006a4a:	2b60      	cmp	r3, #96	; 0x60
 8006a4c:	d905      	bls.n	8006a5a <create_name+0xce>
 8006a4e:	7efb      	ldrb	r3, [r7, #27]
 8006a50:	2b7a      	cmp	r3, #122	; 0x7a
 8006a52:	d802      	bhi.n	8006a5a <create_name+0xce>
 8006a54:	7efb      	ldrb	r3, [r7, #27]
 8006a56:	3b20      	subs	r3, #32
 8006a58:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	613a      	str	r2, [r7, #16]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4413      	add	r3, r2
 8006a64:	7efa      	ldrb	r2, [r7, #27]
 8006a66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a68:	e7a6      	b.n	80069b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	441a      	add	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <create_name+0xf4>
 8006a7c:	2306      	movs	r3, #6
 8006a7e:	e010      	b.n	8006aa2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2be5      	cmp	r3, #229	; 0xe5
 8006a86:	d102      	bne.n	8006a8e <create_name+0x102>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2205      	movs	r2, #5
 8006a8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a8e:	7efb      	ldrb	r3, [r7, #27]
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d801      	bhi.n	8006a98 <create_name+0x10c>
 8006a94:	2204      	movs	r2, #4
 8006a96:	e000      	b.n	8006a9a <create_name+0x10e>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	330b      	adds	r3, #11
 8006a9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006aa0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	080094c4 	.word	0x080094c4
 8006ab0:	08009438 	.word	0x08009438

08006ab4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ac8:	e002      	b.n	8006ad0 <follow_path+0x1c>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ad6:	d0f8      	beq.n	8006aca <follow_path+0x16>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ade:	d0f4      	beq.n	8006aca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b1f      	cmp	r3, #31
 8006aec:	d80a      	bhi.n	8006b04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2280      	movs	r2, #128	; 0x80
 8006af2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006af6:	2100      	movs	r1, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fcf9 	bl	80064f0 <dir_sdi>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
 8006b02:	e043      	b.n	8006b8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b04:	463b      	mov	r3, r7
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff3f 	bl	800698c <create_name>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d134      	bne.n	8006b82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff feaf 	bl	800687c <dir_find>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d127      	bne.n	8006b86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d122      	bne.n	8006b86 <follow_path+0xd2>
 8006b40:	2305      	movs	r3, #5
 8006b42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b44:	e01f      	b.n	8006b86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11c      	bne.n	8006b8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	799b      	ldrb	r3, [r3, #6]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b5c:	2305      	movs	r3, #5
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e014      	b.n	8006b8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b70:	4413      	add	r3, r2
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fe42 	bl	80067fe <ld_clust>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b80:	e7c0      	b.n	8006b04 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <follow_path+0xd8>
				break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b8a:	bf00      	nop
			}
		}
	}

	return res;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b087      	sub	sp, #28
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d031      	beq.n	8006c10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e002      	b.n	8006bba <get_ldnumber+0x24>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d903      	bls.n	8006bca <get_ldnumber+0x34>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b3a      	cmp	r3, #58	; 0x3a
 8006bc8:	d1f4      	bne.n	8006bb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b3a      	cmp	r3, #58	; 0x3a
 8006bd0:	d11c      	bne.n	8006c0c <get_ldnumber+0x76>
			tp = *path;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	60fa      	str	r2, [r7, #12]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	3b30      	subs	r3, #48	; 0x30
 8006be2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d80e      	bhi.n	8006c08 <get_ldnumber+0x72>
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d10a      	bne.n	8006c08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <get_ldnumber+0x72>
					vol = (int)i;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	e002      	b.n	8006c12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c10:	693b      	ldr	r3, [r7, #16]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	70da      	strb	r2, [r3, #3]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff f8da 	bl	8005df4 <move_window>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <check_fs+0x2a>
 8006c46:	2304      	movs	r3, #4
 8006c48:	e038      	b.n	8006cbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3330      	adds	r3, #48	; 0x30
 8006c4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fe1e 	bl	8005894 <ld_word>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d001      	beq.n	8006c68 <check_fs+0x48>
 8006c64:	2303      	movs	r3, #3
 8006c66:	e029      	b.n	8006cbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c6e:	2be9      	cmp	r3, #233	; 0xe9
 8006c70:	d009      	beq.n	8006c86 <check_fs+0x66>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c78:	2beb      	cmp	r3, #235	; 0xeb
 8006c7a:	d11e      	bne.n	8006cba <check_fs+0x9a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c82:	2b90      	cmp	r3, #144	; 0x90
 8006c84:	d119      	bne.n	8006cba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3330      	adds	r3, #48	; 0x30
 8006c8a:	3336      	adds	r3, #54	; 0x36
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fe19 	bl	80058c4 <ld_dword>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c98:	4a0a      	ldr	r2, [pc, #40]	; (8006cc4 <check_fs+0xa4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <check_fs+0x82>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e00c      	b.n	8006cbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3330      	adds	r3, #48	; 0x30
 8006ca6:	3352      	adds	r3, #82	; 0x52
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe fe0b 	bl	80058c4 <ld_dword>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <check_fs+0xa8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <check_fs+0x9a>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e000      	b.n	8006cbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006cba:	2302      	movs	r3, #2
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00544146 	.word	0x00544146
 8006cc8:	33544146 	.word	0x33544146

08006ccc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b096      	sub	sp, #88	; 0x58
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff ff58 	bl	8006b96 <get_ldnumber>
 8006ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da01      	bge.n	8006cf2 <find_volume+0x26>
 8006cee:	230b      	movs	r3, #11
 8006cf0:	e22d      	b.n	800714e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cf2:	4aa1      	ldr	r2, [pc, #644]	; (8006f78 <find_volume+0x2ac>)
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cfa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <find_volume+0x3a>
 8006d02:	230c      	movs	r3, #12
 8006d04:	e223      	b.n	800714e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe fd19 	bl	8005758 <disk_status>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <find_volume+0x82>
 8006d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e1ff      	b.n	800714e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e1fd      	b.n	800714e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fd11 	bl	800578c <disk_initialize>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e1e6      	b.n	800714e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <find_volume+0xca>
 8006d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d92:	230a      	movs	r3, #10
 8006d94:	e1db      	b.n	800714e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d9e:	f7ff ff3f 	bl	8006c20 <check_fs>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d149      	bne.n	8006e44 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006db0:	2300      	movs	r3, #0
 8006db2:	643b      	str	r3, [r7, #64]	; 0x40
 8006db4:	e01e      	b.n	8006df4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006dc4:	4413      	add	r3, r2
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	3304      	adds	r3, #4
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <find_volume+0x114>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fd74 	bl	80058c4 <ld_dword>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	e000      	b.n	8006de2 <find_volume+0x116>
 8006de0:	2200      	movs	r2, #0
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	3358      	adds	r3, #88	; 0x58
 8006de8:	443b      	add	r3, r7
 8006dea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df0:	3301      	adds	r3, #1
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40
 8006df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d9dd      	bls.n	8006db6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <find_volume+0x13e>
 8006e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e06:	3b01      	subs	r3, #1
 8006e08:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3358      	adds	r3, #88	; 0x58
 8006e10:	443b      	add	r3, r7
 8006e12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <find_volume+0x15e>
 8006e1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e22:	f7ff fefd 	bl	8006c20 <check_fs>
 8006e26:	4603      	mov	r3, r0
 8006e28:	e000      	b.n	8006e2c <find_volume+0x160>
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d905      	bls.n	8006e44 <find_volume+0x178>
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d9e2      	bls.n	8006e0a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d101      	bne.n	8006e50 <find_volume+0x184>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e17e      	b.n	800714e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d901      	bls.n	8006e5c <find_volume+0x190>
 8006e58:	230d      	movs	r3, #13
 8006e5a:	e178      	b.n	800714e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	3330      	adds	r3, #48	; 0x30
 8006e60:	330b      	adds	r3, #11
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fd16 	bl	8005894 <ld_word>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6e:	d001      	beq.n	8006e74 <find_volume+0x1a8>
 8006e70:	230d      	movs	r3, #13
 8006e72:	e16c      	b.n	800714e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	3330      	adds	r3, #48	; 0x30
 8006e78:	3316      	adds	r3, #22
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd0a 	bl	8005894 <ld_word>
 8006e80:	4603      	mov	r3, r0
 8006e82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <find_volume+0x1cc>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	3330      	adds	r3, #48	; 0x30
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fd17 	bl	80058c4 <ld_dword>
 8006e96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e9c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	789b      	ldrb	r3, [r3, #2]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d005      	beq.n	8006ebc <find_volume+0x1f0>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	789b      	ldrb	r3, [r3, #2]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d001      	beq.n	8006ebc <find_volume+0x1f0>
 8006eb8:	230d      	movs	r3, #13
 8006eba:	e148      	b.n	800714e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	789b      	ldrb	r3, [r3, #2]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec4:	fb02 f303 	mul.w	r3, r2, r3
 8006ec8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <find_volume+0x224>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	895b      	ldrh	r3, [r3, #10]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	895b      	ldrh	r3, [r3, #10]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <find_volume+0x228>
 8006ef0:	230d      	movs	r3, #13
 8006ef2:	e12c      	b.n	800714e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	3330      	adds	r3, #48	; 0x30
 8006ef8:	3311      	adds	r3, #17
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fcca 	bl	8005894 <ld_word>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	891b      	ldrh	r3, [r3, #8]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <find_volume+0x24e>
 8006f16:	230d      	movs	r3, #13
 8006f18:	e119      	b.n	800714e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	3330      	adds	r3, #48	; 0x30
 8006f1e:	3313      	adds	r3, #19
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fcb7 	bl	8005894 <ld_word>
 8006f26:	4603      	mov	r3, r0
 8006f28:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <find_volume+0x272>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	3330      	adds	r3, #48	; 0x30
 8006f34:	3320      	adds	r3, #32
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fcc4 	bl	80058c4 <ld_dword>
 8006f3c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	3330      	adds	r3, #48	; 0x30
 8006f42:	330e      	adds	r3, #14
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fca5 	bl	8005894 <ld_word>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <find_volume+0x28c>
 8006f54:	230d      	movs	r3, #13
 8006f56:	e0fa      	b.n	800714e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	4413      	add	r3, r2
 8006f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f60:	8912      	ldrh	r2, [r2, #8]
 8006f62:	0912      	lsrs	r2, r2, #4
 8006f64:	b292      	uxth	r2, r2
 8006f66:	4413      	add	r3, r2
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d204      	bcs.n	8006f7c <find_volume+0x2b0>
 8006f72:	230d      	movs	r3, #13
 8006f74:	e0eb      	b.n	800714e <find_volume+0x482>
 8006f76:	bf00      	nop
 8006f78:	2000075c 	.word	0x2000075c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f84:	8952      	ldrh	r2, [r2, #10]
 8006f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <find_volume+0x2ca>
 8006f92:	230d      	movs	r3, #13
 8006f94:	e0db      	b.n	800714e <find_volume+0x482>
		fmt = FS_FAT32;
 8006f96:	2303      	movs	r3, #3
 8006f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d802      	bhi.n	8006fac <find_volume+0x2e0>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d802      	bhi.n	8006fbc <find_volume+0x2f0>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1c9a      	adds	r2, r3, #2
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fc8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fce:	441a      	add	r2, r3
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	441a      	add	r2, r3
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d11e      	bne.n	8007024 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	3330      	adds	r3, #48	; 0x30
 8006fea:	332a      	adds	r3, #42	; 0x2a
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fc51 	bl	8005894 <ld_word>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <find_volume+0x330>
 8006ff8:	230d      	movs	r3, #13
 8006ffa:	e0a8      	b.n	800714e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	891b      	ldrh	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <find_volume+0x33c>
 8007004:	230d      	movs	r3, #13
 8007006:	e0a2      	b.n	800714e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	3330      	adds	r3, #48	; 0x30
 800700c:	332c      	adds	r3, #44	; 0x2c
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fc58 	bl	80058c4 <ld_dword>
 8007014:	4602      	mov	r2, r0
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
 8007022:	e01f      	b.n	8007064 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	891b      	ldrh	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <find_volume+0x364>
 800702c:	230d      	movs	r3, #13
 800702e:	e08e      	b.n	800714e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	441a      	add	r2, r3
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800703c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007040:	2b02      	cmp	r3, #2
 8007042:	d103      	bne.n	800704c <find_volume+0x380>
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	e00a      	b.n	8007062 <find_volume+0x396>
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	085a      	lsrs	r2, r3, #1
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800706e:	0a5b      	lsrs	r3, r3, #9
 8007070:	429a      	cmp	r2, r3
 8007072:	d201      	bcs.n	8007078 <find_volume+0x3ac>
 8007074:	230d      	movs	r3, #13
 8007076:	e06a      	b.n	800714e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	611a      	str	r2, [r3, #16]
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	2280      	movs	r2, #128	; 0x80
 800708c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800708e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007092:	2b03      	cmp	r3, #3
 8007094:	d149      	bne.n	800712a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	3330      	adds	r3, #48	; 0x30
 800709a:	3330      	adds	r3, #48	; 0x30
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fbf9 	bl	8005894 <ld_word>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d140      	bne.n	800712a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80070a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070aa:	3301      	adds	r3, #1
 80070ac:	4619      	mov	r1, r3
 80070ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070b0:	f7fe fea0 	bl	8005df4 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d137      	bne.n	800712a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2200      	movs	r2, #0
 80070be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	3330      	adds	r3, #48	; 0x30
 80070c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fbe3 	bl	8005894 <ld_word>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d127      	bne.n	800712a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	3330      	adds	r3, #48	; 0x30
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fbf0 	bl	80058c4 <ld_dword>
 80070e4:	4603      	mov	r3, r0
 80070e6:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <find_volume+0x48c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d11e      	bne.n	800712a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	3330      	adds	r3, #48	; 0x30
 80070f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe fbe5 	bl	80058c4 <ld_dword>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4a17      	ldr	r2, [pc, #92]	; (800715c <find_volume+0x490>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d113      	bne.n	800712a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	3330      	adds	r3, #48	; 0x30
 8007106:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fbda 	bl	80058c4 <ld_dword>
 8007110:	4602      	mov	r2, r0
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	3330      	adds	r3, #48	; 0x30
 800711a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fbd0 	bl	80058c4 <ld_dword>
 8007124:	4602      	mov	r2, r0
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007130:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <find_volume+0x494>)
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <find_volume+0x494>)
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	4b08      	ldr	r3, [pc, #32]	; (8007160 <find_volume+0x494>)
 8007140:	881a      	ldrh	r2, [r3, #0]
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007148:	f7fe fdec 	bl	8005d24 <clear_lock>
#endif
	return FR_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3758      	adds	r7, #88	; 0x58
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	41615252 	.word	0x41615252
 800715c:	61417272 	.word	0x61417272
 8007160:	20000760 	.word	0x20000760

08007164 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800716e:	2309      	movs	r3, #9
 8007170:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01c      	beq.n	80071b2 <validate+0x4e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d018      	beq.n	80071b2 <validate+0x4e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d013      	beq.n	80071b2 <validate+0x4e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	889a      	ldrh	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	429a      	cmp	r2, r3
 8007196:	d10c      	bne.n	80071b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fada 	bl	8005758 <disk_status>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <validate+0x4e>
			res = FR_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <validate+0x5a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	e000      	b.n	80071c0 <validate+0x5c>
 80071be:	2300      	movs	r3, #0
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	6013      	str	r3, [r2, #0]
	return res;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071e2:	f107 0310 	add.w	r3, r7, #16
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fcd5 	bl	8006b96 <get_ldnumber>
 80071ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da01      	bge.n	80071f8 <f_mount+0x28>
 80071f4:	230b      	movs	r3, #11
 80071f6:	e02b      	b.n	8007250 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071f8:	4a17      	ldr	r2, [pc, #92]	; (8007258 <f_mount+0x88>)
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007200:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007208:	69b8      	ldr	r0, [r7, #24]
 800720a:	f7fe fd8b 	bl	8005d24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	490d      	ldr	r1, [pc, #52]	; (8007258 <f_mount+0x88>)
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <f_mount+0x66>
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d001      	beq.n	800723a <f_mount+0x6a>
 8007236:	2300      	movs	r3, #0
 8007238:	e00a      	b.n	8007250 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800723a:	f107 010c 	add.w	r1, r7, #12
 800723e:	f107 0308 	add.w	r3, r7, #8
 8007242:	2200      	movs	r2, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fd41 	bl	8006ccc <find_volume>
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	2000075c 	.word	0x2000075c

0800725c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	; 0x60
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <f_open+0x18>
 8007270:	2309      	movs	r3, #9
 8007272:	e1ad      	b.n	80075d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800727a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800727c:	79fa      	ldrb	r2, [r7, #7]
 800727e:	f107 0110 	add.w	r1, r7, #16
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fd20 	bl	8006ccc <find_volume>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 8191 	bne.w	80075be <f_open+0x362>
		dj.obj.fs = fs;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	f107 0314 	add.w	r3, r7, #20
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff fc03 	bl	8006ab4 <follow_path>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11a      	bne.n	80072f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da03      	bge.n	80072ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80072c6:	2306      	movs	r3, #6
 80072c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072cc:	e011      	b.n	80072f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf14      	ite	ne
 80072d8:	2301      	movne	r3, #1
 80072da:	2300      	moveq	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fbd4 	bl	8005a94 <chk_lock>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f003 031c 	and.w	r3, r3, #28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d07f      	beq.n	80073fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80072fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007308:	2b04      	cmp	r3, #4
 800730a:	d10e      	bne.n	800732a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800730c:	f7fe fc1e 	bl	8005b4c <enq_lock>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d006      	beq.n	8007324 <f_open+0xc8>
 8007316:	f107 0314 	add.w	r3, r7, #20
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fb03 	bl	8006926 <dir_register>
 8007320:	4603      	mov	r3, r0
 8007322:	e000      	b.n	8007326 <f_open+0xca>
 8007324:	2312      	movs	r3, #18
 8007326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	f043 0308 	orr.w	r3, r3, #8
 8007330:	71fb      	strb	r3, [r7, #7]
 8007332:	e010      	b.n	8007356 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007334:	7ebb      	ldrb	r3, [r7, #26]
 8007336:	f003 0311 	and.w	r3, r3, #17
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <f_open+0xea>
					res = FR_DENIED;
 800733e:	2307      	movs	r3, #7
 8007340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007344:	e007      	b.n	8007356 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <f_open+0xfa>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800735a:	2b00      	cmp	r3, #0
 800735c:	d168      	bne.n	8007430 <f_open+0x1d4>
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d063      	beq.n	8007430 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007368:	f7fe f998 	bl	800569c <get_fattime>
 800736c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	330e      	adds	r3, #14
 8007372:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fae3 	bl	8005940 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	3316      	adds	r3, #22
 800737e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fadd 	bl	8005940 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	330b      	adds	r3, #11
 800738a:	2220      	movs	r2, #32
 800738c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fa32 	bl	80067fe <ld_clust>
 800739a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073a0:	2200      	movs	r2, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fa4a 	bl	800683c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80073a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073aa:	331c      	adds	r3, #28
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fac6 	bl	8005940 <st_dword>
					fs->wflag = 1;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2201      	movs	r2, #1
 80073b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d037      	beq.n	8007430 <f_open+0x1d4>
						dw = fs->winsect;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80073c6:	f107 0314 	add.w	r3, r7, #20
 80073ca:	2200      	movs	r2, #0
 80073cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe ff5d 	bl	800628e <remove_chain>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80073da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d126      	bne.n	8007430 <f_open+0x1d4>
							res = move_window(fs, dw);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fd04 	bl	8005df4 <move_window>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073f6:	3a01      	subs	r2, #1
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	e019      	b.n	8007430 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007400:	2b00      	cmp	r3, #0
 8007402:	d115      	bne.n	8007430 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007404:	7ebb      	ldrb	r3, [r7, #26]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <f_open+0x1ba>
					res = FR_NO_FILE;
 800740e:	2304      	movs	r3, #4
 8007410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007414:	e00c      	b.n	8007430 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <f_open+0x1d4>
 8007420:	7ebb      	ldrb	r3, [r7, #26]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <f_open+0x1d4>
						res = FR_DENIED;
 800742a:	2307      	movs	r3, #7
 800742c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007434:	2b00      	cmp	r3, #0
 8007436:	d128      	bne.n	800748a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007448:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf14      	ite	ne
 8007462:	2301      	movne	r3, #1
 8007464:	2300      	moveq	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fb8d 	bl	8005b90 <inc_lock>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <f_open+0x22e>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800748a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800748e:	2b00      	cmp	r3, #0
 8007490:	f040 8095 	bne.w	80075be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff f9af 	bl	80067fe <ld_clust>
 80074a0:	4602      	mov	r2, r0
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	331c      	adds	r3, #28
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fa0a 	bl	80058c4 <ld_dword>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	88da      	ldrh	r2, [r3, #6]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3330      	adds	r3, #48	; 0x30
 80074e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fa74 	bl	80059da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d060      	beq.n	80075be <f_open+0x362>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05c      	beq.n	80075be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	895b      	ldrh	r3, [r3, #10]
 8007510:	025b      	lsls	r3, r3, #9
 8007512:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	657b      	str	r3, [r7, #84]	; 0x54
 8007520:	e016      	b.n	8007550 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fd1f 	bl	8005f6a <get_fat>
 800752c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800752e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007530:	2b01      	cmp	r3, #1
 8007532:	d802      	bhi.n	800753a <f_open+0x2de>
 8007534:	2302      	movs	r3, #2
 8007536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800753a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d102      	bne.n	8007548 <f_open+0x2ec>
 8007542:	2301      	movs	r3, #1
 8007544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	657b      	str	r3, [r7, #84]	; 0x54
 8007550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007554:	2b00      	cmp	r3, #0
 8007556:	d103      	bne.n	8007560 <f_open+0x304>
 8007558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800755a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755c:	429a      	cmp	r2, r3
 800755e:	d8e0      	bhi.n	8007522 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007564:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800756a:	2b00      	cmp	r3, #0
 800756c:	d127      	bne.n	80075be <f_open+0x362>
 800756e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007574:	2b00      	cmp	r3, #0
 8007576:	d022      	beq.n	80075be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fcd5 	bl	8005f2c <clust2sect>
 8007582:	6478      	str	r0, [r7, #68]	; 0x44
 8007584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <f_open+0x336>
						res = FR_INT_ERR;
 800758a:	2302      	movs	r3, #2
 800758c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007590:	e015      	b.n	80075be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007594:	0a5a      	lsrs	r2, r3, #9
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	441a      	add	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	7858      	ldrb	r0, [r3, #1]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	2301      	movs	r3, #1
 80075ae:	f7fe f913 	bl	80057d8 <disk_read>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <f_open+0x362>
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <f_open+0x370>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80075cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3760      	adds	r7, #96	; 0x60
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08e      	sub	sp, #56	; 0x38
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f107 0214 	add.w	r2, r7, #20
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fdb3 	bl	8007164 <validate>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007608:	2b00      	cmp	r3, #0
 800760a:	d107      	bne.n	800761c <f_read+0x44>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7d5b      	ldrb	r3, [r3, #21]
 8007610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <f_read+0x4a>
 800761c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007620:	e115      	b.n	800784e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	7d1b      	ldrb	r3, [r3, #20]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <f_read+0x5a>
 800762e:	2307      	movs	r3, #7
 8007630:	e10d      	b.n	800784e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	429a      	cmp	r2, r3
 8007644:	f240 80fe 	bls.w	8007844 <f_read+0x26c>
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800764c:	e0fa      	b.n	8007844 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 80c6 	bne.w	80077e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	0a5b      	lsrs	r3, r3, #9
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	8952      	ldrh	r2, [r2, #10]
 8007666:	3a01      	subs	r2, #1
 8007668:	4013      	ands	r3, r2
 800766a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d12f      	bne.n	80076d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
 8007680:	e013      	b.n	80076aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	4619      	mov	r1, r3
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7fe fef9 	bl	8006488 <clmt_clust>
 8007696:	6338      	str	r0, [r7, #48]	; 0x30
 8007698:	e007      	b.n	80076aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fc61 	bl	8005f6a <get_fat>
 80076a8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d804      	bhi.n	80076ba <f_read+0xe2>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2202      	movs	r2, #2
 80076b4:	755a      	strb	r2, [r3, #21]
 80076b6:	2302      	movs	r3, #2
 80076b8:	e0c9      	b.n	800784e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d104      	bne.n	80076cc <f_read+0xf4>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	755a      	strb	r2, [r3, #21]
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0c0      	b.n	800784e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fc26 	bl	8005f2c <clust2sect>
 80076e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <f_read+0x11a>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2202      	movs	r2, #2
 80076ec:	755a      	strb	r2, [r3, #21]
 80076ee:	2302      	movs	r3, #2
 80076f0:	e0ad      	b.n	800784e <f_read+0x276>
			sect += csect;
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a5b      	lsrs	r3, r3, #9
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d039      	beq.n	800777a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	4413      	add	r3, r2
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	8952      	ldrh	r2, [r2, #10]
 8007710:	4293      	cmp	r3, r2
 8007712:	d905      	bls.n	8007720 <f_read+0x148>
					cc = fs->csize - csect;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	895b      	ldrh	r3, [r3, #10]
 8007718:	461a      	mov	r2, r3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	7858      	ldrb	r0, [r3, #1]
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800772a:	f7fe f855 	bl	80057d8 <disk_read>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <f_read+0x166>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	755a      	strb	r2, [r3, #21]
 800773a:	2301      	movs	r3, #1
 800773c:	e087      	b.n	800784e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	7d1b      	ldrb	r3, [r3, #20]
 8007742:	b25b      	sxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	da14      	bge.n	8007772 <f_read+0x19a>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007752:	429a      	cmp	r2, r3
 8007754:	d90d      	bls.n	8007772 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	025b      	lsls	r3, r3, #9
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	18d0      	adds	r0, r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3330      	adds	r3, #48	; 0x30
 8007768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800776c:	4619      	mov	r1, r3
 800776e:	f7fe f913 	bl	8005998 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	025b      	lsls	r3, r3, #9
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007778:	e050      	b.n	800781c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	429a      	cmp	r2, r3
 8007782:	d02e      	beq.n	80077e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	7d1b      	ldrb	r3, [r3, #20]
 8007788:	b25b      	sxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	da18      	bge.n	80077c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	7858      	ldrb	r0, [r3, #1]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1a      	ldr	r2, [r3, #32]
 800779c:	2301      	movs	r3, #1
 800779e:	f7fe f83b 	bl	8005818 <disk_write>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <f_read+0x1da>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	755a      	strb	r2, [r3, #21]
 80077ae:	2301      	movs	r3, #1
 80077b0:	e04d      	b.n	800784e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	7d1b      	ldrb	r3, [r3, #20]
 80077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	7858      	ldrb	r0, [r3, #1]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ca:	2301      	movs	r3, #1
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	f7fe f803 	bl	80057d8 <disk_read>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <f_read+0x20a>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	755a      	strb	r2, [r3, #21]
 80077de:	2301      	movs	r3, #1
 80077e0:	e035      	b.n	800784e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80077f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d901      	bls.n	8007802 <f_read+0x22a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	4413      	add	r3, r2
 8007812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007814:	4619      	mov	r1, r3
 8007816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007818:	f7fe f8be 	bl	8005998 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	4413      	add	r3, r2
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	619a      	str	r2, [r3, #24]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	441a      	add	r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f47f af01 	bne.w	800764e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3738      	adds	r7, #56	; 0x38
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08c      	sub	sp, #48	; 0x30
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f107 0210 	add.w	r2, r7, #16
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fc74 	bl	8007164 <validate>
 800787c:	4603      	mov	r3, r0
 800787e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007886:	2b00      	cmp	r3, #0
 8007888:	d107      	bne.n	800789a <f_write+0x44>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	7d5b      	ldrb	r3, [r3, #21]
 800788e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <f_write+0x4a>
 800789a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800789e:	e14b      	b.n	8007b38 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	7d1b      	ldrb	r3, [r3, #20]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <f_write+0x5a>
 80078ac:	2307      	movs	r3, #7
 80078ae:	e143      	b.n	8007b38 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	441a      	add	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	f080 812d 	bcs.w	8007b1c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	43db      	mvns	r3, r3
 80078c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078ca:	e127      	b.n	8007b1c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 80e3 	bne.w	8007aa0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	0a5b      	lsrs	r3, r3, #9
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	8952      	ldrh	r2, [r2, #10]
 80078e4:	3a01      	subs	r2, #1
 80078e6:	4013      	ands	r3, r2
 80078e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d143      	bne.n	8007978 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11a      	bne.n	800793a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fd25 	bl	8006358 <create_chain>
 800790e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007910:	e013      	b.n	800793a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7fe fdb1 	bl	8006488 <clmt_clust>
 8007926:	62b8      	str	r0, [r7, #40]	; 0x28
 8007928:	e007      	b.n	800793a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fd10 	bl	8006358 <create_chain>
 8007938:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80f2 	beq.w	8007b26 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	2b01      	cmp	r3, #1
 8007946:	d104      	bne.n	8007952 <f_write+0xfc>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2202      	movs	r2, #2
 800794c:	755a      	strb	r2, [r3, #21]
 800794e:	2302      	movs	r3, #2
 8007950:	e0f2      	b.n	8007b38 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d104      	bne.n	8007964 <f_write+0x10e>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	755a      	strb	r2, [r3, #21]
 8007960:	2301      	movs	r3, #1
 8007962:	e0e9      	b.n	8007b38 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007968:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <f_write+0x122>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007976:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	7d1b      	ldrb	r3, [r3, #20]
 800797c:	b25b      	sxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	da18      	bge.n	80079b4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	7858      	ldrb	r0, [r3, #1]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	2301      	movs	r3, #1
 8007992:	f7fd ff41 	bl	8005818 <disk_write>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <f_write+0x150>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	755a      	strb	r2, [r3, #21]
 80079a2:	2301      	movs	r3, #1
 80079a4:	e0c8      	b.n	8007b38 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7d1b      	ldrb	r3, [r3, #20]
 80079aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f7fe fab5 	bl	8005f2c <clust2sect>
 80079c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <f_write+0x17e>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2202      	movs	r2, #2
 80079ce:	755a      	strb	r2, [r3, #21]
 80079d0:	2302      	movs	r3, #2
 80079d2:	e0b1      	b.n	8007b38 <f_write+0x2e2>
			sect += csect;
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	4413      	add	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	0a5b      	lsrs	r3, r3, #9
 80079e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d03c      	beq.n	8007a62 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	4413      	add	r3, r2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	8952      	ldrh	r2, [r2, #10]
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d905      	bls.n	8007a02 <f_write+0x1ac>
					cc = fs->csize - csect;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	895b      	ldrh	r3, [r3, #10]
 80079fa:	461a      	mov	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	7858      	ldrb	r0, [r3, #1]
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	69f9      	ldr	r1, [r7, #28]
 8007a0c:	f7fd ff04 	bl	8005818 <disk_write>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d004      	beq.n	8007a20 <f_write+0x1ca>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	755a      	strb	r2, [r3, #21]
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e08b      	b.n	8007b38 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a1a      	ldr	r2, [r3, #32]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	6a3a      	ldr	r2, [r7, #32]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d915      	bls.n	8007a5a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	025b      	lsls	r3, r3, #9
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a46:	4619      	mov	r1, r3
 8007a48:	f7fd ffa6 	bl	8005998 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	7d1b      	ldrb	r3, [r3, #20]
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	025b      	lsls	r3, r3, #9
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a60:	e03f      	b.n	8007ae2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d016      	beq.n	8007a9a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d210      	bcs.n	8007a9a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	7858      	ldrb	r0, [r3, #1]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a82:	2301      	movs	r3, #1
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	f7fd fea7 	bl	80057d8 <disk_read>
 8007a8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	755a      	strb	r2, [r3, #21]
 8007a96:	2301      	movs	r3, #1
 8007a98:	e04e      	b.n	8007b38 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d901      	bls.n	8007aba <f_write+0x264>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	4413      	add	r3, r2
 8007aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd ff62 	bl	8005998 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	7d1b      	ldrb	r3, [r3, #20]
 8007ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	4413      	add	r3, r2
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	441a      	add	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	619a      	str	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	bf38      	it	cc
 8007b02:	461a      	movcc	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	60da      	str	r2, [r3, #12]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	441a      	add	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f47f aed4 	bne.w	80078cc <f_write+0x76>
 8007b24:	e000      	b.n	8007b28 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	7d1b      	ldrb	r3, [r3, #20]
 8007b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f107 0208 	add.w	r2, r7, #8
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fb07 	bl	8007164 <validate>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d168      	bne.n	8007c32 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7d1b      	ldrb	r3, [r3, #20]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d062      	beq.n	8007c32 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7d1b      	ldrb	r3, [r3, #20]
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da15      	bge.n	8007ba2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	7858      	ldrb	r0, [r3, #1]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	2301      	movs	r3, #1
 8007b86:	f7fd fe47 	bl	8005818 <disk_write>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <f_sync+0x54>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e04f      	b.n	8007c34 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7d1b      	ldrb	r3, [r3, #20]
 8007b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ba2:	f7fd fd7b 	bl	800569c <get_fattime>
 8007ba6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fe f91f 	bl	8005df4 <move_window>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d138      	bne.n	8007c32 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	330b      	adds	r3, #11
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	330b      	adds	r3, #11
 8007bd0:	f042 0220 	orr.w	r2, r2, #32
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	461a      	mov	r2, r3
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	f7fe fe2a 	bl	800683c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f103 021c 	add.w	r2, r3, #28
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fd fea3 	bl	8005940 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3316      	adds	r3, #22
 8007bfe:	6939      	ldr	r1, [r7, #16]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd fe9d 	bl	8005940 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3312      	adds	r3, #18
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fd fe7c 	bl	800590a <st_word>
					fs->wflag = 1;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2201      	movs	r2, #1
 8007c16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe f918 	bl	8005e50 <sync_fs>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7d1b      	ldrb	r3, [r3, #20]
 8007c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff7b 	bl	8007b40 <f_sync>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d118      	bne.n	8007c86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f107 0208 	add.w	r2, r7, #8
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fa81 	bl	8007164 <validate>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe f81b 	bl	8005cac <dec_lock>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b092      	sub	sp, #72	; 0x48
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007c9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007ca0:	f107 030c 	add.w	r3, r7, #12
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff f810 	bl	8006ccc <find_volume>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007cb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8099 	bne.w	8007dee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	3b02      	subs	r3, #2
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d804      	bhi.n	8007cda <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	e089      	b.n	8007dee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d128      	bne.n	8007d38 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007cee:	f107 0314 	add.w	r3, r7, #20
 8007cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe f938 	bl	8005f6a <get_fat>
 8007cfa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d103      	bne.n	8007d0c <f_getfree+0x7c>
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d0a:	e063      	b.n	8007dd4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d103      	bne.n	8007d1a <f_getfree+0x8a>
 8007d12:	2302      	movs	r3, #2
 8007d14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d18:	e05c      	b.n	8007dd4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <f_getfree+0x96>
 8007d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d22:	3301      	adds	r3, #1
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	3301      	adds	r3, #1
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3db      	bcc.n	8007cee <f_getfree+0x5e>
 8007d36:	e04d      	b.n	8007dd4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
 8007d48:	2300      	movs	r3, #0
 8007d4a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d113      	bne.n	8007d7a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f7fe f84a 	bl	8005df4 <move_window>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007d66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d131      	bne.n	8007dd2 <f_getfree+0x142>
							p = fs->win;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	3330      	adds	r3, #48	; 0x30
 8007d72:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d10f      	bne.n	8007da2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d84:	f7fd fd86 	bl	8005894 <ld_word>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <f_getfree+0x104>
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	3301      	adds	r3, #1
 8007d92:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	3302      	adds	r3, #2
 8007d98:	633b      	str	r3, [r7, #48]	; 0x30
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	3b02      	subs	r3, #2
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007da0:	e010      	b.n	8007dc4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da4:	f7fd fd8e 	bl	80058c4 <ld_dword>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <f_getfree+0x128>
 8007db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db4:	3301      	adds	r3, #1
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	3304      	adds	r3, #4
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	3b04      	subs	r3, #4
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1bd      	bne.n	8007d4c <f_getfree+0xbc>
 8007dd0:	e000      	b.n	8007dd4 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007dd2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dde:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	791a      	ldrb	r2, [r3, #4]
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007dee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3748      	adds	r7, #72	; 0x48
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b088      	sub	sp, #32
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007e0e:	e01b      	b.n	8007e48 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007e10:	f107 0310 	add.w	r3, r7, #16
 8007e14:	f107 0114 	add.w	r1, r7, #20
 8007e18:	2201      	movs	r2, #1
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fbdc 	bl	80075d8 <f_read>
		if (rc != 1) break;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d116      	bne.n	8007e54 <f_gets+0x5a>
		c = s[0];
 8007e26:	7d3b      	ldrb	r3, [r7, #20]
 8007e28:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b0d      	cmp	r3, #13
 8007e2e:	d100      	bne.n	8007e32 <f_gets+0x38>
 8007e30:	e00a      	b.n	8007e48 <f_gets+0x4e>
		*p++ = c;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	61ba      	str	r2, [r7, #24]
 8007e38:	7dfa      	ldrb	r2, [r7, #23]
 8007e3a:	701a      	strb	r2, [r3, #0]
		n++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b0a      	cmp	r3, #10
 8007e46:	d007      	beq.n	8007e58 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	dbde      	blt.n	8007e10 <f_gets+0x16>
 8007e52:	e002      	b.n	8007e5a <f_gets+0x60>
		if (rc != 1) break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007e58:	bf00      	nop
	}
	*p = 0;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <f_gets+0x70>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	e000      	b.n	8007e6c <f_gets+0x72>
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3720      	adds	r7, #32
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007e8c:	7a5b      	ldrb	r3, [r3, #9]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d131      	bne.n	8007ef8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e94:	4b1c      	ldr	r3, [pc, #112]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007e96:	7a5b      	ldrb	r3, [r3, #9]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ea2:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007ea4:	7a5b      	ldrb	r3, [r3, #9]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007eb4:	7a5b      	ldrb	r3, [r3, #9]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	79fa      	ldrb	r2, [r7, #7]
 8007ec0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007ec4:	7a5b      	ldrb	r3, [r3, #9]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	b2d1      	uxtb	r1, r2
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <FATFS_LinkDriverEx+0x94>)
 8007ece:	7251      	strb	r1, [r2, #9]
 8007ed0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ed2:	7dbb      	ldrb	r3, [r7, #22]
 8007ed4:	3330      	adds	r3, #48	; 0x30
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	223a      	movs	r2, #58	; 0x3a
 8007ee2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	222f      	movs	r2, #47	; 0x2f
 8007eea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3303      	adds	r3, #3
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000784 	.word	0x20000784

08007f0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f16:	2200      	movs	r2, #0
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ffaa 	bl	8007e74 <FATFS_LinkDriverEx>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007f34:	f7f9 fa9c 	bl	8001470 <HAL_GetTick>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <SPI_Timer_On+0x20>)
 8007f3c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007f3e:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <SPI_Timer_On+0x24>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000794 	.word	0x20000794
 8007f50:	20000798 	.word	0x20000798

08007f54 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007f58:	f7f9 fa8a 	bl	8001470 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <SPI_Timer_Status+0x24>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	1ad2      	subs	r2, r2, r3
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <SPI_Timer_Status+0x28>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	bf34      	ite	cc
 8007f6c:	2301      	movcc	r3, #1
 8007f6e:	2300      	movcs	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000794 	.word	0x20000794
 8007f7c:	20000798 	.word	0x20000798

08007f80 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007f8a:	f107 020f 	add.w	r2, r7, #15
 8007f8e:	1df9      	adds	r1, r7, #7
 8007f90:	2332      	movs	r3, #50	; 0x32
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2301      	movs	r3, #1
 8007f96:	4804      	ldr	r0, [pc, #16]	; (8007fa8 <xchg_spi+0x28>)
 8007f98:	f7fc fa32 	bl	8004400 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200002bc 	.word	0x200002bc

08007fac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007fac:	b590      	push	{r4, r7, lr}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e00a      	b.n	8007fd2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	18d4      	adds	r4, r2, r3
 8007fc2:	20ff      	movs	r0, #255	; 0xff
 8007fc4:	f7ff ffdc 	bl	8007f80 <xchg_spi>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d3f0      	bcc.n	8007fbc <rcvr_spi_multi+0x10>
	}
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd90      	pop	{r4, r7, pc}

08007fe4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buff, btx, HAL_MAX_DELAY);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	4803      	ldr	r0, [pc, #12]	; (8008008 <xmit_spi_multi+0x24>)
 8007ffa:	f7fc f88c 	bl	8004116 <HAL_SPI_Transmit>
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200002bc 	.word	0x200002bc

0800800c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008014:	f7f9 fa2c 	bl	8001470 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800801e:	20ff      	movs	r0, #255	; 0xff
 8008020:	f7ff ffae 	bl	8007f80 <xchg_spi>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2bff      	cmp	r3, #255	; 0xff
 800802c:	d007      	beq.n	800803e <wait_ready+0x32>
 800802e:	f7f9 fa1f 	bl	8001470 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d8ef      	bhi.n	800801e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2bff      	cmp	r3, #255	; 0xff
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008058:	2201      	movs	r2, #1
 800805a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800805e:	4804      	ldr	r0, [pc, #16]	; (8008070 <despiselect+0x1c>)
 8008060:	f7fa fb46 	bl	80026f0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008064:	20ff      	movs	r0, #255	; 0xff
 8008066:	f7ff ff8b 	bl	8007f80 <xchg_spi>

}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	48000400 	.word	0x48000400

08008074 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800807e:	480a      	ldr	r0, [pc, #40]	; (80080a8 <spiselect+0x34>)
 8008080:	f7fa fb36 	bl	80026f0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008084:	20ff      	movs	r0, #255	; 0xff
 8008086:	f7ff ff7b 	bl	8007f80 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800808a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800808e:	f7ff ffbd 	bl	800800c <wait_ready>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <spiselect+0x28>
 8008098:	2301      	movs	r3, #1
 800809a:	e002      	b.n	80080a2 <spiselect+0x2e>

	despiselect();
 800809c:	f7ff ffda 	bl	8008054 <despiselect>
	return 0;	/* Timeout */
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	48000400 	.word	0x48000400

080080ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80080b6:	20c8      	movs	r0, #200	; 0xc8
 80080b8:	f7ff ff38 	bl	8007f2c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80080bc:	20ff      	movs	r0, #255	; 0xff
 80080be:	f7ff ff5f 	bl	8007f80 <xchg_spi>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2bff      	cmp	r3, #255	; 0xff
 80080ca:	d104      	bne.n	80080d6 <rcvr_datablock+0x2a>
 80080cc:	f7ff ff42 	bl	8007f54 <SPI_Timer_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f2      	bne.n	80080bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2bfe      	cmp	r3, #254	; 0xfe
 80080da:	d001      	beq.n	80080e0 <rcvr_datablock+0x34>
 80080dc:	2300      	movs	r3, #0
 80080de:	e00a      	b.n	80080f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ff62 	bl	8007fac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80080e8:	20ff      	movs	r0, #255	; 0xff
 80080ea:	f7ff ff49 	bl	8007f80 <xchg_spi>
 80080ee:	20ff      	movs	r0, #255	; 0xff
 80080f0:	f7ff ff46 	bl	8007f80 <xchg_spi>

	return 1;						/* Function succeeded */
 80080f4:	2301      	movs	r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800810a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800810e:	f7ff ff7d 	bl	800800c <wait_ready>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <xmit_datablock+0x1e>
 8008118:	2300      	movs	r3, #0
 800811a:	e01e      	b.n	800815a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff ff2e 	bl	8007f80 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	2bfd      	cmp	r3, #253	; 0xfd
 8008128:	d016      	beq.n	8008158 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800812a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ff58 	bl	8007fe4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008134:	20ff      	movs	r0, #255	; 0xff
 8008136:	f7ff ff23 	bl	8007f80 <xchg_spi>
 800813a:	20ff      	movs	r0, #255	; 0xff
 800813c:	f7ff ff20 	bl	8007f80 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008140:	20ff      	movs	r0, #255	; 0xff
 8008142:	f7ff ff1d 	bl	8007f80 <xchg_spi>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2b05      	cmp	r3, #5
 8008152:	d001      	beq.n	8008158 <xmit_datablock+0x5a>
 8008154:	2300      	movs	r3, #0
 8008156:	e000      	b.n	800815a <xmit_datablock+0x5c>
	}
	return 1;
 8008158:	2301      	movs	r3, #1
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	4603      	mov	r3, r0
 800816a:	6039      	str	r1, [r7, #0]
 800816c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800816e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	da0e      	bge.n	8008194 <send_cmd+0x32>
		cmd &= 0x7F;
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800817e:	2100      	movs	r1, #0
 8008180:	2037      	movs	r0, #55	; 0x37
 8008182:	f7ff ffee 	bl	8008162 <send_cmd>
 8008186:	4603      	mov	r3, r0
 8008188:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d901      	bls.n	8008194 <send_cmd+0x32>
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	e051      	b.n	8008238 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	2b0c      	cmp	r3, #12
 8008198:	d008      	beq.n	80081ac <send_cmd+0x4a>
		despiselect();
 800819a:	f7ff ff5b 	bl	8008054 <despiselect>
		if (!spiselect()) return 0xFF;
 800819e:	f7ff ff69 	bl	8008074 <spiselect>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <send_cmd+0x4a>
 80081a8:	23ff      	movs	r3, #255	; 0xff
 80081aa:	e045      	b.n	8008238 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff fee3 	bl	8007f80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	0e1b      	lsrs	r3, r3, #24
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fedd 	bl	8007f80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fed7 	bl	8007f80 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fed1 	bl	8007f80 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fecc 	bl	8007f80 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <send_cmd+0x94>
 80081f2:	2395      	movs	r3, #149	; 0x95
 80081f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d101      	bne.n	8008200 <send_cmd+0x9e>
 80081fc:	2387      	movs	r3, #135	; 0x87
 80081fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff febc 	bl	8007f80 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b0c      	cmp	r3, #12
 800820c:	d102      	bne.n	8008214 <send_cmd+0xb2>
 800820e:	20ff      	movs	r0, #255	; 0xff
 8008210:	f7ff feb6 	bl	8007f80 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008214:	230a      	movs	r3, #10
 8008216:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008218:	20ff      	movs	r0, #255	; 0xff
 800821a:	f7ff feb1 	bl	8007f80 <xchg_spi>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da05      	bge.n	8008236 <send_cmd+0xd4>
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	3b01      	subs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008236:	7bbb      	ldrb	r3, [r7, #14]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <USER_SPI_initialize+0x14>
 8008250:	2301      	movs	r3, #1
 8008252:	e0d6      	b.n	8008402 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008254:	4b6d      	ldr	r3, [pc, #436]	; (800840c <USER_SPI_initialize+0x1cc>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <USER_SPI_initialize+0x2a>
 8008262:	4b6a      	ldr	r3, [pc, #424]	; (800840c <USER_SPI_initialize+0x1cc>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	e0cb      	b.n	8008402 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800826a:	4b69      	ldr	r3, [pc, #420]	; (8008410 <USER_SPI_initialize+0x1d0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008274:	4b66      	ldr	r3, [pc, #408]	; (8008410 <USER_SPI_initialize+0x1d0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800827c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800827e:	230a      	movs	r3, #10
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	e005      	b.n	8008290 <USER_SPI_initialize+0x50>
 8008284:	20ff      	movs	r0, #255	; 0xff
 8008286:	f7ff fe7b 	bl	8007f80 <xchg_spi>
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	3b01      	subs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f6      	bne.n	8008284 <USER_SPI_initialize+0x44>

	ty = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800829a:	2100      	movs	r1, #0
 800829c:	2000      	movs	r0, #0
 800829e:	f7ff ff60 	bl	8008162 <send_cmd>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 808b 	bne.w	80083c0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80082aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082ae:	f7ff fe3d 	bl	8007f2c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80082b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082b6:	2008      	movs	r0, #8
 80082b8:	f7ff ff53 	bl	8008162 <send_cmd>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d151      	bne.n	8008366 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
 80082c6:	e00d      	b.n	80082e4 <USER_SPI_initialize+0xa4>
 80082c8:	7bfc      	ldrb	r4, [r7, #15]
 80082ca:	20ff      	movs	r0, #255	; 0xff
 80082cc:	f7ff fe58 	bl	8007f80 <xchg_spi>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	f104 0310 	add.w	r3, r4, #16
 80082d8:	443b      	add	r3, r7
 80082da:	f803 2c08 	strb.w	r2, [r3, #-8]
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	3301      	adds	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d9ee      	bls.n	80082c8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80082ea:	7abb      	ldrb	r3, [r7, #10]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d167      	bne.n	80083c0 <USER_SPI_initialize+0x180>
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	2baa      	cmp	r3, #170	; 0xaa
 80082f4:	d164      	bne.n	80083c0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80082f6:	bf00      	nop
 80082f8:	f7ff fe2c 	bl	8007f54 <SPI_Timer_Status>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <USER_SPI_initialize+0xd2>
 8008302:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008306:	20a9      	movs	r0, #169	; 0xa9
 8008308:	f7ff ff2b 	bl	8008162 <send_cmd>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f2      	bne.n	80082f8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008312:	f7ff fe1f 	bl	8007f54 <SPI_Timer_Status>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d051      	beq.n	80083c0 <USER_SPI_initialize+0x180>
 800831c:	2100      	movs	r1, #0
 800831e:	203a      	movs	r0, #58	; 0x3a
 8008320:	f7ff ff1f 	bl	8008162 <send_cmd>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d14a      	bne.n	80083c0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	e00d      	b.n	800834c <USER_SPI_initialize+0x10c>
 8008330:	7bfc      	ldrb	r4, [r7, #15]
 8008332:	20ff      	movs	r0, #255	; 0xff
 8008334:	f7ff fe24 	bl	8007f80 <xchg_spi>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	f104 0310 	add.w	r3, r4, #16
 8008340:	443b      	add	r3, r7
 8008342:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	3301      	adds	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d9ee      	bls.n	8008330 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008352:	7a3b      	ldrb	r3, [r7, #8]
 8008354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USER_SPI_initialize+0x120>
 800835c:	230c      	movs	r3, #12
 800835e:	e000      	b.n	8008362 <USER_SPI_initialize+0x122>
 8008360:	2304      	movs	r3, #4
 8008362:	737b      	strb	r3, [r7, #13]
 8008364:	e02c      	b.n	80083c0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008366:	2100      	movs	r1, #0
 8008368:	20a9      	movs	r0, #169	; 0xa9
 800836a:	f7ff fefa 	bl	8008162 <send_cmd>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d804      	bhi.n	800837e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008374:	2302      	movs	r3, #2
 8008376:	737b      	strb	r3, [r7, #13]
 8008378:	23a9      	movs	r3, #169	; 0xa9
 800837a:	73bb      	strb	r3, [r7, #14]
 800837c:	e003      	b.n	8008386 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800837e:	2301      	movs	r3, #1
 8008380:	737b      	strb	r3, [r7, #13]
 8008382:	2301      	movs	r3, #1
 8008384:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008386:	bf00      	nop
 8008388:	f7ff fde4 	bl	8007f54 <SPI_Timer_Status>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <USER_SPI_initialize+0x162>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fee3 	bl	8008162 <send_cmd>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f2      	bne.n	8008388 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80083a2:	f7ff fdd7 	bl	8007f54 <SPI_Timer_Status>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <USER_SPI_initialize+0x17c>
 80083ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083b0:	2010      	movs	r0, #16
 80083b2:	f7ff fed6 	bl	8008162 <send_cmd>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <USER_SPI_initialize+0x180>
				ty = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80083c0:	4a14      	ldr	r2, [pc, #80]	; (8008414 <USER_SPI_initialize+0x1d4>)
 80083c2:	7b7b      	ldrb	r3, [r7, #13]
 80083c4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80083c6:	f7ff fe45 	bl	8008054 <despiselect>

	if (ty) {			/* OK */
 80083ca:	7b7b      	ldrb	r3, [r7, #13]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d012      	beq.n	80083f6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80083d0:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <USER_SPI_initialize+0x1d0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <USER_SPI_initialize+0x1d0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0208 	orr.w	r2, r2, #8
 80083e2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80083e4:	4b09      	ldr	r3, [pc, #36]	; (800840c <USER_SPI_initialize+0x1cc>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <USER_SPI_initialize+0x1cc>)
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e002      	b.n	80083fc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <USER_SPI_initialize+0x1cc>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <USER_SPI_initialize+0x1cc>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	b2db      	uxtb	r3, r3
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	bd90      	pop	{r4, r7, pc}
 800840a:	bf00      	nop
 800840c:	20000020 	.word	0x20000020
 8008410:	200002bc 	.word	0x200002bc
 8008414:	20000790 	.word	0x20000790

08008418 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <USER_SPI_status+0x14>
 8008428:	2301      	movs	r3, #1
 800842a:	e002      	b.n	8008432 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <USER_SPI_status+0x28>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b2db      	uxtb	r3, r3
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000020 	.word	0x20000020

08008444 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <USER_SPI_read+0x1c>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USER_SPI_read+0x20>
 8008460:	2304      	movs	r3, #4
 8008462:	e04d      	b.n	8008500 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008464:	4b28      	ldr	r3, [pc, #160]	; (8008508 <USER_SPI_read+0xc4>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <USER_SPI_read+0x32>
 8008472:	2303      	movs	r3, #3
 8008474:	e044      	b.n	8008500 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008476:	4b25      	ldr	r3, [pc, #148]	; (800850c <USER_SPI_read+0xc8>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 0308 	and.w	r3, r3, #8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <USER_SPI_read+0x44>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	025b      	lsls	r3, r3, #9
 8008486:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d111      	bne.n	80084b2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	2011      	movs	r0, #17
 8008492:	f7ff fe66 	bl	8008162 <send_cmd>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d129      	bne.n	80084f0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800849c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084a0:	68b8      	ldr	r0, [r7, #8]
 80084a2:	f7ff fe03 	bl	80080ac <rcvr_datablock>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d021      	beq.n	80084f0 <USER_SPI_read+0xac>
			count = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	e01e      	b.n	80084f0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	2012      	movs	r0, #18
 80084b6:	f7ff fe54 	bl	8008162 <send_cmd>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d117      	bne.n	80084f0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80084c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084c4:	68b8      	ldr	r0, [r7, #8]
 80084c6:	f7ff fdf1 	bl	80080ac <rcvr_datablock>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <USER_SPI_read+0xa2>
				buff += 512;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084d6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1ed      	bne.n	80084c0 <USER_SPI_read+0x7c>
 80084e4:	e000      	b.n	80084e8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80084e6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80084e8:	2100      	movs	r1, #0
 80084ea:	200c      	movs	r0, #12
 80084ec:	f7ff fe39 	bl	8008162 <send_cmd>
		}
	}
	despiselect();
 80084f0:	f7ff fdb0 	bl	8008054 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf14      	ite	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	2300      	moveq	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000020 	.word	0x20000020
 800850c:	20000790 	.word	0x20000790

08008510 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <USER_SPI_write+0x1c>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <USER_SPI_write+0x20>
 800852c:	2304      	movs	r3, #4
 800852e:	e063      	b.n	80085f8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008530:	4b33      	ldr	r3, [pc, #204]	; (8008600 <USER_SPI_write+0xf0>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <USER_SPI_write+0x32>
 800853e:	2303      	movs	r3, #3
 8008540:	e05a      	b.n	80085f8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <USER_SPI_write+0xf0>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <USER_SPI_write+0x44>
 8008550:	2302      	movs	r3, #2
 8008552:	e051      	b.n	80085f8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008554:	4b2b      	ldr	r3, [pc, #172]	; (8008604 <USER_SPI_write+0xf4>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <USER_SPI_write+0x56>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	025b      	lsls	r3, r3, #9
 8008564:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d110      	bne.n	800858e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	2018      	movs	r0, #24
 8008570:	f7ff fdf7 	bl	8008162 <send_cmd>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d136      	bne.n	80085e8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800857a:	21fe      	movs	r1, #254	; 0xfe
 800857c:	68b8      	ldr	r0, [r7, #8]
 800857e:	f7ff fdbe 	bl	80080fe <xmit_datablock>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d02f      	beq.n	80085e8 <USER_SPI_write+0xd8>
			count = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	e02c      	b.n	80085e8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <USER_SPI_write+0xf4>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 0306 	and.w	r3, r3, #6
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <USER_SPI_write+0x92>
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	2097      	movs	r0, #151	; 0x97
 800859e:	f7ff fde0 	bl	8008162 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	2019      	movs	r0, #25
 80085a6:	f7ff fddc 	bl	8008162 <send_cmd>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11b      	bne.n	80085e8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80085b0:	21fc      	movs	r1, #252	; 0xfc
 80085b2:	68b8      	ldr	r0, [r7, #8]
 80085b4:	f7ff fda3 	bl	80080fe <xmit_datablock>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <USER_SPI_write+0xc4>
				buff += 512;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1ee      	bne.n	80085b0 <USER_SPI_write+0xa0>
 80085d2:	e000      	b.n	80085d6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80085d4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80085d6:	21fd      	movs	r1, #253	; 0xfd
 80085d8:	2000      	movs	r0, #0
 80085da:	f7ff fd90 	bl	80080fe <xmit_datablock>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USER_SPI_write+0xd8>
 80085e4:	2301      	movs	r3, #1
 80085e6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80085e8:	f7ff fd34 	bl	8008054 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bf14      	ite	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	2300      	moveq	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20000020 	.word	0x20000020
 8008604:	20000790 	.word	0x20000790

08008608 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	603a      	str	r2, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
 8008614:	460b      	mov	r3, r1
 8008616:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <USER_SPI_ioctl+0x1a>
 800861e:	2304      	movs	r3, #4
 8008620:	e15a      	b.n	80088d8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008622:	4baf      	ldr	r3, [pc, #700]	; (80088e0 <USER_SPI_ioctl+0x2d8>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <USER_SPI_ioctl+0x2c>
 8008630:	2303      	movs	r3, #3
 8008632:	e151      	b.n	80088d8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800863a:	79bb      	ldrb	r3, [r7, #6]
 800863c:	2b04      	cmp	r3, #4
 800863e:	f200 8136 	bhi.w	80088ae <USER_SPI_ioctl+0x2a6>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <USER_SPI_ioctl+0x40>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	0800865d 	.word	0x0800865d
 800864c:	08008671 	.word	0x08008671
 8008650:	080088af 	.word	0x080088af
 8008654:	0800871d 	.word	0x0800871d
 8008658:	08008813 	.word	0x08008813
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800865c:	f7ff fd0a 	bl	8008074 <spiselect>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8127 	beq.w	80088b6 <USER_SPI_ioctl+0x2ae>
 8008668:	2300      	movs	r3, #0
 800866a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800866e:	e122      	b.n	80088b6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008670:	2100      	movs	r1, #0
 8008672:	2009      	movs	r0, #9
 8008674:	f7ff fd75 	bl	8008162 <send_cmd>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	f040 811d 	bne.w	80088ba <USER_SPI_ioctl+0x2b2>
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	2110      	movs	r1, #16
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fd10 	bl	80080ac <rcvr_datablock>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8113 	beq.w	80088ba <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008694:	7b3b      	ldrb	r3, [r7, #12]
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b01      	cmp	r3, #1
 800869c:	d111      	bne.n	80086c2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800869e:	7d7b      	ldrb	r3, [r7, #21]
 80086a0:	461a      	mov	r2, r3
 80086a2:	7d3b      	ldrb	r3, [r7, #20]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	4413      	add	r3, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	7cfb      	ldrb	r3, [r7, #19]
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80086b2:	4413      	add	r3, r2
 80086b4:	3301      	adds	r3, #1
 80086b6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	029a      	lsls	r2, r3, #10
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e028      	b.n	8008714 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80086c2:	7c7b      	ldrb	r3, [r7, #17]
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	7dbb      	ldrb	r3, [r7, #22]
 80086cc:	09db      	lsrs	r3, r3, #7
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	7d7b      	ldrb	r3, [r7, #21]
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 0306 	and.w	r3, r3, #6
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	3302      	adds	r3, #2
 80086e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80086ea:	7d3b      	ldrb	r3, [r7, #20]
 80086ec:	099b      	lsrs	r3, r3, #6
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	7cfb      	ldrb	r3, [r7, #19]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	7cbb      	ldrb	r3, [r7, #18]
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008700:	4413      	add	r3, r2
 8008702:	3301      	adds	r3, #1
 8008704:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008706:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800870a:	3b09      	subs	r3, #9
 800870c:	69fa      	ldr	r2, [r7, #28]
 800870e:	409a      	lsls	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800871a:	e0ce      	b.n	80088ba <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800871c:	4b71      	ldr	r3, [pc, #452]	; (80088e4 <USER_SPI_ioctl+0x2dc>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d031      	beq.n	800878c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008728:	2100      	movs	r1, #0
 800872a:	208d      	movs	r0, #141	; 0x8d
 800872c:	f7ff fd19 	bl	8008162 <send_cmd>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 80c3 	bne.w	80088be <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008738:	20ff      	movs	r0, #255	; 0xff
 800873a:	f7ff fc21 	bl	8007f80 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	2110      	movs	r1, #16
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fcb1 	bl	80080ac <rcvr_datablock>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80b6 	beq.w	80088be <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008752:	2330      	movs	r3, #48	; 0x30
 8008754:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008758:	e007      	b.n	800876a <USER_SPI_ioctl+0x162>
 800875a:	20ff      	movs	r0, #255	; 0xff
 800875c:	f7ff fc10 	bl	8007f80 <xchg_spi>
 8008760:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008764:	3b01      	subs	r3, #1
 8008766:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800876a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f3      	bne.n	800875a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008772:	7dbb      	ldrb	r3, [r7, #22]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	2310      	movs	r3, #16
 800877c:	fa03 f202 	lsl.w	r2, r3, r2
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800878a:	e098      	b.n	80088be <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800878c:	2100      	movs	r1, #0
 800878e:	2009      	movs	r0, #9
 8008790:	f7ff fce7 	bl	8008162 <send_cmd>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	f040 8091 	bne.w	80088be <USER_SPI_ioctl+0x2b6>
 800879c:	f107 030c 	add.w	r3, r7, #12
 80087a0:	2110      	movs	r1, #16
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fc82 	bl	80080ac <rcvr_datablock>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8087 	beq.w	80088be <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80087b0:	4b4c      	ldr	r3, [pc, #304]	; (80088e4 <USER_SPI_ioctl+0x2dc>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d012      	beq.n	80087e2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80087c4:	7dfa      	ldrb	r2, [r7, #23]
 80087c6:	09d2      	lsrs	r2, r2, #7
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	4413      	add	r3, r2
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	7e7b      	ldrb	r3, [r7, #25]
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	3b01      	subs	r3, #1
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e013      	b.n	800880a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80087e2:	7dbb      	ldrb	r3, [r7, #22]
 80087e4:	109b      	asrs	r3, r3, #2
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	3301      	adds	r3, #1
 80087ee:	7dfa      	ldrb	r2, [r7, #23]
 80087f0:	00d2      	lsls	r2, r2, #3
 80087f2:	f002 0218 	and.w	r2, r2, #24
 80087f6:	7df9      	ldrb	r1, [r7, #23]
 80087f8:	0949      	lsrs	r1, r1, #5
 80087fa:	b2c9      	uxtb	r1, r1
 80087fc:	440a      	add	r2, r1
 80087fe:	3201      	adds	r2, #1
 8008800:	fb02 f303 	mul.w	r3, r2, r3
 8008804:	461a      	mov	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008810:	e055      	b.n	80088be <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008812:	4b34      	ldr	r3, [pc, #208]	; (80088e4 <USER_SPI_ioctl+0x2dc>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 0306 	and.w	r3, r3, #6
 800881a:	2b00      	cmp	r3, #0
 800881c:	d051      	beq.n	80088c2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800881e:	f107 020c 	add.w	r2, r7, #12
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	210b      	movs	r1, #11
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff feee 	bl	8008608 <USER_SPI_ioctl>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d149      	bne.n	80088c6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008832:	7b3b      	ldrb	r3, [r7, #12]
 8008834:	099b      	lsrs	r3, r3, #6
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <USER_SPI_ioctl+0x23e>
 800883c:	7dbb      	ldrb	r3, [r7, #22]
 800883e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d041      	beq.n	80088ca <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	623b      	str	r3, [r7, #32]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008856:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <USER_SPI_ioctl+0x2dc>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f003 0308 	and.w	r3, r3, #8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	025b      	lsls	r3, r3, #9
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	025b      	lsls	r3, r3, #9
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800886e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008870:	2020      	movs	r0, #32
 8008872:	f7ff fc76 	bl	8008162 <send_cmd>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d128      	bne.n	80088ce <USER_SPI_ioctl+0x2c6>
 800887c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887e:	2021      	movs	r0, #33	; 0x21
 8008880:	f7ff fc6f 	bl	8008162 <send_cmd>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d121      	bne.n	80088ce <USER_SPI_ioctl+0x2c6>
 800888a:	2100      	movs	r1, #0
 800888c:	2026      	movs	r0, #38	; 0x26
 800888e:	f7ff fc68 	bl	8008162 <send_cmd>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11a      	bne.n	80088ce <USER_SPI_ioctl+0x2c6>
 8008898:	f247 5030 	movw	r0, #30000	; 0x7530
 800889c:	f7ff fbb6 	bl	800800c <wait_ready>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80088a6:	2300      	movs	r3, #0
 80088a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80088ac:	e00f      	b.n	80088ce <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80088ae:	2304      	movs	r3, #4
 80088b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088b4:	e00c      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		break;
 80088b6:	bf00      	nop
 80088b8:	e00a      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		break;
 80088ba:	bf00      	nop
 80088bc:	e008      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		break;
 80088be:	bf00      	nop
 80088c0:	e006      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <USER_SPI_ioctl+0x2c8>
		break;
 80088ce:	bf00      	nop
	}

	despiselect();
 80088d0:	f7ff fbc0 	bl	8008054 <despiselect>

	return res;
 80088d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3730      	adds	r7, #48	; 0x30
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000020 	.word	0x20000020
 80088e4:	20000790 	.word	0x20000790

080088e8 <siprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b500      	push	{lr}
 80088ec:	b09c      	sub	sp, #112	; 0x70
 80088ee:	ab1d      	add	r3, sp, #116	; 0x74
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9006      	str	r0, [sp, #24]
 80088f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f8:	4809      	ldr	r0, [pc, #36]	; (8008920 <siprintf+0x38>)
 80088fa:	9107      	str	r1, [sp, #28]
 80088fc:	9104      	str	r1, [sp, #16]
 80088fe:	4909      	ldr	r1, [pc, #36]	; (8008924 <siprintf+0x3c>)
 8008900:	f853 2b04 	ldr.w	r2, [r3], #4
 8008904:	9105      	str	r1, [sp, #20]
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	a902      	add	r1, sp, #8
 800890c:	f000 f992 	bl	8008c34 <_svfiprintf_r>
 8008910:	9b02      	ldr	r3, [sp, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	b01c      	add	sp, #112	; 0x70
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	20000070 	.word	0x20000070
 8008924:	ffff0208 	.word	0xffff0208

08008928 <memset>:
 8008928:	4402      	add	r2, r0
 800892a:	4603      	mov	r3, r0
 800892c:	4293      	cmp	r3, r2
 800892e:	d100      	bne.n	8008932 <memset+0xa>
 8008930:	4770      	bx	lr
 8008932:	f803 1b01 	strb.w	r1, [r3], #1
 8008936:	e7f9      	b.n	800892c <memset+0x4>

08008938 <__errno>:
 8008938:	4b01      	ldr	r3, [pc, #4]	; (8008940 <__errno+0x8>)
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000070 	.word	0x20000070

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4d0d      	ldr	r5, [pc, #52]	; (800897c <__libc_init_array+0x38>)
 8008948:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	2600      	movs	r6, #0
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	4d0b      	ldr	r5, [pc, #44]	; (8008984 <__libc_init_array+0x40>)
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <__libc_init_array+0x44>)
 8008958:	f000 fc6a 	bl	8009230 <_init>
 800895c:	1b64      	subs	r4, r4, r5
 800895e:	10a4      	asrs	r4, r4, #2
 8008960:	2600      	movs	r6, #0
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	08009580 	.word	0x08009580
 8008980:	08009580 	.word	0x08009580
 8008984:	08009580 	.word	0x08009580
 8008988:	08009584 	.word	0x08009584

0800898c <__retarget_lock_acquire_recursive>:
 800898c:	4770      	bx	lr

0800898e <__retarget_lock_release_recursive>:
 800898e:	4770      	bx	lr

08008990 <_free_r>:
 8008990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008992:	2900      	cmp	r1, #0
 8008994:	d044      	beq.n	8008a20 <_free_r+0x90>
 8008996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899a:	9001      	str	r0, [sp, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f1a1 0404 	sub.w	r4, r1, #4
 80089a2:	bfb8      	it	lt
 80089a4:	18e4      	addlt	r4, r4, r3
 80089a6:	f000 f8df 	bl	8008b68 <__malloc_lock>
 80089aa:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <_free_r+0x94>)
 80089ac:	9801      	ldr	r0, [sp, #4]
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	b933      	cbnz	r3, 80089c0 <_free_r+0x30>
 80089b2:	6063      	str	r3, [r4, #4]
 80089b4:	6014      	str	r4, [r2, #0]
 80089b6:	b003      	add	sp, #12
 80089b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089bc:	f000 b8da 	b.w	8008b74 <__malloc_unlock>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d908      	bls.n	80089d6 <_free_r+0x46>
 80089c4:	6825      	ldr	r5, [r4, #0]
 80089c6:	1961      	adds	r1, r4, r5
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf01      	itttt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	1949      	addeq	r1, r1, r5
 80089d2:	6021      	streq	r1, [r4, #0]
 80089d4:	e7ed      	b.n	80089b2 <_free_r+0x22>
 80089d6:	461a      	mov	r2, r3
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b10b      	cbz	r3, 80089e0 <_free_r+0x50>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d9fa      	bls.n	80089d6 <_free_r+0x46>
 80089e0:	6811      	ldr	r1, [r2, #0]
 80089e2:	1855      	adds	r5, r2, r1
 80089e4:	42a5      	cmp	r5, r4
 80089e6:	d10b      	bne.n	8008a00 <_free_r+0x70>
 80089e8:	6824      	ldr	r4, [r4, #0]
 80089ea:	4421      	add	r1, r4
 80089ec:	1854      	adds	r4, r2, r1
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	6011      	str	r1, [r2, #0]
 80089f2:	d1e0      	bne.n	80089b6 <_free_r+0x26>
 80089f4:	681c      	ldr	r4, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	6053      	str	r3, [r2, #4]
 80089fa:	440c      	add	r4, r1
 80089fc:	6014      	str	r4, [r2, #0]
 80089fe:	e7da      	b.n	80089b6 <_free_r+0x26>
 8008a00:	d902      	bls.n	8008a08 <_free_r+0x78>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	e7d6      	b.n	80089b6 <_free_r+0x26>
 8008a08:	6825      	ldr	r5, [r4, #0]
 8008a0a:	1961      	adds	r1, r4, r5
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf04      	itt	eq
 8008a10:	6819      	ldreq	r1, [r3, #0]
 8008a12:	685b      	ldreq	r3, [r3, #4]
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	bf04      	itt	eq
 8008a18:	1949      	addeq	r1, r1, r5
 8008a1a:	6021      	streq	r1, [r4, #0]
 8008a1c:	6054      	str	r4, [r2, #4]
 8008a1e:	e7ca      	b.n	80089b6 <_free_r+0x26>
 8008a20:	b003      	add	sp, #12
 8008a22:	bd30      	pop	{r4, r5, pc}
 8008a24:	200008dc 	.word	0x200008dc

08008a28 <sbrk_aligned>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4e0e      	ldr	r6, [pc, #56]	; (8008a64 <sbrk_aligned+0x3c>)
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	6831      	ldr	r1, [r6, #0]
 8008a30:	4605      	mov	r5, r0
 8008a32:	b911      	cbnz	r1, 8008a3a <sbrk_aligned+0x12>
 8008a34:	f000 fba6 	bl	8009184 <_sbrk_r>
 8008a38:	6030      	str	r0, [r6, #0]
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 fba1 	bl	8009184 <_sbrk_r>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d00a      	beq.n	8008a5c <sbrk_aligned+0x34>
 8008a46:	1cc4      	adds	r4, r0, #3
 8008a48:	f024 0403 	bic.w	r4, r4, #3
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d007      	beq.n	8008a60 <sbrk_aligned+0x38>
 8008a50:	1a21      	subs	r1, r4, r0
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 fb96 	bl	8009184 <_sbrk_r>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d101      	bne.n	8008a60 <sbrk_aligned+0x38>
 8008a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a60:	4620      	mov	r0, r4
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	200008e0 	.word	0x200008e0

08008a68 <_malloc_r>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	1ccd      	adds	r5, r1, #3
 8008a6e:	f025 0503 	bic.w	r5, r5, #3
 8008a72:	3508      	adds	r5, #8
 8008a74:	2d0c      	cmp	r5, #12
 8008a76:	bf38      	it	cc
 8008a78:	250c      	movcc	r5, #12
 8008a7a:	2d00      	cmp	r5, #0
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	db01      	blt.n	8008a84 <_malloc_r+0x1c>
 8008a80:	42a9      	cmp	r1, r5
 8008a82:	d905      	bls.n	8008a90 <_malloc_r+0x28>
 8008a84:	230c      	movs	r3, #12
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	2600      	movs	r6, #0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b64 <_malloc_r+0xfc>
 8008a94:	f000 f868 	bl	8008b68 <__malloc_lock>
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	461c      	mov	r4, r3
 8008a9e:	bb5c      	cbnz	r4, 8008af8 <_malloc_r+0x90>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7ff ffc0 	bl	8008a28 <sbrk_aligned>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	4604      	mov	r4, r0
 8008aac:	d155      	bne.n	8008b5a <_malloc_r+0xf2>
 8008aae:	f8d8 4000 	ldr.w	r4, [r8]
 8008ab2:	4626      	mov	r6, r4
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	d145      	bne.n	8008b44 <_malloc_r+0xdc>
 8008ab8:	2c00      	cmp	r4, #0
 8008aba:	d048      	beq.n	8008b4e <_malloc_r+0xe6>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	eb04 0903 	add.w	r9, r4, r3
 8008ac6:	f000 fb5d 	bl	8009184 <_sbrk_r>
 8008aca:	4581      	cmp	r9, r0
 8008acc:	d13f      	bne.n	8008b4e <_malloc_r+0xe6>
 8008ace:	6821      	ldr	r1, [r4, #0]
 8008ad0:	1a6d      	subs	r5, r5, r1
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ffa7 	bl	8008a28 <sbrk_aligned>
 8008ada:	3001      	adds	r0, #1
 8008adc:	d037      	beq.n	8008b4e <_malloc_r+0xe6>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	442b      	add	r3, r5
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d038      	beq.n	8008b5e <_malloc_r+0xf6>
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	42a2      	cmp	r2, r4
 8008af0:	d12b      	bne.n	8008b4a <_malloc_r+0xe2>
 8008af2:	2200      	movs	r2, #0
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	e00f      	b.n	8008b18 <_malloc_r+0xb0>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	1b52      	subs	r2, r2, r5
 8008afc:	d41f      	bmi.n	8008b3e <_malloc_r+0xd6>
 8008afe:	2a0b      	cmp	r2, #11
 8008b00:	d917      	bls.n	8008b32 <_malloc_r+0xca>
 8008b02:	1961      	adds	r1, r4, r5
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	6025      	str	r5, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	6059      	strne	r1, [r3, #4]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	bf08      	it	eq
 8008b10:	f8c8 1000 	streq.w	r1, [r8]
 8008b14:	5162      	str	r2, [r4, r5]
 8008b16:	604b      	str	r3, [r1, #4]
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f104 060b 	add.w	r6, r4, #11
 8008b1e:	f000 f829 	bl	8008b74 <__malloc_unlock>
 8008b22:	f026 0607 	bic.w	r6, r6, #7
 8008b26:	1d23      	adds	r3, r4, #4
 8008b28:	1af2      	subs	r2, r6, r3
 8008b2a:	d0ae      	beq.n	8008a8a <_malloc_r+0x22>
 8008b2c:	1b9b      	subs	r3, r3, r6
 8008b2e:	50a3      	str	r3, [r4, r2]
 8008b30:	e7ab      	b.n	8008a8a <_malloc_r+0x22>
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	6862      	ldr	r2, [r4, #4]
 8008b36:	d1dd      	bne.n	8008af4 <_malloc_r+0x8c>
 8008b38:	f8c8 2000 	str.w	r2, [r8]
 8008b3c:	e7ec      	b.n	8008b18 <_malloc_r+0xb0>
 8008b3e:	4623      	mov	r3, r4
 8008b40:	6864      	ldr	r4, [r4, #4]
 8008b42:	e7ac      	b.n	8008a9e <_malloc_r+0x36>
 8008b44:	4634      	mov	r4, r6
 8008b46:	6876      	ldr	r6, [r6, #4]
 8008b48:	e7b4      	b.n	8008ab4 <_malloc_r+0x4c>
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	e7cc      	b.n	8008ae8 <_malloc_r+0x80>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4638      	mov	r0, r7
 8008b54:	f000 f80e 	bl	8008b74 <__malloc_unlock>
 8008b58:	e797      	b.n	8008a8a <_malloc_r+0x22>
 8008b5a:	6025      	str	r5, [r4, #0]
 8008b5c:	e7dc      	b.n	8008b18 <_malloc_r+0xb0>
 8008b5e:	605b      	str	r3, [r3, #4]
 8008b60:	deff      	udf	#255	; 0xff
 8008b62:	bf00      	nop
 8008b64:	200008dc 	.word	0x200008dc

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7ff bf0f 	b.w	800898c <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	200008d8 	.word	0x200008d8

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7ff bf0a 	b.w	800898e <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	200008d8 	.word	0x200008d8

08008b80 <__ssputs_r>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	688e      	ldr	r6, [r1, #8]
 8008b86:	461f      	mov	r7, r3
 8008b88:	42be      	cmp	r6, r7
 8008b8a:	680b      	ldr	r3, [r1, #0]
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4690      	mov	r8, r2
 8008b92:	d82c      	bhi.n	8008bee <__ssputs_r+0x6e>
 8008b94:	898a      	ldrh	r2, [r1, #12]
 8008b96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b9a:	d026      	beq.n	8008bea <__ssputs_r+0x6a>
 8008b9c:	6965      	ldr	r5, [r4, #20]
 8008b9e:	6909      	ldr	r1, [r1, #16]
 8008ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ba4:	eba3 0901 	sub.w	r9, r3, r1
 8008ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bac:	1c7b      	adds	r3, r7, #1
 8008bae:	444b      	add	r3, r9
 8008bb0:	106d      	asrs	r5, r5, #1
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	bf38      	it	cc
 8008bb6:	461d      	movcc	r5, r3
 8008bb8:	0553      	lsls	r3, r2, #21
 8008bba:	d527      	bpl.n	8008c0c <__ssputs_r+0x8c>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7ff ff53 	bl	8008a68 <_malloc_r>
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	b360      	cbz	r0, 8008c20 <__ssputs_r+0xa0>
 8008bc6:	6921      	ldr	r1, [r4, #16]
 8008bc8:	464a      	mov	r2, r9
 8008bca:	f000 faeb 	bl	80091a4 <memcpy>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	6126      	str	r6, [r4, #16]
 8008bdc:	6165      	str	r5, [r4, #20]
 8008bde:	444e      	add	r6, r9
 8008be0:	eba5 0509 	sub.w	r5, r5, r9
 8008be4:	6026      	str	r6, [r4, #0]
 8008be6:	60a5      	str	r5, [r4, #8]
 8008be8:	463e      	mov	r6, r7
 8008bea:	42be      	cmp	r6, r7
 8008bec:	d900      	bls.n	8008bf0 <__ssputs_r+0x70>
 8008bee:	463e      	mov	r6, r7
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	f000 faab 	bl	8009150 <memmove>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	1b9b      	subs	r3, r3, r6
 8008bfe:	60a3      	str	r3, [r4, #8]
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	4433      	add	r3, r6
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	2000      	movs	r0, #0
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	f000 fad7 	bl	80091c0 <_realloc_r>
 8008c12:	4606      	mov	r6, r0
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1e0      	bne.n	8008bda <__ssputs_r+0x5a>
 8008c18:	6921      	ldr	r1, [r4, #16]
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f7ff feb8 	bl	8008990 <_free_r>
 8008c20:	230c      	movs	r3, #12
 8008c22:	f8ca 3000 	str.w	r3, [sl]
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c32:	e7e9      	b.n	8008c08 <__ssputs_r+0x88>

08008c34 <_svfiprintf_r>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	4698      	mov	r8, r3
 8008c3a:	898b      	ldrh	r3, [r1, #12]
 8008c3c:	061b      	lsls	r3, r3, #24
 8008c3e:	b09d      	sub	sp, #116	; 0x74
 8008c40:	4607      	mov	r7, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	d50e      	bpl.n	8008c66 <_svfiprintf_r+0x32>
 8008c48:	690b      	ldr	r3, [r1, #16]
 8008c4a:	b963      	cbnz	r3, 8008c66 <_svfiprintf_r+0x32>
 8008c4c:	2140      	movs	r1, #64	; 0x40
 8008c4e:	f7ff ff0b 	bl	8008a68 <_malloc_r>
 8008c52:	6028      	str	r0, [r5, #0]
 8008c54:	6128      	str	r0, [r5, #16]
 8008c56:	b920      	cbnz	r0, 8008c62 <_svfiprintf_r+0x2e>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e0d0      	b.n	8008e04 <_svfiprintf_r+0x1d0>
 8008c62:	2340      	movs	r3, #64	; 0x40
 8008c64:	616b      	str	r3, [r5, #20]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6a:	2320      	movs	r3, #32
 8008c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c74:	2330      	movs	r3, #48	; 0x30
 8008c76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e1c <_svfiprintf_r+0x1e8>
 8008c7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c7e:	f04f 0901 	mov.w	r9, #1
 8008c82:	4623      	mov	r3, r4
 8008c84:	469a      	mov	sl, r3
 8008c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8a:	b10a      	cbz	r2, 8008c90 <_svfiprintf_r+0x5c>
 8008c8c:	2a25      	cmp	r2, #37	; 0x25
 8008c8e:	d1f9      	bne.n	8008c84 <_svfiprintf_r+0x50>
 8008c90:	ebba 0b04 	subs.w	fp, sl, r4
 8008c94:	d00b      	beq.n	8008cae <_svfiprintf_r+0x7a>
 8008c96:	465b      	mov	r3, fp
 8008c98:	4622      	mov	r2, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f7ff ff6f 	bl	8008b80 <__ssputs_r>
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f000 80a9 	beq.w	8008dfa <_svfiprintf_r+0x1c6>
 8008ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008caa:	445a      	add	r2, fp
 8008cac:	9209      	str	r2, [sp, #36]	; 0x24
 8008cae:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80a1 	beq.w	8008dfa <_svfiprintf_r+0x1c6>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cc2:	f10a 0a01 	add.w	sl, sl, #1
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cce:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd0:	4654      	mov	r4, sl
 8008cd2:	2205      	movs	r2, #5
 8008cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd8:	4850      	ldr	r0, [pc, #320]	; (8008e1c <_svfiprintf_r+0x1e8>)
 8008cda:	f7f7 fa81 	bl	80001e0 <memchr>
 8008cde:	9a04      	ldr	r2, [sp, #16]
 8008ce0:	b9d8      	cbnz	r0, 8008d1a <_svfiprintf_r+0xe6>
 8008ce2:	06d0      	lsls	r0, r2, #27
 8008ce4:	bf44      	itt	mi
 8008ce6:	2320      	movmi	r3, #32
 8008ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cec:	0711      	lsls	r1, r2, #28
 8008cee:	bf44      	itt	mi
 8008cf0:	232b      	movmi	r3, #43	; 0x2b
 8008cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8008cfc:	d015      	beq.n	8008d2a <_svfiprintf_r+0xf6>
 8008cfe:	9a07      	ldr	r2, [sp, #28]
 8008d00:	4654      	mov	r4, sl
 8008d02:	2000      	movs	r0, #0
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d0e:	3b30      	subs	r3, #48	; 0x30
 8008d10:	2b09      	cmp	r3, #9
 8008d12:	d94d      	bls.n	8008db0 <_svfiprintf_r+0x17c>
 8008d14:	b1b0      	cbz	r0, 8008d44 <_svfiprintf_r+0x110>
 8008d16:	9207      	str	r2, [sp, #28]
 8008d18:	e014      	b.n	8008d44 <_svfiprintf_r+0x110>
 8008d1a:	eba0 0308 	sub.w	r3, r0, r8
 8008d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d22:	4313      	orrs	r3, r2
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	46a2      	mov	sl, r4
 8008d28:	e7d2      	b.n	8008cd0 <_svfiprintf_r+0x9c>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	1d19      	adds	r1, r3, #4
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	9103      	str	r1, [sp, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bfbb      	ittet	lt
 8008d36:	425b      	neglt	r3, r3
 8008d38:	f042 0202 	orrlt.w	r2, r2, #2
 8008d3c:	9307      	strge	r3, [sp, #28]
 8008d3e:	9307      	strlt	r3, [sp, #28]
 8008d40:	bfb8      	it	lt
 8008d42:	9204      	strlt	r2, [sp, #16]
 8008d44:	7823      	ldrb	r3, [r4, #0]
 8008d46:	2b2e      	cmp	r3, #46	; 0x2e
 8008d48:	d10c      	bne.n	8008d64 <_svfiprintf_r+0x130>
 8008d4a:	7863      	ldrb	r3, [r4, #1]
 8008d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d4e:	d134      	bne.n	8008dba <_svfiprintf_r+0x186>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	9203      	str	r2, [sp, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfb8      	it	lt
 8008d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d60:	3402      	adds	r4, #2
 8008d62:	9305      	str	r3, [sp, #20]
 8008d64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e2c <_svfiprintf_r+0x1f8>
 8008d68:	7821      	ldrb	r1, [r4, #0]
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	4650      	mov	r0, sl
 8008d6e:	f7f7 fa37 	bl	80001e0 <memchr>
 8008d72:	b138      	cbz	r0, 8008d84 <_svfiprintf_r+0x150>
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	eba0 000a 	sub.w	r0, r0, sl
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	4082      	lsls	r2, r0
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	3401      	adds	r4, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d88:	4825      	ldr	r0, [pc, #148]	; (8008e20 <_svfiprintf_r+0x1ec>)
 8008d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d8e:	2206      	movs	r2, #6
 8008d90:	f7f7 fa26 	bl	80001e0 <memchr>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d038      	beq.n	8008e0a <_svfiprintf_r+0x1d6>
 8008d98:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <_svfiprintf_r+0x1f0>)
 8008d9a:	bb1b      	cbnz	r3, 8008de4 <_svfiprintf_r+0x1b0>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	3307      	adds	r3, #7
 8008da0:	f023 0307 	bic.w	r3, r3, #7
 8008da4:	3308      	adds	r3, #8
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008daa:	4433      	add	r3, r6
 8008dac:	9309      	str	r3, [sp, #36]	; 0x24
 8008dae:	e768      	b.n	8008c82 <_svfiprintf_r+0x4e>
 8008db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008db4:	460c      	mov	r4, r1
 8008db6:	2001      	movs	r0, #1
 8008db8:	e7a6      	b.n	8008d08 <_svfiprintf_r+0xd4>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	3401      	adds	r4, #1
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f04f 0c0a 	mov.w	ip, #10
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dcc:	3a30      	subs	r2, #48	; 0x30
 8008dce:	2a09      	cmp	r2, #9
 8008dd0:	d903      	bls.n	8008dda <_svfiprintf_r+0x1a6>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0c6      	beq.n	8008d64 <_svfiprintf_r+0x130>
 8008dd6:	9105      	str	r1, [sp, #20]
 8008dd8:	e7c4      	b.n	8008d64 <_svfiprintf_r+0x130>
 8008dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dde:	4604      	mov	r4, r0
 8008de0:	2301      	movs	r3, #1
 8008de2:	e7f0      	b.n	8008dc6 <_svfiprintf_r+0x192>
 8008de4:	ab03      	add	r3, sp, #12
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	462a      	mov	r2, r5
 8008dea:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <_svfiprintf_r+0x1f4>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4638      	mov	r0, r7
 8008df0:	f3af 8000 	nop.w
 8008df4:	1c42      	adds	r2, r0, #1
 8008df6:	4606      	mov	r6, r0
 8008df8:	d1d6      	bne.n	8008da8 <_svfiprintf_r+0x174>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	065b      	lsls	r3, r3, #25
 8008dfe:	f53f af2d 	bmi.w	8008c5c <_svfiprintf_r+0x28>
 8008e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e04:	b01d      	add	sp, #116	; 0x74
 8008e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <_svfiprintf_r+0x1f4>)
 8008e12:	a904      	add	r1, sp, #16
 8008e14:	4638      	mov	r0, r7
 8008e16:	f000 f879 	bl	8008f0c <_printf_i>
 8008e1a:	e7eb      	b.n	8008df4 <_svfiprintf_r+0x1c0>
 8008e1c:	08009544 	.word	0x08009544
 8008e20:	0800954e 	.word	0x0800954e
 8008e24:	00000000 	.word	0x00000000
 8008e28:	08008b81 	.word	0x08008b81
 8008e2c:	0800954a 	.word	0x0800954a

08008e30 <_printf_common>:
 8008e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	4616      	mov	r6, r2
 8008e36:	4699      	mov	r9, r3
 8008e38:	688a      	ldr	r2, [r1, #8]
 8008e3a:	690b      	ldr	r3, [r1, #16]
 8008e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bfb8      	it	lt
 8008e44:	4613      	movlt	r3, r2
 8008e46:	6033      	str	r3, [r6, #0]
 8008e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b10a      	cbz	r2, 8008e56 <_printf_common+0x26>
 8008e52:	3301      	adds	r3, #1
 8008e54:	6033      	str	r3, [r6, #0]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	0699      	lsls	r1, r3, #26
 8008e5a:	bf42      	ittt	mi
 8008e5c:	6833      	ldrmi	r3, [r6, #0]
 8008e5e:	3302      	addmi	r3, #2
 8008e60:	6033      	strmi	r3, [r6, #0]
 8008e62:	6825      	ldr	r5, [r4, #0]
 8008e64:	f015 0506 	ands.w	r5, r5, #6
 8008e68:	d106      	bne.n	8008e78 <_printf_common+0x48>
 8008e6a:	f104 0a19 	add.w	sl, r4, #25
 8008e6e:	68e3      	ldr	r3, [r4, #12]
 8008e70:	6832      	ldr	r2, [r6, #0]
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	42ab      	cmp	r3, r5
 8008e76:	dc26      	bgt.n	8008ec6 <_printf_common+0x96>
 8008e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e7c:	1e13      	subs	r3, r2, #0
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	bf18      	it	ne
 8008e82:	2301      	movne	r3, #1
 8008e84:	0692      	lsls	r2, r2, #26
 8008e86:	d42b      	bmi.n	8008ee0 <_printf_common+0xb0>
 8008e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	4638      	mov	r0, r7
 8008e90:	47c0      	blx	r8
 8008e92:	3001      	adds	r0, #1
 8008e94:	d01e      	beq.n	8008ed4 <_printf_common+0xa4>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	6922      	ldr	r2, [r4, #16]
 8008e9a:	f003 0306 	and.w	r3, r3, #6
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	bf02      	ittt	eq
 8008ea2:	68e5      	ldreq	r5, [r4, #12]
 8008ea4:	6833      	ldreq	r3, [r6, #0]
 8008ea6:	1aed      	subeq	r5, r5, r3
 8008ea8:	68a3      	ldr	r3, [r4, #8]
 8008eaa:	bf0c      	ite	eq
 8008eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb0:	2500      	movne	r5, #0
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	bfc4      	itt	gt
 8008eb6:	1a9b      	subgt	r3, r3, r2
 8008eb8:	18ed      	addgt	r5, r5, r3
 8008eba:	2600      	movs	r6, #0
 8008ebc:	341a      	adds	r4, #26
 8008ebe:	42b5      	cmp	r5, r6
 8008ec0:	d11a      	bne.n	8008ef8 <_printf_common+0xc8>
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	e008      	b.n	8008ed8 <_printf_common+0xa8>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4652      	mov	r2, sl
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4638      	mov	r0, r7
 8008ece:	47c0      	blx	r8
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d103      	bne.n	8008edc <_printf_common+0xac>
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	3501      	adds	r5, #1
 8008ede:	e7c6      	b.n	8008e6e <_printf_common+0x3e>
 8008ee0:	18e1      	adds	r1, r4, r3
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	2030      	movs	r0, #48	; 0x30
 8008ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eea:	4422      	add	r2, r4
 8008eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	e7c7      	b.n	8008e88 <_printf_common+0x58>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4622      	mov	r2, r4
 8008efc:	4649      	mov	r1, r9
 8008efe:	4638      	mov	r0, r7
 8008f00:	47c0      	blx	r8
 8008f02:	3001      	adds	r0, #1
 8008f04:	d0e6      	beq.n	8008ed4 <_printf_common+0xa4>
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7d9      	b.n	8008ebe <_printf_common+0x8e>
	...

08008f0c <_printf_i>:
 8008f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	7e0f      	ldrb	r7, [r1, #24]
 8008f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f14:	2f78      	cmp	r7, #120	; 0x78
 8008f16:	4691      	mov	r9, r2
 8008f18:	4680      	mov	r8, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	469a      	mov	sl, r3
 8008f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f22:	d807      	bhi.n	8008f34 <_printf_i+0x28>
 8008f24:	2f62      	cmp	r7, #98	; 0x62
 8008f26:	d80a      	bhi.n	8008f3e <_printf_i+0x32>
 8008f28:	2f00      	cmp	r7, #0
 8008f2a:	f000 80d4 	beq.w	80090d6 <_printf_i+0x1ca>
 8008f2e:	2f58      	cmp	r7, #88	; 0x58
 8008f30:	f000 80c0 	beq.w	80090b4 <_printf_i+0x1a8>
 8008f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f3c:	e03a      	b.n	8008fb4 <_printf_i+0xa8>
 8008f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f42:	2b15      	cmp	r3, #21
 8008f44:	d8f6      	bhi.n	8008f34 <_printf_i+0x28>
 8008f46:	a101      	add	r1, pc, #4	; (adr r1, 8008f4c <_printf_i+0x40>)
 8008f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f4c:	08008fa5 	.word	0x08008fa5
 8008f50:	08008fb9 	.word	0x08008fb9
 8008f54:	08008f35 	.word	0x08008f35
 8008f58:	08008f35 	.word	0x08008f35
 8008f5c:	08008f35 	.word	0x08008f35
 8008f60:	08008f35 	.word	0x08008f35
 8008f64:	08008fb9 	.word	0x08008fb9
 8008f68:	08008f35 	.word	0x08008f35
 8008f6c:	08008f35 	.word	0x08008f35
 8008f70:	08008f35 	.word	0x08008f35
 8008f74:	08008f35 	.word	0x08008f35
 8008f78:	080090bd 	.word	0x080090bd
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08009077 	.word	0x08009077
 8008f84:	08008f35 	.word	0x08008f35
 8008f88:	08008f35 	.word	0x08008f35
 8008f8c:	080090df 	.word	0x080090df
 8008f90:	08008f35 	.word	0x08008f35
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008f35 	.word	0x08008f35
 8008f9c:	08008f35 	.word	0x08008f35
 8008fa0:	0800907f 	.word	0x0800907f
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e09f      	b.n	80090f8 <_printf_i+0x1ec>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	0607      	lsls	r7, r0, #24
 8008fbe:	f103 0104 	add.w	r1, r3, #4
 8008fc2:	6029      	str	r1, [r5, #0]
 8008fc4:	d501      	bpl.n	8008fca <_printf_i+0xbe>
 8008fc6:	681e      	ldr	r6, [r3, #0]
 8008fc8:	e003      	b.n	8008fd2 <_printf_i+0xc6>
 8008fca:	0646      	lsls	r6, r0, #25
 8008fcc:	d5fb      	bpl.n	8008fc6 <_printf_i+0xba>
 8008fce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	da03      	bge.n	8008fde <_printf_i+0xd2>
 8008fd6:	232d      	movs	r3, #45	; 0x2d
 8008fd8:	4276      	negs	r6, r6
 8008fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fde:	485a      	ldr	r0, [pc, #360]	; (8009148 <_printf_i+0x23c>)
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	e012      	b.n	800900a <_printf_i+0xfe>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	6029      	str	r1, [r5, #0]
 8008fec:	0605      	lsls	r5, r0, #24
 8008fee:	d501      	bpl.n	8008ff4 <_printf_i+0xe8>
 8008ff0:	681e      	ldr	r6, [r3, #0]
 8008ff2:	e002      	b.n	8008ffa <_printf_i+0xee>
 8008ff4:	0641      	lsls	r1, r0, #25
 8008ff6:	d5fb      	bpl.n	8008ff0 <_printf_i+0xe4>
 8008ff8:	881e      	ldrh	r6, [r3, #0]
 8008ffa:	4853      	ldr	r0, [pc, #332]	; (8009148 <_printf_i+0x23c>)
 8008ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8008ffe:	bf0c      	ite	eq
 8009000:	2308      	moveq	r3, #8
 8009002:	230a      	movne	r3, #10
 8009004:	2100      	movs	r1, #0
 8009006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800900a:	6865      	ldr	r5, [r4, #4]
 800900c:	60a5      	str	r5, [r4, #8]
 800900e:	2d00      	cmp	r5, #0
 8009010:	bfa2      	ittt	ge
 8009012:	6821      	ldrge	r1, [r4, #0]
 8009014:	f021 0104 	bicge.w	r1, r1, #4
 8009018:	6021      	strge	r1, [r4, #0]
 800901a:	b90e      	cbnz	r6, 8009020 <_printf_i+0x114>
 800901c:	2d00      	cmp	r5, #0
 800901e:	d04b      	beq.n	80090b8 <_printf_i+0x1ac>
 8009020:	4615      	mov	r5, r2
 8009022:	fbb6 f1f3 	udiv	r1, r6, r3
 8009026:	fb03 6711 	mls	r7, r3, r1, r6
 800902a:	5dc7      	ldrb	r7, [r0, r7]
 800902c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009030:	4637      	mov	r7, r6
 8009032:	42bb      	cmp	r3, r7
 8009034:	460e      	mov	r6, r1
 8009036:	d9f4      	bls.n	8009022 <_printf_i+0x116>
 8009038:	2b08      	cmp	r3, #8
 800903a:	d10b      	bne.n	8009054 <_printf_i+0x148>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	07de      	lsls	r6, r3, #31
 8009040:	d508      	bpl.n	8009054 <_printf_i+0x148>
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	6861      	ldr	r1, [r4, #4]
 8009046:	4299      	cmp	r1, r3
 8009048:	bfde      	ittt	le
 800904a:	2330      	movle	r3, #48	; 0x30
 800904c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009054:	1b52      	subs	r2, r2, r5
 8009056:	6122      	str	r2, [r4, #16]
 8009058:	f8cd a000 	str.w	sl, [sp]
 800905c:	464b      	mov	r3, r9
 800905e:	aa03      	add	r2, sp, #12
 8009060:	4621      	mov	r1, r4
 8009062:	4640      	mov	r0, r8
 8009064:	f7ff fee4 	bl	8008e30 <_printf_common>
 8009068:	3001      	adds	r0, #1
 800906a:	d14a      	bne.n	8009102 <_printf_i+0x1f6>
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	b004      	add	sp, #16
 8009072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	f043 0320 	orr.w	r3, r3, #32
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	4833      	ldr	r0, [pc, #204]	; (800914c <_printf_i+0x240>)
 8009080:	2778      	movs	r7, #120	; 0x78
 8009082:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	6829      	ldr	r1, [r5, #0]
 800908a:	061f      	lsls	r7, r3, #24
 800908c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009090:	d402      	bmi.n	8009098 <_printf_i+0x18c>
 8009092:	065f      	lsls	r7, r3, #25
 8009094:	bf48      	it	mi
 8009096:	b2b6      	uxthmi	r6, r6
 8009098:	07df      	lsls	r7, r3, #31
 800909a:	bf48      	it	mi
 800909c:	f043 0320 	orrmi.w	r3, r3, #32
 80090a0:	6029      	str	r1, [r5, #0]
 80090a2:	bf48      	it	mi
 80090a4:	6023      	strmi	r3, [r4, #0]
 80090a6:	b91e      	cbnz	r6, 80090b0 <_printf_i+0x1a4>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	f023 0320 	bic.w	r3, r3, #32
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	2310      	movs	r3, #16
 80090b2:	e7a7      	b.n	8009004 <_printf_i+0xf8>
 80090b4:	4824      	ldr	r0, [pc, #144]	; (8009148 <_printf_i+0x23c>)
 80090b6:	e7e4      	b.n	8009082 <_printf_i+0x176>
 80090b8:	4615      	mov	r5, r2
 80090ba:	e7bd      	b.n	8009038 <_printf_i+0x12c>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	6826      	ldr	r6, [r4, #0]
 80090c0:	6961      	ldr	r1, [r4, #20]
 80090c2:	1d18      	adds	r0, r3, #4
 80090c4:	6028      	str	r0, [r5, #0]
 80090c6:	0635      	lsls	r5, r6, #24
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	d501      	bpl.n	80090d0 <_printf_i+0x1c4>
 80090cc:	6019      	str	r1, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <_printf_i+0x1ca>
 80090d0:	0670      	lsls	r0, r6, #25
 80090d2:	d5fb      	bpl.n	80090cc <_printf_i+0x1c0>
 80090d4:	8019      	strh	r1, [r3, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	4615      	mov	r5, r2
 80090dc:	e7bc      	b.n	8009058 <_printf_i+0x14c>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	602a      	str	r2, [r5, #0]
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	2100      	movs	r1, #0
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7f7 f878 	bl	80001e0 <memchr>
 80090f0:	b108      	cbz	r0, 80090f6 <_printf_i+0x1ea>
 80090f2:	1b40      	subs	r0, r0, r5
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	2300      	movs	r3, #0
 80090fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009100:	e7aa      	b.n	8009058 <_printf_i+0x14c>
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	462a      	mov	r2, r5
 8009106:	4649      	mov	r1, r9
 8009108:	4640      	mov	r0, r8
 800910a:	47d0      	blx	sl
 800910c:	3001      	adds	r0, #1
 800910e:	d0ad      	beq.n	800906c <_printf_i+0x160>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	079b      	lsls	r3, r3, #30
 8009114:	d413      	bmi.n	800913e <_printf_i+0x232>
 8009116:	68e0      	ldr	r0, [r4, #12]
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	4298      	cmp	r0, r3
 800911c:	bfb8      	it	lt
 800911e:	4618      	movlt	r0, r3
 8009120:	e7a6      	b.n	8009070 <_printf_i+0x164>
 8009122:	2301      	movs	r3, #1
 8009124:	4632      	mov	r2, r6
 8009126:	4649      	mov	r1, r9
 8009128:	4640      	mov	r0, r8
 800912a:	47d0      	blx	sl
 800912c:	3001      	adds	r0, #1
 800912e:	d09d      	beq.n	800906c <_printf_i+0x160>
 8009130:	3501      	adds	r5, #1
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	9903      	ldr	r1, [sp, #12]
 8009136:	1a5b      	subs	r3, r3, r1
 8009138:	42ab      	cmp	r3, r5
 800913a:	dcf2      	bgt.n	8009122 <_printf_i+0x216>
 800913c:	e7eb      	b.n	8009116 <_printf_i+0x20a>
 800913e:	2500      	movs	r5, #0
 8009140:	f104 0619 	add.w	r6, r4, #25
 8009144:	e7f5      	b.n	8009132 <_printf_i+0x226>
 8009146:	bf00      	nop
 8009148:	08009555 	.word	0x08009555
 800914c:	08009566 	.word	0x08009566

08009150 <memmove>:
 8009150:	4288      	cmp	r0, r1
 8009152:	b510      	push	{r4, lr}
 8009154:	eb01 0402 	add.w	r4, r1, r2
 8009158:	d902      	bls.n	8009160 <memmove+0x10>
 800915a:	4284      	cmp	r4, r0
 800915c:	4623      	mov	r3, r4
 800915e:	d807      	bhi.n	8009170 <memmove+0x20>
 8009160:	1e43      	subs	r3, r0, #1
 8009162:	42a1      	cmp	r1, r4
 8009164:	d008      	beq.n	8009178 <memmove+0x28>
 8009166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800916a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800916e:	e7f8      	b.n	8009162 <memmove+0x12>
 8009170:	4402      	add	r2, r0
 8009172:	4601      	mov	r1, r0
 8009174:	428a      	cmp	r2, r1
 8009176:	d100      	bne.n	800917a <memmove+0x2a>
 8009178:	bd10      	pop	{r4, pc}
 800917a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800917e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009182:	e7f7      	b.n	8009174 <memmove+0x24>

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d06      	ldr	r5, [pc, #24]	; (80091a0 <_sbrk_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f8 f894 	bl	80012bc <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	200008d4 	.word	0x200008d4

080091a4 <memcpy>:
 80091a4:	440a      	add	r2, r1
 80091a6:	4291      	cmp	r1, r2
 80091a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ac:	d100      	bne.n	80091b0 <memcpy+0xc>
 80091ae:	4770      	bx	lr
 80091b0:	b510      	push	{r4, lr}
 80091b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ba:	4291      	cmp	r1, r2
 80091bc:	d1f9      	bne.n	80091b2 <memcpy+0xe>
 80091be:	bd10      	pop	{r4, pc}

080091c0 <_realloc_r>:
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	4680      	mov	r8, r0
 80091c6:	4614      	mov	r4, r2
 80091c8:	460e      	mov	r6, r1
 80091ca:	b921      	cbnz	r1, 80091d6 <_realloc_r+0x16>
 80091cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	4611      	mov	r1, r2
 80091d2:	f7ff bc49 	b.w	8008a68 <_malloc_r>
 80091d6:	b92a      	cbnz	r2, 80091e4 <_realloc_r+0x24>
 80091d8:	f7ff fbda 	bl	8008990 <_free_r>
 80091dc:	4625      	mov	r5, r4
 80091de:	4628      	mov	r0, r5
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e4:	f000 f81b 	bl	800921e <_malloc_usable_size_r>
 80091e8:	4284      	cmp	r4, r0
 80091ea:	4607      	mov	r7, r0
 80091ec:	d802      	bhi.n	80091f4 <_realloc_r+0x34>
 80091ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091f2:	d812      	bhi.n	800921a <_realloc_r+0x5a>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4640      	mov	r0, r8
 80091f8:	f7ff fc36 	bl	8008a68 <_malloc_r>
 80091fc:	4605      	mov	r5, r0
 80091fe:	2800      	cmp	r0, #0
 8009200:	d0ed      	beq.n	80091de <_realloc_r+0x1e>
 8009202:	42bc      	cmp	r4, r7
 8009204:	4622      	mov	r2, r4
 8009206:	4631      	mov	r1, r6
 8009208:	bf28      	it	cs
 800920a:	463a      	movcs	r2, r7
 800920c:	f7ff ffca 	bl	80091a4 <memcpy>
 8009210:	4631      	mov	r1, r6
 8009212:	4640      	mov	r0, r8
 8009214:	f7ff fbbc 	bl	8008990 <_free_r>
 8009218:	e7e1      	b.n	80091de <_realloc_r+0x1e>
 800921a:	4635      	mov	r5, r6
 800921c:	e7df      	b.n	80091de <_realloc_r+0x1e>

0800921e <_malloc_usable_size_r>:
 800921e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009222:	1f18      	subs	r0, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbc      	itt	lt
 8009228:	580b      	ldrlt	r3, [r1, r0]
 800922a:	18c0      	addlt	r0, r0, r3
 800922c:	4770      	bx	lr
	...

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
