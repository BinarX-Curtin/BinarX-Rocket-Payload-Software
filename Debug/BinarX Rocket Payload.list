
BinarX Rocket Payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000080  08007bc4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08007bc4  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a737  00000000  00000000  00020136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e6  00000000  00000000  0003a86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f3  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a16  00000000  00000000  0004099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f077  00000000  00000000  000683b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7341  00000000  00000000  00087428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069e4  00000000  00000000  0016e76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00175150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079f8 	.word	0x080079f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080079f8 	.word	0x080079f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe4d 	bl	8001212 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f87c 	bl	8000674 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800057c:	f000 f8d4 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 faa6 	bl	8000ad0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f8fe 	bl	8000784 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000588:	f000 f960 	bl	800084c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800058c:	f000 f99e 	bl	80008cc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000590:	f000 f9ca 	bl	8000928 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000594:	f000 f9f8 	bl	8000988 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000598:	f000 fa34 	bl	8000a04 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 800059c:	f000 fa70 	bl	8000a80 <MX_USB_PCD_Init>
  MX_FATFS_Init();
 80005a0:	f004 ff1a 	bl	80053d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000); //delay to let SD card finish initialisation
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 fea8 	bl	80012fc <HAL_Delay>
  printf("Finished SD card initialisation delay.\r\n");
 80005ac:	482c      	ldr	r0, [pc, #176]	; (8000660 <main+0xf4>)
 80005ae:	f006 fbb9 	bl	8006d24 <puts>
  FATFS FatFs; 	//Fatfs handle
//  FIL f; 		//File handle
  FRESULT f_res; //Result after operations

  //Open the file system
  f_res = f_mount(&FatFs, "", 1); //1=mount now
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2201      	movs	r2, #1
 80005b8:	492a      	ldr	r1, [pc, #168]	; (8000664 <main+0xf8>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fc54 	bl	8005e68 <f_mount>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (f_res != FR_OK) {
 80005c6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <main+0x70>
    printf("File mount error: (%i)\r\n", f_res);
 80005ce:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005d2:	4619      	mov	r1, r3
 80005d4:	4824      	ldr	r0, [pc, #144]	; (8000668 <main+0xfc>)
 80005d6:	f006 fb3f 	bl	8006c58 <iprintf>
    while(1); // stop here if there was an error
 80005da:	e7fe      	b.n	80005da <main+0x6e>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  f_res = f_getfree("", &free_clusters, &getFreeFs);
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4619      	mov	r1, r3
 80005e4:	481f      	ldr	r0, [pc, #124]	; (8000664 <main+0xf8>)
 80005e6:	f005 fc85 	bl	8005ef4 <f_getfree>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (f_res != FR_OK) {
 80005f0:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <main+0x9a>
    printf("f_getfree error (%i)\r\n", f_res);
 80005f8:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005fc:	4619      	mov	r1, r3
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <main+0x100>)
 8000600:	f006 fb2a 	bl	8006c58 <iprintf>
 	while(1); // stop here if there was an error
 8000604:	e7fe      	b.n	8000604 <main+0x98>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000606:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800060a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	3b02      	subs	r3, #2
 8000614:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000618:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	8952      	ldrh	r2, [r2, #10]
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  free_sectors = free_clusters * getFreeFs->csize;
 8000628:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800062c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	895b      	ldrh	r3, [r3, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800063a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000648:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800064c:	0859      	lsrs	r1, r3, #1
 800064e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000652:	085b      	lsrs	r3, r3, #1
 8000654:	461a      	mov	r2, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <main+0x104>)
 8000658:	f006 fafe 	bl	8006c58 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0xf0>
 800065e:	bf00      	nop
 8000660:	08007a10 	.word	0x08007a10
 8000664:	08007a38 	.word	0x08007a38
 8000668:	08007a3c 	.word	0x08007a3c
 800066c:	08007a58 	.word	0x08007a58
 8000670:	08007a70 	.word	0x08007a70

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	; 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 fc2e 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069a:	f002 f9fb 	bl	8002a94 <HAL_PWREx_ControlVoltageScaling>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a4:	f000 fa96 	bl	8000bd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f002 f9d6 	bl	8002a58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <SystemClock_Config+0xb0>)
 80006ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <SystemClock_Config+0xb0>)
 80006b4:	f023 0318 	bic.w	r3, r3, #24
 80006b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
 80006bc:	2315      	movs	r3, #21
 80006be:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa2e 	bl	8002b40 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ea:	f000 fa73 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006f2:	2302      	movs	r3, #2
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fe2e 	bl	8003368 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000712:	f000 fa5f 	bl	8000bd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000716:	f003 fa93 	bl	8003c40 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	; 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b098      	sub	sp, #96	; 0x60
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2260      	movs	r2, #96	; 0x60
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f006 fbd5 	bl	8006ee4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800073a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800073e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000746:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800074c:	2301      	movs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000754:	2318      	movs	r3, #24
 8000756:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000758:	2307      	movs	r3, #7
 800075a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000764:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000768:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4618      	mov	r0, r3
 800076e:	f003 f81d 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000778:	f000 fa2c 	bl	8000bd4 <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3760      	adds	r7, #96	; 0x60
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0xbc>)
 800079c:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_ADC1_Init+0xc0>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_ADC1_Init+0xbc>)
 80007fc:	f000 ff2e 	bl	800165c <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000806:	f000 f9e5 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0xc4>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	237f      	movs	r3, #127	; 0x7f
 8000818:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081a:	2304      	movs	r3, #4
 800081c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0xbc>)
 8000828:	f001 f85a 	bl	80018e0 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 f9cf 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000009c 	.word	0x2000009c
 8000844:	50040000 	.word	0x50040000
 8000848:	14f00020 	.word	0x14f00020

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	f001 fe84 	bl	8002594 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f99f 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x74>)
 800089a:	f001 ff16 	bl	80026ca <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f996 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C1_Init+0x74>)
 80008ac:	f001 ff58 	bl	8002760 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f98d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000100 	.word	0x20000100
 80008c4:	40005400 	.word	0x40005400
 80008c8:	00303d5b 	.word	0x00303d5b

080008cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_LPUART1_UART_Init+0x54>)
 80008d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_LPUART1_UART_Init+0x58>)
 80008da:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_LPUART1_UART_Init+0x50>)
 800090a:	f004 f839 	bl	8004980 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000914:	f000 f95e 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000154 	.word	0x20000154
 8000920:	40008000 	.word	0x40008000
 8000924:	00033324 	.word	0x00033324

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART1_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART1_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART1_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART1_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART1_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART1_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART1_UART_Init+0x58>)
 800096c:	f004 f808 	bl	8004980 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f92d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001dc 	.word	0x200001dc
 8000984:	40013800 	.word	0x40013800

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	f003 fa2c 	bl	8003e44 <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 f8ef 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000264 	.word	0x20000264
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI2_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI2_Init+0x74>)
 8000a64:	f003 f9ee 	bl	8003e44 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f8b1 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200002c8 	.word	0x200002c8
 8000a7c:	40003800 	.word	0x40003800

08000a80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <MX_USB_PCD_Init+0x4c>)
 8000a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab6:	f001 fe9f 	bl	80027f8 <HAL_PCD_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f000 f888 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000032c 	.word	0x2000032c
 8000acc:	40006800 	.word	0x40006800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0xf8>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_GPIO_Port, uSD_CS_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <MX_GPIO_Init+0xfc>)
 8000b4e:	f001 fd09 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MX_GPIO_Init+0x100>)
 8000b68:	f001 fb82 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000b6c:	f240 3336 	movw	r3, #822	; 0x336
 8000b70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <MX_GPIO_Init+0xfc>)
 8000b82:	f001 fb75 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CS_Pin */
  GPIO_InitStruct.Pin = uSD_CS_Pin;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <MX_GPIO_Init+0xfc>)
 8000ba0:	f001 fb66 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000ba4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f001 fb58 	bl	8002270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <HAL_ADC_MspInit+0x74>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d124      	bne.n	8000c94 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c7a:	231f      	movs	r3, #31
 8000c7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f001 faee 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	50040000 	.word	0x50040000
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0a2      	sub	sp, #136	; 0x88
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2260      	movs	r2, #96	; 0x60
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f006 f90d 	bl	8006ee4 <memset>
  if(hi2c->Instance==I2C1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_I2C_MspInit+0xa8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d137      	bne.n	8000d44 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fd63 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff ff72 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d08:	23c0      	movs	r3, #192	; 0xc0
 8000d0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_I2C_MspInit+0xb0>)
 8000d28:	f001 faa2 	bl	8002270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6593      	str	r3, [r2, #88]	; 0x58
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3788      	adds	r7, #136	; 0x88
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a4      	sub	sp, #144	; 0x90
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2260      	movs	r2, #96	; 0x60
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 f8b3 	bl	8006ee4 <memset>
  if(huart->Instance==LPUART1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a42      	ldr	r2, [pc, #264]	; (8000e8c <HAL_UART_MspInit+0x134>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d13b      	bne.n	8000e00 <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fd09 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da0:	f7ff ff18 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000da4:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dec:	2308      	movs	r3, #8
 8000dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4826      	ldr	r0, [pc, #152]	; (8000e94 <HAL_UART_MspInit+0x13c>)
 8000dfa:	f001 fa39 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dfe:	e040      	b.n	8000e82 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d13b      	bne.n	8000e82 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fcc8 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000e22:	f7ff fed7 	bl	8000bd4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f001 f9f7 	bl	8002270 <HAL_GPIO_Init>
}
 8000e82:	bf00      	nop
 8000e84:	3790      	adds	r7, #144	; 0x90
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40008000 	.word	0x40008000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	40013800 	.word	0x40013800

08000e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a3d      	ldr	r2, [pc, #244]	; (8000fb0 <HAL_SPI_MspInit+0x114>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d145      	bne.n	8000f4a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f06:	23e0      	movs	r3, #224	; 0xe0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f16:	2305      	movs	r3, #5
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f001 f9a4 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <HAL_SPI_MspInit+0x11c>)
 8000f44:	f001 f994 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f48:	e02d      	b.n	8000fa6 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_SPI_MspInit+0x120>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d128      	bne.n	8000fa6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_SPI_MspInit+0x118>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f96:	2305      	movs	r3, #5
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_SPI_MspInit+0x11c>)
 8000fa2:	f001 f965 	bl	8002270 <HAL_GPIO_Init>
}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	; 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	40003800 	.word	0x40003800

08000fc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_PCD_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_PCD_MspInit+0x3c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_PCD_MspInit+0x3c>)
 8000fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_PCD_MspInit+0x3c>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40006800 	.word	0x40006800
 8000ffc:	40021000 	.word	0x40021000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f936 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <_read>:
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_write>:
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <_write+0x26>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f3af 8000 	nop.w
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf1      	blt.n	80010a0 <_write+0x12>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_fstat>:
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	2300      	movs	r3, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_isatty>:
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	2301      	movs	r3, #1
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_lseek>:
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	2300      	movs	r3, #0
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_sbrk>:
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
 8001160:	f005 ff0e 	bl	8006f80 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20010000 	.word	0x20010000
 8001190:	00000400 	.word	0x00000400
 8001194:	20000624 	.word	0x20000624
 8001198:	200007c0 	.word	0x200007c0

0800119c <SystemInit>:
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopForever+0x2>
 80011c4:	f7ff ffea 	bl	800119c <SystemInit>
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopForever+0x6>)
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopForever+0xa>)
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopForever+0xe>)
 80011ce:	2300      	movs	r3, #0
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:
 80011d2:	58d4      	ldr	r4, [r2, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:
 80011d8:	18c4      	adds	r4, r0, r3
 80011da:	428c      	cmp	r4, r1
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopForever+0x12>)
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopForever+0x16>)
 80011e2:	2300      	movs	r3, #0
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:
 80011ea:	42a2      	cmp	r2, r4
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>
 80011ee:	f005 fecd 	bl	8006f8c <__libc_init_array>
 80011f2:	f7ff f9bb 	bl	800056c <main>

080011f6 <LoopForever>:
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
 80011f8:	20010000 	.word	0x20010000
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000080 	.word	0x20000080
 8001204:	08007b44 	.word	0x08007b44
 8001208:	20000080 	.word	0x20000080
 800120c:	200007c0 	.word	0x200007c0

08001210 <ADC1_IRQHandler>:
 8001210:	e7fe      	b.n	8001210 <ADC1_IRQHandler>

08001212 <HAL_Init>:
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	2300      	movs	r3, #0
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	2003      	movs	r0, #3
 800121e:	f000 fff3 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f80e 	bl	8001244 <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <HAL_Init+0x22>
 800122e:	2301      	movs	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e001      	b.n	8001238 <HAL_Init+0x26>
 8001234:	f7ff fcd4 	bl	8000be0 <HAL_MspInit>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_InitTick>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_InitTick+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_InitTick+0x5c>
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x70>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_InitTick+0x6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fff1 	bl	8002256 <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_InitTick+0x56>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d809      	bhi.n	8001294 <HAL_InitTick+0x50>
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 ffc9 	bl	800221e <HAL_NVIC_SetPriority>
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_InitTick+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e007      	b.n	80012a4 <HAL_InitTick+0x60>
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e004      	b.n	80012a4 <HAL_InitTick+0x60>
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e001      	b.n	80012a4 <HAL_InitTick+0x60>
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000628 	.word	0x20000628

080012e4 <HAL_GetTick>:
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000628 	.word	0x20000628

080012fc <HAL_Delay>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <LL_ADC_SetCommonClock>:
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetCommonPathInternalCh>:
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetCommonPathInternalCh>:
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetOffset>:
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_ADC_SetOffset+0x44>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	03fff000 	.word	0x03fff000

080013f4 <LL_ADC_GetOffsetChannel>:
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3360      	adds	r3, #96	; 0x60
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffsetState>:
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_REG_SetSequencerRanks>:
 8001456:	b480      	push	{r7}
 8001458:	b087      	sub	sp, #28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3330      	adds	r3, #48	; 0x30
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	211f      	movs	r1, #31
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0e9b      	lsrs	r3, r3, #26
 800148e:	f003 011f 	and.w	r1, r3, #31
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	bf00      	nop
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_ADC_SetChannelSamplingTime>:
 80014ae:	b480      	push	{r7}
 80014b0:	b087      	sub	sp, #28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3314      	adds	r3, #20
 80014be:	461a      	mov	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	0e5b      	lsrs	r3, r3, #25
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0d1b      	lsrs	r3, r3, #20
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	2107      	movs	r1, #7
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	401a      	ands	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0d1b      	lsrs	r3, r3, #20
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_SetChannelSingleDiff>:
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0318 	and.w	r3, r3, #24
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001528:	40d9      	lsrs	r1, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	400b      	ands	r3, r1
 800152e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001532:	431a      	orrs	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	0007ffff 	.word	0x0007ffff

0800154c <LL_ADC_DisableDeepPowerDown>:
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800155c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6093      	str	r3, [r2, #8]
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_IsDeepPowerDownEnabled>:
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001584:	d101      	bne.n	800158a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800158a:	2300      	movs	r3, #0
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_EnableInternalRegulator>:
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_IsInternalRegulatorEnabled>:
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015d4:	d101      	bne.n	80015da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015da:	2300      	movs	r3, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_IsEnabled>:
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <LL_ADC_IsEnabled+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_ADC_IsEnabled+0x1a>
 8001600:	2300      	movs	r3, #0
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_ADC_REG_IsConversionOngoing>:
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b04      	cmp	r3, #4
 8001620:	d101      	bne.n	8001626 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001626:	2300      	movs	r3, #0
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_INJ_IsConversionOngoing>:
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b08      	cmp	r3, #8
 8001646:	d101      	bne.n	800164c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800164c:	2300      	movs	r3, #0
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_ADC_Init>:
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x1a>
 8001672:	2301      	movs	r3, #1
 8001674:	e126      	b.n	80018c4 <HAL_ADC_Init+0x268>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ADC_Init+0x3c>
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff facf 	bl	8000c28 <HAL_ADC_MspInit>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff67 	bl	8001570 <LL_ADC_IsDeepPowerDownEnabled>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_ADC_Init+0x56>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff4d 	bl	800154c <LL_ADC_DisableDeepPowerDown>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff82 	bl	80015c0 <LL_ADC_IsInternalRegulatorEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_ADC_Init+0x92>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff66 	bl	8001598 <LL_ADC_EnableInternalRegulator>
 80016cc:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_ADC_Init+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_ADC_Init+0x274>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e002      	b.n	80016e8 <HAL_ADC_Init+0x8c>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <HAL_ADC_Init+0x86>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff64 	bl	80015c0 <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <HAL_ADC_Init+0xbe>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	659a      	str	r2, [r3, #88]	; 0x58
 8001716:	2301      	movs	r3, #1
 8001718:	77fb      	strb	r3, [r7, #31]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff75 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001724:	6178      	str	r0, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80bf 	bne.w	80018b2 <HAL_ADC_Init+0x256>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80bb 	bne.w	80018b2 <HAL_ADC_Init+0x256>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001744:	f043 0202 	orr.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff49 	bl	80015e8 <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10b      	bne.n	8001774 <HAL_ADC_Init+0x118>
 800175c:	485d      	ldr	r0, [pc, #372]	; (80018d4 <HAL_ADC_Init+0x278>)
 800175e:	f7ff ff43 	bl	80015e8 <LL_ADC_IsEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <HAL_ADC_Init+0x118>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4619      	mov	r1, r3
 800176e:	485a      	ldr	r0, [pc, #360]	; (80018d8 <HAL_ADC_Init+0x27c>)
 8001770:	f7ff fde8 	bl	8001344 <LL_ADC_SetCommonClock>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e5b      	ldrb	r3, [r3, #25]
 8001778:	035a      	lsls	r2, r3, #13
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	041b      	lsls	r3, r3, #16
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <HAL_ADC_Init+0x154>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	045b      	lsls	r3, r3, #17
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <HAL_ADC_Init+0x170>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	4313      	orrs	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_ADC_Init+0x280>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	430b      	orrs	r3, r1
 80017de:	60d3      	str	r3, [r2, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff25 	bl	8001634 <LL_ADC_INJ_IsConversionOngoing>
 80017ea:	6138      	str	r0, [r7, #16]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d13d      	bne.n	800186e <HAL_ADC_Init+0x212>
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d13a      	bne.n	800186e <HAL_ADC_Init+0x212>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e1b      	ldrb	r3, [r3, #24]
 80017fc:	039a      	lsls	r2, r3, #14
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001814:	f023 0302 	bic.w	r3, r3, #2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	430b      	orrs	r3, r1
 8001820:	60d3      	str	r3, [r2, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001828:	2b01      	cmp	r3, #1
 800182a:	d118      	bne.n	800185e <HAL_ADC_Init+0x202>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800184e:	430a      	orrs	r2, r1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	e007      	b.n	800186e <HAL_ADC_Init+0x212>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10c      	bne.n	8001890 <HAL_ADC_Init+0x234>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f023 010f 	bic.w	r1, r3, #15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
 800188e:	e007      	b.n	80018a0 <HAL_ADC_Init+0x244>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020f 	bic.w	r2, r2, #15
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
 80018b0:	e007      	b.n	80018c2 <HAL_ADC_Init+0x266>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
 80018be:	2301      	movs	r3, #1
 80018c0:	77fb      	strb	r3, [r7, #31]
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	053e2d63 	.word	0x053e2d63
 80018d4:	50040000 	.word	0x50040000
 80018d8:	50040300 	.word	0x50040300
 80018dc:	fff0c007 	.word	0xfff0c007

080018e0 <HAL_ADC_ConfigChannel>:
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b6      	sub	sp, #216	; 0xd8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x22>
 80018fe:	2302      	movs	r3, #2
 8001900:	e3bb      	b.n	800207a <HAL_ADC_ConfigChannel+0x79a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fe7d 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 83a0 	bne.w	800205c <HAL_ADC_ConfigChannel+0x77c>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d824      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x96>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	3b02      	subs	r3, #2
 8001932:	2b03      	cmp	r3, #3
 8001934:	d81b      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x8e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_ADC_ConfigChannel+0x5c>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001955 	.word	0x08001955
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001965 	.word	0x08001965
 800194c:	230c      	movs	r3, #12
 800194e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001952:	e010      	b.n	8001976 <HAL_ADC_ConfigChannel+0x96>
 8001954:	2312      	movs	r3, #18
 8001956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800195a:	e00c      	b.n	8001976 <HAL_ADC_ConfigChannel+0x96>
 800195c:	2318      	movs	r3, #24
 800195e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001962:	e008      	b.n	8001976 <HAL_ADC_ConfigChannel+0x96>
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800196c:	e003      	b.n	8001976 <HAL_ADC_ConfigChannel+0x96>
 800196e:	2306      	movs	r3, #6
 8001970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001974:	bf00      	nop
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001984:	f7ff fd67 	bl	8001456 <LL_ADC_REG_SetSequencerRanks>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe3e 	bl	800160e <LL_ADC_REG_IsConversionOngoing>
 8001992:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fe4a 	bl	8001634 <LL_ADC_INJ_IsConversionOngoing>
 80019a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80019a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 81a4 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x416>
 80019ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 819f 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x416>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f7ff fd72 	bl	80014ae <LL_ADC_SetChannelSamplingTime>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00a      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x122>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6919      	ldr	r1, [r3, #16]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019fc:	f7ff fcd6 	bl	80013ac <LL_ADC_SetOffset>
 8001a00:	e179      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x416>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fcf3 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x14e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fce8 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	0e9b      	lsrs	r3, r3, #26
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	e01e      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x18c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fcdd 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x180>
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e004      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x18a>
 8001a60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1a4>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	e018      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1d6>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1cc>
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e004      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1d6>
 8001aac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1e8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fcac 	bl	8001420 <LL_ADC_SetOffsetState>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fc90 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10a      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x214>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc85 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	f003 021f 	and.w	r2, r3, #31
 8001af2:	e01e      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x252>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc7a 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x246>
 8001b22:	2320      	movs	r3, #32
 8001b24:	e004      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x250>
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x26a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	e018      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x29c>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x292>
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e004      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x29c>
 8001b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x2ae>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fc49 	bl	8001420 <LL_ADC_SetOffsetState>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc2d 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x2da>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fc22 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x318>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc17 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x30c>
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x316>
 8001bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x330>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	e014      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x35a>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x350>
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	e004      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x35a>
 8001c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x36c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	2102      	movs	r1, #2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbea 	bl	8001420 <LL_ADC_SetOffsetState>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2103      	movs	r1, #3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fbce 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x398>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2103      	movs	r1, #3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fbc3 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 021f 	and.w	r2, r3, #31
 8001c76:	e017      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x3c8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fbb8 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	673b      	str	r3, [r7, #112]	; 0x70
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c92:	677b      	str	r3, [r7, #116]	; 0x74
 8001c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x3be>
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x3c6>
 8001c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x3e0>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	e011      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x404>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8001cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x3fc>
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e003      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x404>
 8001cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x416>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2103      	movs	r1, #3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fb95 	bl	8001420 <LL_ADC_SetOffsetState>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fc74 	bl	80015e8 <LL_ADC_IsEnabled>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8140 	bne.w	8001f88 <HAL_ADC_ConfigChannel+0x6a8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f7ff fbf5 	bl	8001504 <LL_ADC_SetChannelSingleDiff>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4a8f      	ldr	r2, [pc, #572]	; (8001f5c <HAL_ADC_ConfigChannel+0x67c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f040 8131 	bne.w	8001f88 <HAL_ADC_ConfigChannel+0x6a8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10b      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x46e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e9b      	lsrs	r3, r3, #26
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2b09      	cmp	r3, #9
 8001d44:	bf94      	ite	ls
 8001d46:	2301      	movls	r3, #1
 8001d48:	2300      	movhi	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	e019      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x4a2>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x48a>
 8001d66:	2320      	movs	r3, #32
 8001d68:	e003      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x492>
 8001d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d079      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x59a>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d107      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x4c2>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	3301      	adds	r3, #1
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da0:	e015      	b.n	8001dce <HAL_ADC_ConfigChannel+0x4ee>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8001db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db2:	653b      	str	r3, [r7, #80]	; 0x50
 8001db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x4de>
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e003      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x4e6>
 8001dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	069b      	lsls	r3, r3, #26
 8001dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x50e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	3301      	adds	r3, #1
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	e017      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x53e>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
 8001df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x52a>
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x532>
 8001e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x564>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	3301      	adds	r3, #1
 8001e36:	f003 021f 	and.w	r2, r3, #31
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	051b      	lsls	r3, r3, #20
 8001e42:	e018      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x596>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x580>
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e003      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x588>
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	430b      	orrs	r3, r1
 8001e78:	e081      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x69e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x5b6>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	069b      	lsls	r3, r3, #26
 8001e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e94:	e015      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x5e2>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x5d2>
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x5da>
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	069b      	lsls	r3, r3, #26
 8001ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x602>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	e017      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x632>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x61e>
 8001efa:	2320      	movs	r3, #32
 8001efc:	e003      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x626>
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	ea42 0103 	orr.w	r1, r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x65e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f003 021f 	and.w	r2, r3, #31
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	3b1e      	subs	r3, #30
 8001f36:	051b      	lsls	r3, r3, #20
 8001f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	e01e      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x69c>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x680>
 8001f56:	2320      	movs	r3, #32
 8001f58:	e006      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x688>
 8001f5a:	bf00      	nop
 8001f5c:	407f0000 	.word	0x407f0000
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 021f 	and.w	r2, r3, #31
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	3b1e      	subs	r3, #30
 8001f76:	051b      	lsls	r3, r3, #20
 8001f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6892      	ldr	r2, [r2, #8]
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7ff fa93 	bl	80014ae <LL_ADC_SetChannelSamplingTime>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d06c      	beq.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8001f94:	483c      	ldr	r0, [pc, #240]	; (8002088 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f96:	f7ff f9fb 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 8001f9a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3a      	ldr	r2, [pc, #232]	; (800208c <HAL_ADC_ConfigChannel+0x7ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d127      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x718>
 8001fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d121      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x718>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d157      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8001fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	482f      	ldr	r0, [pc, #188]	; (8002088 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fca:	f7ff f9ce 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x710>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x70a>
 8001ff6:	e03a      	b.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_ADC_ConfigChannel+0x7bc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <HAL_ADC_ConfigChannel+0x74a>
 8002002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_ConfigChannel+0x74a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_ADC_ConfigChannel+0x7b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12a      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8002018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002020:	4619      	mov	r1, r3
 8002022:	4819      	ldr	r0, [pc, #100]	; (8002088 <HAL_ADC_ConfigChannel+0x7a8>)
 8002024:	f7ff f9a1 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 8002028:	e021      	b.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d11c      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8002034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_ADC_ConfigChannel+0x7b0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 800204a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <HAL_ADC_ConfigChannel+0x7a8>)
 8002056:	f7ff f988 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 800205a:	e008      	b.n	800206e <HAL_ADC_ConfigChannel+0x78e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
 8002068:	2301      	movs	r3, #1
 800206a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002076:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800207a:	4618      	mov	r0, r3
 800207c:	37d8      	adds	r7, #216	; 0xd8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	80080000 	.word	0x80080000
 8002088:	50040300 	.word	0x50040300
 800208c:	c7520000 	.word	0xc7520000
 8002090:	50040000 	.word	0x50040000
 8002094:	20000000 	.word	0x20000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	cb840000 	.word	0xcb840000
 80020a0:	80000001 	.word	0x80000001

080020a4 <__NVIC_SetPriorityGrouping>:
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
 80021b4:	4313      	orrs	r3, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	f7ff ff5c 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffb0 	bl	80021c4 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_GPIO_Init>:
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e154      	b.n	800252a <HAL_GPIO_Init+0x2ba>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8146 	beq.w	8002524 <HAL_GPIO_Init+0x2b4>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x40>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0xa2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	2201      	movs	r2, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b03      	cmp	r3, #3
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0xde>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x132>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80a0 	beq.w	8002524 <HAL_GPIO_Init+0x2b4>
 80023e4:	4b58      	ldr	r3, [pc, #352]	; (8002548 <HAL_GPIO_Init+0x2d8>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_GPIO_Init+0x2d8>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6613      	str	r3, [r2, #96]	; 0x60
 80023f0:	4b55      	ldr	r3, [pc, #340]	; (8002548 <HAL_GPIO_Init+0x2d8>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4a53      	ldr	r2, [pc, #332]	; (800254c <HAL_GPIO_Init+0x2dc>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002426:	d019      	beq.n	800245c <HAL_GPIO_Init+0x1ec>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a49      	ldr	r2, [pc, #292]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_GPIO_Init+0x1e8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a48      	ldr	r2, [pc, #288]	; (8002554 <HAL_GPIO_Init+0x2e4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00d      	beq.n	8002454 <HAL_GPIO_Init+0x1e4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_GPIO_Init+0x2e8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d007      	beq.n	8002450 <HAL_GPIO_Init+0x1e0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a46      	ldr	r2, [pc, #280]	; (800255c <HAL_GPIO_Init+0x2ec>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_GPIO_Init+0x1dc>
 8002448:	2304      	movs	r3, #4
 800244a:	e008      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 800244c:	2307      	movs	r3, #7
 800244e:	e006      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002450:	2303      	movs	r3, #3
 8002452:	e004      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002454:	2302      	movs	r3, #2
 8002456:	e002      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 800245c:	2300      	movs	r3, #0
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_GPIO_Init+0x2dc>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800247c:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x230>
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x25a>
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x284>
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6053      	str	r3, [r2, #4]
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2ae>
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aea3 	bne.w	8002280 <HAL_GPIO_Init+0x10>
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	48000400 	.word	0x48000400
 8002554:	48000800 	.word	0x48000800
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48001000 	.word	0x48001000
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
 8002580:	e002      	b.n	8002588 <HAL_GPIO_WritePin+0x24>
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_I2C_Init>:
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_I2C_Init+0x12>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e08d      	b.n	80026c2 <HAL_I2C_Init+0x12e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_I2C_Init+0x2c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fb72 	bl	8000ca4 <HAL_I2C_MspInit>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_I2C_Init+0x7a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e006      	b.n	800261c <HAL_I2C_Init+0x88>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d108      	bne.n	8002636 <HAL_I2C_Init+0xa2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	e007      	b.n	8002646 <HAL_I2C_Init+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002658:	6053      	str	r3, [r2, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	ea42 0103 	orr.w	r1, r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	021a      	lsls	r2, r3, #8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69d9      	ldr	r1, [r3, #28]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1a      	ldr	r2, [r3, #32]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	2300      	movs	r3, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_I2CEx_ConfigAnalogFilter>:
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d138      	bne.n	8002752 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e032      	b.n	8002754 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2224      	movs	r2, #36	; 0x24
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002752:	2302      	movs	r3, #2
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_I2CEx_ConfigDigitalFilter>:
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	d139      	bne.n	80027ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002780:	2302      	movs	r3, #2
 8002782:	e033      	b.n	80027ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ea:	2302      	movs	r3, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_PCD_Init>:
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af06      	add	r7, sp, #24
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_PCD_Init+0x12>
 8002806:	2301      	movs	r3, #1
 8002808:	e0f8      	b.n	80029fc <HAL_PCD_Init+0x204>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_PCD_Init+0x2c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fbce 	bl	8000fc0 <HAL_PCD_MspInit>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fd73 	bl	800531c <USB_DisableGlobalInt>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	687e      	ldr	r6, [r7, #4]
 800283e:	466d      	mov	r5, sp
 8002840:	f106 0410 	add.w	r4, r6, #16
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	602b      	str	r3, [r5, #0]
 800284c:	1d33      	adds	r3, r6, #4
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f002 fd52 	bl	80052fa <USB_CoreInit>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_PCD_Init+0x70>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8002864:	2301      	movs	r3, #1
 8002866:	e0c9      	b.n	80029fc <HAL_PCD_Init+0x204>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fd6f 	bl	8005352 <USB_SetCurrentMode>
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e040      	b.n	80028fc <HAL_PCD_Init+0x104>
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	3301      	adds	r3, #1
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3303      	adds	r3, #3
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	333c      	adds	r3, #60	; 0x3c
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3b9      	bcc.n	800287a <HAL_PCD_Init+0x82>
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e044      	b.n	8002996 <HAL_PCD_Init+0x19e>
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3b5      	bcc.n	800290c <HAL_PCD_Init+0x114>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	602b      	str	r3, [r5, #0]
 80029b6:	1d33      	adds	r3, r6, #4
 80029b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ba:	6838      	ldr	r0, [r7, #0]
 80029bc:	f002 fcd6 	bl	800536c <USB_DevInit>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_PCD_Init+0x1da>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80029ce:	2301      	movs	r3, #1
 80029d0:	e014      	b.n	80029fc <HAL_PCD_Init+0x204>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <HAL_PCD_Init+0x1f8>
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f80a 	bl	8002a04 <HAL_PCDEx_ActivateLPM>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fcda 	bl	80053ae <USB_DevDisconnect>
 80029fa:	2300      	movs	r3, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a04 <HAL_PCDEx_ActivateLPM>:
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_PWR_EnableBkUpAccess>:
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40007000 	.word	0x40007000

08002a78 <HAL_PWREx_GetVoltageRange>:
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000

08002a94 <HAL_PWREx_ControlVoltageScaling>:
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa2:	d130      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab0:	d038      	beq.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2232      	movs	r2, #50	; 0x32
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e002      	b.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aec:	d102      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f2      	bne.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x46>
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d110      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e00f      	b.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x92>
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d007      	beq.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b1c:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	431bde83 	.word	0x431bde83

08002b40 <HAL_RCC_OscConfig>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0x14>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f000 bc02 	b.w	8003358 <HAL_RCC_OscConfig+0x818>
 8002b54:	4b96      	ldr	r3, [pc, #600]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80e4 	beq.w	8002d3e <HAL_RCC_OscConfig+0x1fe>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4c>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	f040 808b 	bne.w	8002c9a <HAL_RCC_OscConfig+0x15a>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 8087 	bne.w	8002c9a <HAL_RCC_OscConfig+0x15a>
 8002b8c:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x64>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x64>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e3d9      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_RCC_OscConfig+0x7e>
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	e005      	b.n	8002bca <HAL_RCC_OscConfig+0x8a>
 8002bbe:	4b7c      	ldr	r3, [pc, #496]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d223      	bcs.n	8002c16 <HAL_RCC_OscConfig+0xd6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fd8a 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0xa2>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e3ba      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a72      	ldr	r2, [pc, #456]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	496d      	ldr	r1, [pc, #436]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	4b6b      	ldr	r3, [pc, #428]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	4968      	ldr	r1, [pc, #416]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e025      	b.n	8002c62 <HAL_RCC_OscConfig+0x122>
 8002c16:	4b66      	ldr	r3, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a65      	ldr	r2, [pc, #404]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4960      	ldr	r1, [pc, #384]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	495b      	ldr	r1, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCC_OscConfig+0x122>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fd4a 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x122>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e37a      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002c62:	f000 fc81 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	4950      	ldr	r1, [pc, #320]	; (8002db4 <HAL_RCC_OscConfig+0x274>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a4e      	ldr	r2, [pc, #312]	; (8002db8 <HAL_RCC_OscConfig+0x278>)
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <HAL_RCC_OscConfig+0x27c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fadc 	bl	8001244 <HAL_InitTick>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d052      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1fc>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	e35e      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d032      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1c8>
 8002ca2:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a42      	ldr	r2, [pc, #264]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	f7fe fb19 	bl	80012e4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x188>
 8002cb6:	f7fe fb15 	bl	80012e4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x188>
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e347      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002cc8:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x176>
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a35      	ldr	r2, [pc, #212]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cda:	f043 0308 	orr.w	r3, r3, #8
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4930      	ldr	r1, [pc, #192]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	492b      	ldr	r1, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
 8002d06:	e01a      	b.n	8002d3e <HAL_RCC_OscConfig+0x1fe>
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	f7fe fae6 	bl	80012e4 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1ee>
 8002d1c:	f7fe fae2 	bl	80012e4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1ee>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e314      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1dc>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x1fe>
 8002d3c:	bf00      	nop
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d073      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x21c>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d10e      	bne.n	8002d74 <HAL_RCC_OscConfig+0x234>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x234>
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d063      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d15f      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e2f1      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x24c>
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e025      	b.n	8002dd8 <HAL_RCC_OscConfig+0x298>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d114      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x280>
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a02      	ldr	r2, [pc, #8]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e013      	b.n	8002dd8 <HAL_RCC_OscConfig+0x298>
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08007ab8 	.word	0x08007ab8
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	4ba0      	ldr	r3, [pc, #640]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a9f      	ldr	r2, [pc, #636]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b9d      	ldr	r3, [pc, #628]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a9c      	ldr	r2, [pc, #624]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
 8002de0:	f7fe fa80 	bl	80012e4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x2ba>
 8002de8:	f7fe fa7c 	bl	80012e4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x2ba>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e2ae      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002dfa:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x2a8>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
 8002e08:	f7fe fa6c 	bl	80012e4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x2e2>
 8002e10:	f7fe fa68 	bl	80012e4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x2e2>
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e29a      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2d0>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
 8002e30:	bf00      	nop
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d060      	beq.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_OscConfig+0x310>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d119      	bne.n	8002e7e <HAL_RCC_OscConfig+0x33e>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d116      	bne.n	8002e7e <HAL_RCC_OscConfig+0x33e>
 8002e50:	4b7c      	ldr	r3, [pc, #496]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x328>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x328>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e277      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	4973      	ldr	r1, [pc, #460]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	e040      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d023      	beq.n	8002ece <HAL_RCC_OscConfig+0x38e>
 8002e86:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	f7fe fa27 	bl	80012e4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x36c>
 8002e9a:	f7fe fa23 	bl	80012e4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x36c>
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e255      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002eac:	4b65      	ldr	r3, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x35a>
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	495f      	ldr	r1, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e018      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5c      	ldr	r2, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	f7fe fa03 	bl	80012e4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3b4>
 8002ee2:	f7fe f9ff 	bl	80012e4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3b4>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e231      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3a2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d03c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x446>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01c      	beq.n	8002f4e <HAL_RCC_OscConfig+0x40e>
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f24:	f7fe f9de 	bl	80012e4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x3fe>
 8002f2c:	f7fe f9da 	bl	80012e4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3fe>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e20c      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ef      	beq.n	8002f2c <HAL_RCC_OscConfig+0x3ec>
 8002f4c:	e01b      	b.n	8002f86 <HAL_RCC_OscConfig+0x446>
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f5e:	f7fe f9c1 	bl	80012e4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x438>
 8002f66:	f7fe f9bd 	bl	80012e4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x438>
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1ef      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ef      	bne.n	8002f66 <HAL_RCC_OscConfig+0x426>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80a6 	beq.w	80030e0 <HAL_RCC_OscConfig+0x5a0>
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x480>
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_RCC_OscConfig+0x508>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d118      	bne.n	8002ffe <HAL_RCC_OscConfig+0x4be>
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCC_OscConfig+0x508>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_RCC_OscConfig+0x508>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	f7fe f984 	bl	80012e4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4b2>
 8002fe0:	f7fe f980 	bl	80012e4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x4b2>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1b2      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCC_OscConfig+0x508>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4a0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <HAL_RCC_OscConfig+0x4d8>
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003016:	e029      	b.n	800306c <HAL_RCC_OscConfig+0x52c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d115      	bne.n	800304c <HAL_RCC_OscConfig+0x50c>
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x504>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003040:	e014      	b.n	800306c <HAL_RCC_OscConfig+0x52c>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	4b9a      	ldr	r3, [pc, #616]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a99      	ldr	r2, [pc, #612]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305c:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a95      	ldr	r2, [pc, #596]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_RCC_OscConfig+0x562>
 8003074:	f7fe f936 	bl	80012e4 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x552>
 800307c:	f7fe f932 	bl	80012e4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x552>
 800308e:	2303      	movs	r3, #3
 8003090:	e162      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8003092:	4b89      	ldr	r3, [pc, #548]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ed      	beq.n	800307c <HAL_RCC_OscConfig+0x53c>
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x58e>
 80030a2:	f7fe f91f 	bl	80012e4 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x580>
 80030aa:	f7fe f91b 	bl	80012e4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x580>
 80030bc:	2303      	movs	r3, #3
 80030be:	e14b      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 80030c0:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ed      	bne.n	80030aa <HAL_RCC_OscConfig+0x56a>
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5a0>
 80030d4:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a77      	ldr	r2, [pc, #476]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03c      	beq.n	8003166 <HAL_RCC_OscConfig+0x626>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <HAL_RCC_OscConfig+0x5ee>
 80030f4:	4b70      	ldr	r3, [pc, #448]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	4a6f      	ldr	r2, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003104:	f7fe f8ee 	bl	80012e4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x5de>
 800310c:	f7fe f8ea 	bl	80012e4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x5de>
 800311a:	2303      	movs	r3, #3
 800311c:	e11c      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 800311e:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <HAL_RCC_OscConfig+0x5cc>
 800312c:	e01b      	b.n	8003166 <HAL_RCC_OscConfig+0x626>
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003134:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800313e:	f7fe f8d1 	bl	80012e4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x618>
 8003146:	f7fe f8cd 	bl	80012e4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x618>
 8003154:	2303      	movs	r3, #3
 8003156:	e0ff      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 800315a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ef      	bne.n	8003146 <HAL_RCC_OscConfig+0x606>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80f3 	beq.w	8003356 <HAL_RCC_OscConfig+0x816>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2b02      	cmp	r3, #2
 8003176:	f040 80c9 	bne.w	800330c <HAL_RCC_OscConfig+0x7cc>
 800317a:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	429a      	cmp	r2, r3
 800318c:	d12c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x6a8>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	3b01      	subs	r3, #1
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	429a      	cmp	r2, r3
 800319e:	d123      	bne.n	80031e8 <HAL_RCC_OscConfig+0x6a8>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d11b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x6a8>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	06db      	lsls	r3, r3, #27
 80031bc:	429a      	cmp	r2, r3
 80031be:	d113      	bne.n	80031e8 <HAL_RCC_OscConfig+0x6a8>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	055b      	lsls	r3, r3, #21
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_OscConfig+0x6a8>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	065b      	lsls	r3, r3, #25
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d06b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x780>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d062      	beq.n	80032b4 <HAL_RCC_OscConfig+0x774>
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x6be>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0ac      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2d      	ldr	r2, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	f7fe f86b 	bl	80012e4 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x6e4>
 8003212:	f7fe f867 	bl	80012e4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x6e4>
 8003220:	2303      	movs	r3, #3
 8003222:	e099      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x6d2>
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x77c>)
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003240:	3a01      	subs	r2, #1
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800324a:	0212      	lsls	r2, r2, #8
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	3a01      	subs	r2, #1
 8003256:	0552      	lsls	r2, r2, #21
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0652      	lsls	r2, r2, #25
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326a:	06d2      	lsls	r2, r2, #27
 800326c:	430a      	orrs	r2, r1
 800326e:	4912      	ldr	r1, [pc, #72]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003270:	4313      	orrs	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 8003286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	f7fe f82a 	bl	80012e4 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x766>
 8003294:	f7fe f826 	bl	80012e4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x766>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e058      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_OscConfig+0x778>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x754>
 80032b2:	e050      	b.n	8003356 <HAL_RCC_OscConfig+0x816>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04f      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	019d808c 	.word	0x019d808c
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d144      	bne.n	8003356 <HAL_RCC_OscConfig+0x816>
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	60d3      	str	r3, [r2, #12]
 80032e4:	f7fd fffe 	bl	80012e4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x7be>
 80032ec:	f7fd fffa 	bl	80012e4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x7be>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e02c      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x7ac>
 800330a:	e024      	b.n	8003356 <HAL_RCC_OscConfig+0x816>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d01f      	beq.n	8003352 <HAL_RCC_OscConfig+0x812>
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 8003318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	f7fd ffe1 	bl	80012e4 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x7f8>
 8003326:	f7fd ffdd 	bl	80012e4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x7f8>
 8003334:	2303      	movs	r3, #3
 8003336:	e00f      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x7e6>
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	4905      	ldr	r1, [pc, #20]	; (8003360 <HAL_RCC_OscConfig+0x820>)
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_RCC_OscConfig+0x824>)
 800334c:	4013      	ands	r3, r2
 800334e:	60cb      	str	r3, [r1, #12]
 8003350:	e001      	b.n	8003356 <HAL_RCC_OscConfig+0x816>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x818>
 8003356:	2300      	movs	r3, #0
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	feeefffc 	.word	0xfeeefffc

08003368 <HAL_RCC_ClockConfig>:
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x14>
 8003378:	2301      	movs	r3, #1
 800337a:	e0e7      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 800337c:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d910      	bls.n	80033ac <HAL_RCC_ClockConfig+0x44>
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4970      	ldr	r1, [pc, #448]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
 800339a:	4b6e      	ldr	r3, [pc, #440]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x44>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cf      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x72>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d908      	bls.n	80033da <HAL_RCC_ClockConfig+0x72>
 80033c8:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4960      	ldr	r1, [pc, #384]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04c      	beq.n	8003480 <HAL_RCC_ClockConfig+0x118>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0x96>
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d121      	bne.n	800343e <HAL_RCC_ClockConfig+0xd6>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0a6      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xae>
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d115      	bne.n	800343e <HAL_RCC_ClockConfig+0xd6>
 8003412:	2301      	movs	r3, #1
 8003414:	e09a      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xc6>
 800341e:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xd6>
 800342a:	2301      	movs	r3, #1
 800342c:	e08e      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xd6>
 800343a:	2301      	movs	r3, #1
 800343c:	e086      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 800343e:	4b46      	ldr	r3, [pc, #280]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4943      	ldr	r1, [pc, #268]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]
 8003450:	f7fd ff48 	bl	80012e4 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x106>
 8003458:	f7fd ff44 	bl	80012e4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x106>
 800346a:	2303      	movs	r3, #3
 800346c:	e06e      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 800346e:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0x146>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003498:	429a      	cmp	r2, r3
 800349a:	d208      	bcs.n	80034ae <HAL_RCC_ClockConfig+0x146>
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	492b      	ldr	r1, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d210      	bcs.n	80034de <HAL_RCC_ClockConfig+0x176>
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 0207 	bic.w	r2, r3, #7
 80034c4:	4923      	ldr	r1, [pc, #140]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_RCC_ClockConfig+0x1ec>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d001      	beq.n	80034de <HAL_RCC_ClockConfig+0x176>
 80034da:	2301      	movs	r3, #1
 80034dc:	e036      	b.n	800354c <HAL_RCC_ClockConfig+0x1e4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_RCC_ClockConfig+0x194>
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4918      	ldr	r1, [pc, #96]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_RCC_ClockConfig+0x1b4>
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4910      	ldr	r1, [pc, #64]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]
 800351c:	f000 f824 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	490b      	ldr	r1, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1f4>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1f8>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1fc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd fe7f 	bl	8001244 <HAL_InitTick>
 8003546:	4603      	mov	r3, r0
 8003548:	72fb      	strb	r3, [r7, #11]
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40022000 	.word	0x40022000
 8003558:	40021000 	.word	0x40021000
 800355c:	08007ab8 	.word	0x08007ab8
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x34>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d121      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0x72>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d11e      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0x72>
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0x50>
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e005      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x5c>
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0x7e>
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_GetSysClockFreq+0x110>)
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e004      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d134      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0xf8>
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0xa6>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d003      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0xac>
 800360c:	e005      	b.n	800361a <HAL_RCC_GetSysClockFreq+0xb2>
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_RCC_GetSysClockFreq+0x110>)
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e005      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb8>
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCC_GetSysClockFreq+0x110>)
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e002      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb8>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	bf00      	nop
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	3301      	adds	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	fb03 f202 	mul.w	r2, r3, r2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCC_GetSysClockFreq+0x108>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	0e5b      	lsrs	r3, r3, #25
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	3301      	adds	r3, #1
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	08007ad0 	.word	0x08007ad0
 8003678:	00f42400 	.word	0x00f42400

0800367c <HAL_RCC_GetHCLKFreq>:
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <HAL_RCC_GetPCLK1Freq>:
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4904      	ldr	r1, [pc, #16]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08007ac8 	.word	0x08007ac8

080036c0 <HAL_RCC_GetPCLK2Freq>:
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	f7ff ffda 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0adb      	lsrs	r3, r3, #11
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4904      	ldr	r1, [pc, #16]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08007ac8 	.word	0x08007ac8

080036ec <RCC_SetFlashLatencyFromMSIRange>:
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003704:	f7ff f9b8 	bl	8002a78 <HAL_PWREx_GetVoltageRange>
 8003708:	6178      	str	r0, [r7, #20]
 800370a:	e014      	b.n	8003736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f7ff f9a8 	bl	8002a78 <HAL_PWREx_GetVoltageRange>
 8003728:	6178      	str	r0, [r7, #20]
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	; 0x58
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373c:	d10b      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d919      	bls.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2ba0      	cmp	r3, #160	; 0xa0
 8003748:	d902      	bls.n	8003750 <RCC_SetFlashLatencyFromMSIRange+0x64>
 800374a:	2302      	movs	r3, #2
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e013      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e010      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d902      	bls.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800375c:	2303      	movs	r3, #3
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e00a      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d102      	bne.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x82>
 8003768:	2302      	movs	r3, #2
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e004      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d101      	bne.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003774:	2301      	movs	r3, #1
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 0207 	bic.w	r2, r3, #7
 8003780:	4909      	ldr	r1, [pc, #36]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	429a      	cmp	r2, r3
 8003794:	d001      	beq.n	800379a <RCC_SetFlashLatencyFromMSIRange+0xae>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800379a:	2300      	movs	r3, #0
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40022000 	.word	0x40022000

080037ac <HAL_RCCEx_PeriphCLKConfig>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	2300      	movs	r3, #0
 80037b6:	74fb      	strb	r3, [r7, #19]
 80037b8:	2300      	movs	r3, #0
 80037ba:	74bb      	strb	r3, [r7, #18]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d031      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d0:	d01a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d6:	d814      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e0:	d10f      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e2:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	60d3      	str	r3, [r2, #12]
 80037ee:	e00c      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa32 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	74fb      	strb	r3, [r7, #19]
 8003800:	e003      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003802:	2301      	movs	r3, #1
 8003804:	74fb      	strb	r3, [r7, #19]
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003808:	bf00      	nop
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003810:	4b51      	ldr	r3, [pc, #324]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	494e      	ldr	r1, [pc, #312]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003826:	e001      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 809e 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800383a:	2300      	movs	r3, #0
 800383c:	747b      	strb	r3, [r7, #17]
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6593      	str	r3, [r2, #88]	; 0x58
 8003860:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2301      	movs	r3, #1
 800386e:	747b      	strb	r3, [r7, #17]
 8003870:	4b3a      	ldr	r3, [pc, #232]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a39      	ldr	r2, [pc, #228]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	f7fd fd32 	bl	80012e4 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	e009      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003884:	f7fd fd2e 	bl	80012e4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003892:	2303      	movs	r3, #3
 8003894:	74fb      	strb	r3, [r7, #19]
 8003896:	e005      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d15a      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d019      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003904:	f7fd fcee 	bl	80012e4 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800390c:	f7fd fcea 	bl	80012e4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d902      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800391e:	2303      	movs	r3, #3
 8003920:	74fb      	strb	r3, [r7, #19]
 8003922:	e006      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ec      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
 8003964:	7c7b      	ldrb	r3, [r7, #17]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800396a:	4b8d      	ldr	r3, [pc, #564]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a8c      	ldr	r2, [pc, #560]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003982:	4b87      	ldr	r3, [pc, #540]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4983      	ldr	r1, [pc, #524]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 020c 	bic.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	497b      	ldr	r1, [pc, #492]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	4972      	ldr	r1, [pc, #456]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x252>
 80039e8:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	496a      	ldr	r1, [pc, #424]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	4961      	ldr	r1, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003a2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4959      	ldr	r1, [pc, #356]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	4950      	ldr	r1, [pc, #320]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a70:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	4948      	ldr	r1, [pc, #288]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a92:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	493f      	ldr	r1, [pc, #252]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d028      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	4937      	ldr	r1, [pc, #220]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
 8003ae0:	e011      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f8b4 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	74fb      	strb	r3, [r7, #19]
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	74bb      	strb	r3, [r7, #18]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3c:	60d3      	str	r3, [r2, #12]
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f885 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	74bb      	strb	r3, [r7, #18]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	4908      	ldr	r1, [pc, #32]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a02      	ldr	r2, [pc, #8]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f853 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x462>
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	4916      	ldr	r1, [pc, #88]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x462>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f830 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x462>
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	74bb      	strb	r3, [r7, #18]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	4904      	ldr	r1, [pc, #16]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c30:	7cbb      	ldrb	r3, [r7, #18]
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCCEx_EnableMSIPLLMode>:
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <RCCEx_PLLSAI1_Config>:
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x4c>
 8003c7a:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10d      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0x46>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0x46>
 8003c92:	4b6b      	ldr	r3, [pc, #428]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d047      	beq.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e044      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d018      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x86>
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d825      	bhi.n	8003d04 <RCCEx_PLLSAI1_Config+0xa4>
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <RCCEx_PLLSAI1_Config+0x62>
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d009      	beq.n	8003cd4 <RCCEx_PLLSAI1_Config+0x74>
 8003cc0:	e020      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11d      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0xaa>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e01a      	b.n	8003d0a <RCCEx_PLLSAI1_Config+0xaa>
 8003cd4:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0xae>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e013      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0xae>
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
 8003cf2:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e006      	b.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e004      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
 8003d12:	bf00      	nop
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
 8003d1a:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	4943      	ldr	r1, [pc, #268]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d17c      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0x1d6>
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f7fd facc 	bl	80012e4 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
 8003d4e:	e009      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x104>
 8003d50:	f7fd fac8 	bl	80012e4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <RCCEx_PLLSAI1_Config+0x104>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	e005      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x110>
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ef      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0xf0>
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d15f      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0x1d6>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d110      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x13e>
 8003d7c:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6892      	ldr	r2, [r2, #8]
 8003d8c:	0211      	lsls	r1, r2, #8
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	06d2      	lsls	r2, r2, #27
 8003d94:	430a      	orrs	r2, r1
 8003d96:	492a      	ldr	r1, [pc, #168]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
 8003d9c:	e027      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x18e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d112      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x16a>
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6892      	ldr	r2, [r2, #8]
 8003db4:	0211      	lsls	r1, r2, #8
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6912      	ldr	r2, [r2, #16]
 8003dba:	0852      	lsrs	r2, r2, #1
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	0552      	lsls	r2, r2, #21
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	491f      	ldr	r1, [pc, #124]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	610b      	str	r3, [r1, #16]
 8003dc8:	e011      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x18e>
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	0211      	lsls	r1, r2, #8
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6952      	ldr	r2, [r2, #20]
 8003de0:	0852      	lsrs	r2, r2, #1
 8003de2:	3a01      	subs	r2, #1
 8003de4:	0652      	lsls	r2, r2, #25
 8003de6:	430a      	orrs	r2, r1
 8003de8:	4915      	ldr	r1, [pc, #84]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	f7fd fa73 	bl	80012e4 <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]
 8003e00:	e009      	b.n	8003e16 <RCCEx_PLLSAI1_Config+0x1b6>
 8003e02:	f7fd fa6f 	bl	80012e4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d902      	bls.n	8003e16 <RCCEx_PLLSAI1_Config+0x1b6>
 8003e10:	2303      	movs	r3, #3
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e005      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x1c2>
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ef      	beq.n	8003e02 <RCCEx_PLLSAI1_Config+0x1a2>
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0x1d6>
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	4903      	ldr	r1, [pc, #12]	; (8003e40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	610b      	str	r3, [r1, #16]
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_SPI_Init>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_Init+0x12>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e095      	b.n	8003f82 <HAL_SPI_Init+0x13e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_SPI_Init+0x2c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e66:	d009      	beq.n	8003e7c <HAL_SPI_Init+0x38>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	61da      	str	r2, [r3, #28]
 8003e6e:	e005      	b.n	8003e7c <HAL_SPI_Init+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	615a      	str	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_SPI_Init+0x58>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd f800 	bl	8000e9c <HAL_SPI_MspInit>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ebc:	d902      	bls.n	8003ec4 <HAL_SPI_Init+0x80>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e002      	b.n	8003eca <HAL_SPI_Init+0x86>
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ed2:	d007      	beq.n	8003ee4 <HAL_SPI_Init+0xa0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Init+0xa0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0204 	and.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003f80:	2300      	movs	r3, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SPI_Transmit>:
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Transmit+0x22>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e15f      	b.n	800426c <HAL_SPI_Transmit+0x2e2>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003fb4:	f7fd f996 	bl	80012e4 <HAL_GetTick>
 8003fb8:	61b8      	str	r0, [r7, #24]
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	82fb      	strh	r3, [r7, #22]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_Transmit+0x46>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e148      	b.n	8004262 <HAL_SPI_Transmit+0x2d8>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_Transmit+0x52>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Transmit+0x58>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e13f      	b.n	8004262 <HAL_SPI_Transmit+0x2d8>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	661a      	str	r2, [r3, #96]	; 0x60
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	64da      	str	r2, [r3, #76]	; 0x4c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	d10f      	bne.n	800404e <HAL_SPI_Transmit+0xc4>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d007      	beq.n	800406c <HAL_SPI_Transmit+0xe2>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004074:	d94f      	bls.n	8004116 <HAL_SPI_Transmit+0x18c>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0xfa>
 800407e:	8afb      	ldrh	r3, [r7, #22]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d142      	bne.n	800410a <HAL_SPI_Transmit+0x180>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a8:	e02f      	b.n	800410a <HAL_SPI_Transmit+0x180>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d112      	bne.n	80040de <HAL_SPI_Transmit+0x154>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	881a      	ldrh	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	1c9a      	adds	r2, r3, #2
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040dc:	e015      	b.n	800410a <HAL_SPI_Transmit+0x180>
 80040de:	f7fd f901 	bl	80012e4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d803      	bhi.n	80040f6 <HAL_SPI_Transmit+0x16c>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d102      	bne.n	80040fc <HAL_SPI_Transmit+0x172>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_SPI_Transmit+0x180>
 80040fc:	2303      	movs	r3, #3
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004108:	e0ab      	b.n	8004262 <HAL_SPI_Transmit+0x2d8>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ca      	bne.n	80040aa <HAL_SPI_Transmit+0x120>
 8004114:	e080      	b.n	8004218 <HAL_SPI_Transmit+0x28e>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Transmit+0x19a>
 800411e:	8afb      	ldrh	r3, [r7, #22]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d174      	bne.n	800420e <HAL_SPI_Transmit+0x284>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d912      	bls.n	8004154 <HAL_SPI_Transmit+0x1ca>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	881a      	ldrh	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	1c9a      	adds	r2, r3, #2
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b02      	subs	r3, #2
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004152:	e05c      	b.n	800420e <HAL_SPI_Transmit+0x284>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800417a:	e048      	b.n	800420e <HAL_SPI_Transmit+0x284>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d12b      	bne.n	80041e2 <HAL_SPI_Transmit+0x258>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d912      	bls.n	80041ba <HAL_SPI_Transmit+0x230>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b02      	subs	r3, #2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041b8:	e029      	b.n	800420e <HAL_SPI_Transmit+0x284>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041e0:	e015      	b.n	800420e <HAL_SPI_Transmit+0x284>
 80041e2:	f7fd f87f 	bl	80012e4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d803      	bhi.n	80041fa <HAL_SPI_Transmit+0x270>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d102      	bne.n	8004200 <HAL_SPI_Transmit+0x276>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_SPI_Transmit+0x284>
 8004200:	2303      	movs	r3, #3
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800420c:	e029      	b.n	8004262 <HAL_SPI_Transmit+0x2d8>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1b1      	bne.n	800417c <HAL_SPI_Transmit+0x1f2>
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	6839      	ldr	r1, [r7, #0]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fb69 	bl	80048f4 <SPI_EndRxTxTransaction>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_SPI_Transmit+0x2a4>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	661a      	str	r2, [r3, #96]	; 0x60
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_SPI_Transmit+0x2c2>
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_Transmit+0x2d0>
 8004254:	2301      	movs	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e003      	b.n	8004262 <HAL_SPI_Transmit+0x2d8>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_SPI_TransmitReceive>:
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	807b      	strh	r3, [r7, #2]
 8004282:	2301      	movs	r3, #1
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	2300      	movs	r3, #0
 8004288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_SPI_TransmitReceive+0x26>
 8004296:	2302      	movs	r3, #2
 8004298:	e20a      	b.n	80046b0 <HAL_SPI_TransmitReceive+0x43c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80042a2:	f7fd f81f 	bl	80012e4 <HAL_GetTick>
 80042a6:	61f8      	str	r0, [r7, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	827b      	strh	r3, [r7, #18]
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	823b      	strh	r3, [r7, #16]
 80042be:	7efb      	ldrb	r3, [r7, #27]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d00e      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x6e>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ca:	d106      	bne.n	80042da <HAL_SPI_TransmitReceive+0x66>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <HAL_SPI_TransmitReceive+0x66>
 80042d4:	7efb      	ldrb	r3, [r7, #27]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x6e>
 80042da:	2302      	movs	r3, #2
 80042dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e0:	e1e0      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x430>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x80>
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x88>
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e1d3      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b04      	cmp	r3, #4
 8004306:	d003      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x9c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2205      	movs	r2, #5
 800430c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	887a      	ldrh	r2, [r7, #2]
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	64da      	str	r2, [r3, #76]	; 0x4c
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	651a      	str	r2, [r3, #80]	; 0x50
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004352:	d802      	bhi.n	800435a <HAL_SPI_TransmitReceive+0xe6>
 8004354:	8a3b      	ldrh	r3, [r7, #16]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d908      	bls.n	800436c <HAL_SPI_TransmitReceive+0xf8>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e007      	b.n	800437c <HAL_SPI_TransmitReceive+0x108>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d007      	beq.n	800439a <HAL_SPI_TransmitReceive+0x126>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a2:	f240 8081 	bls.w	80044a8 <HAL_SPI_TransmitReceive+0x234>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x140>
 80043ae:	8a7b      	ldrh	r3, [r7, #18]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d16d      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x21c>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e05a      	b.n	8004490 <HAL_SPI_TransmitReceive+0x21c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d11b      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x1ac>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x1ac>
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d113      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x1ac>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d11c      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x1f4>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x1f4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	b292      	uxth	r2, r2
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	f7fc ff3c 	bl	80012e4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004474:	429a      	cmp	r2, r3
 8004476:	d80b      	bhi.n	8004490 <HAL_SPI_TransmitReceive+0x21c>
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d007      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x21c>
 8004480:	2303      	movs	r3, #3
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800448e:	e109      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x430>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d19f      	bne.n	80043da <HAL_SPI_TransmitReceive+0x166>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d199      	bne.n	80043da <HAL_SPI_TransmitReceive+0x166>
 80044a6:	e0e3      	b.n	8004670 <HAL_SPI_TransmitReceive+0x3fc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x244>
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	f040 80cf 	bne.w	8004656 <HAL_SPI_TransmitReceive+0x3e2>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d912      	bls.n	80044e8 <HAL_SPI_TransmitReceive+0x274>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b02      	subs	r3, #2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e6:	e0b6      	b.n	8004656 <HAL_SPI_TransmitReceive+0x3e2>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800450e:	e0a2      	b.n	8004656 <HAL_SPI_TransmitReceive+0x3e2>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d134      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x314>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02f      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x314>
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12c      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x314>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d912      	bls.n	800455e <HAL_SPI_TransmitReceive+0x2ea>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b02      	subs	r3, #2
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455c:	e012      	b.n	8004584 <HAL_SPI_TransmitReceive+0x310>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004584:	2300      	movs	r3, #0
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d148      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x3b4>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d042      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x3b4>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d923      	bls.n	80045f6 <HAL_SPI_TransmitReceive+0x382>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	b292      	uxth	r2, r2
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b02      	subs	r3, #2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d81f      	bhi.n	8004624 <HAL_SPI_TransmitReceive+0x3b0>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	e016      	b.n	8004624 <HAL_SPI_TransmitReceive+0x3b0>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f103 020c 	add.w	r2, r3, #12
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004624:	2301      	movs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	f7fc fe5c 	bl	80012e4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004634:	429a      	cmp	r2, r3
 8004636:	d803      	bhi.n	8004640 <HAL_SPI_TransmitReceive+0x3cc>
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d102      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x3d2>
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x3e2>
 8004646:	2303      	movs	r3, #3
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004654:	e026      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x430>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f af57 	bne.w	8004510 <HAL_SPI_TransmitReceive+0x29c>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f47f af50 	bne.w	8004510 <HAL_SPI_TransmitReceive+0x29c>
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f93d 	bl	80048f4 <SPI_EndRxTxTransaction>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_SPI_TransmitReceive+0x418>
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_SPI_TransmitReceive+0x428>
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e003      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x430>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80046ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_WaitFlagStateUntilTimeout>:
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
 80046c8:	f7fc fe0c 	bl	80012e4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	f7fc fe04 	bl	80012e4 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e054      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d050      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80046f8:	f7fc fdf4 	bl	80012e4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xd2>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x84>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004786:	2303      	movs	r3, #3
 8004788:	e017      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x102>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d19b      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x38>
 80047b8:	2300      	movs	r3, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000000 	.word	0x20000000

080047c8 <SPI_WaitFifoStateUntilTimeout>:
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
 80047da:	f7fc fd83 	bl	80012e4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ea:	f7fc fd7b 	bl	80012e4 <HAL_GetTick>
 80047ee:	6238      	str	r0, [r7, #32]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00da      	lsls	r2, r3, #3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	0d1b      	lsrs	r3, r3, #20
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e060      	b.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004818:	d107      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	75fb      	strb	r3, [r7, #23]
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d050      	beq.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8004832:	f7fc fd57 	bl	80012e4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13d      	bne.n	80048c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d111      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d004      	beq.n	8004876 <SPI_WaitFifoStateUntilTimeout+0xae>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d107      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d10f      	bne.n	80048b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80048c0:	2303      	movs	r3, #3
 80048c2:	e010      	b.n	80048e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x106>
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d196      	bne.n	8004812 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80048e4:	2300      	movs	r3, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	3728      	adds	r7, #40	; 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000000 	.word	0x20000000

080048f4 <SPI_EndRxTxTransaction>:
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ff5b 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <SPI_EndRxTxTransaction+0x34>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	661a      	str	r2, [r3, #96]	; 0x60
 8004924:	2303      	movs	r3, #3
 8004926:	e027      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	2180      	movs	r1, #128	; 0x80
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fec0 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SPI_EndRxTxTransaction+0x5a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	661a      	str	r2, [r3, #96]	; 0x60
 800494a:	2303      	movs	r3, #3
 800494c:	e014      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff ff34 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <SPI_EndRxTxTransaction+0x82>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	661a      	str	r2, [r3, #96]	; 0x60
 8004972:	2303      	movs	r3, #3
 8004974:	e000      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
 8004976:	2300      	movs	r3, #0
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_Init>:
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Init+0x12>
 800498e:	2301      	movs	r3, #1
 8004990:	e040      	b.n	8004a14 <HAL_UART_Init+0x94>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_UART_Init+0x28>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc f9d8 	bl	8000d58 <HAL_UART_MspInit>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_UART_Init+0x4c>
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa82 	bl	8004ed0 <UART_AdvFeatureConfig>
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f825 	bl	8004a1c <UART_SetConfig>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Init+0x5c>
 80049d8:	2301      	movs	r3, #1
 80049da:	e01b      	b.n	8004a14 <HAL_UART_Init+0x94>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fb01 	bl	8005014 <UART_CheckIdleState>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_SetConfig>:
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b08a      	sub	sp, #40	; 0x28
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b9e      	ldr	r3, [pc, #632]	; (8004cc4 <UART_SetConfig+0x2a8>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a93      	ldr	r2, [pc, #588]	; (8004cc8 <UART_SetConfig+0x2ac>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <UART_SetConfig+0x6c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	4313      	orrs	r3, r2
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a8a      	ldr	r2, [pc, #552]	; (8004ccc <UART_SetConfig+0x2b0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d126      	bne.n	8004af4 <UART_SetConfig+0xd8>
 8004aa6:	4b8a      	ldr	r3, [pc, #552]	; (8004cd0 <UART_SetConfig+0x2b4>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d81b      	bhi.n	8004aec <UART_SetConfig+0xd0>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0xa0>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e0ab      	b.n	8004c2c <UART_SetConfig+0x210>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e0a7      	b.n	8004c2c <UART_SetConfig+0x210>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e0a3      	b.n	8004c2c <UART_SetConfig+0x210>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e09f      	b.n	8004c2c <UART_SetConfig+0x210>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e09b      	b.n	8004c2c <UART_SetConfig+0x210>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a76      	ldr	r2, [pc, #472]	; (8004cd4 <UART_SetConfig+0x2b8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d138      	bne.n	8004b70 <UART_SetConfig+0x154>
 8004afe:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <UART_SetConfig+0x2b4>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d82d      	bhi.n	8004b68 <UART_SetConfig+0x14c>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0xf8>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b69 	.word	0x08004b69
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b69 	.word	0x08004b69
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b61 	.word	0x08004b61
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e06d      	b.n	8004c2c <UART_SetConfig+0x210>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e069      	b.n	8004c2c <UART_SetConfig+0x210>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e065      	b.n	8004c2c <UART_SetConfig+0x210>
 8004b60:	2308      	movs	r3, #8
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e061      	b.n	8004c2c <UART_SetConfig+0x210>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e05d      	b.n	8004c2c <UART_SetConfig+0x210>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <UART_SetConfig+0x2bc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d125      	bne.n	8004bc6 <UART_SetConfig+0x1aa>
 8004b7a:	4b55      	ldr	r3, [pc, #340]	; (8004cd0 <UART_SetConfig+0x2b4>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d016      	beq.n	8004bb6 <UART_SetConfig+0x19a>
 8004b88:	2b30      	cmp	r3, #48	; 0x30
 8004b8a:	d818      	bhi.n	8004bbe <UART_SetConfig+0x1a2>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d00a      	beq.n	8004ba6 <UART_SetConfig+0x18a>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d814      	bhi.n	8004bbe <UART_SetConfig+0x1a2>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <UART_SetConfig+0x182>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d008      	beq.n	8004bae <UART_SetConfig+0x192>
 8004b9c:	e00f      	b.n	8004bbe <UART_SetConfig+0x1a2>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba4:	e042      	b.n	8004c2c <UART_SetConfig+0x210>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bac:	e03e      	b.n	8004c2c <UART_SetConfig+0x210>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb4:	e03a      	b.n	8004c2c <UART_SetConfig+0x210>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbc:	e036      	b.n	8004c2c <UART_SetConfig+0x210>
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc4:	e032      	b.n	8004c2c <UART_SetConfig+0x210>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3f      	ldr	r2, [pc, #252]	; (8004cc8 <UART_SetConfig+0x2ac>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d12a      	bne.n	8004c26 <UART_SetConfig+0x20a>
 8004bd0:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <UART_SetConfig+0x2b4>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bde:	d01a      	beq.n	8004c16 <UART_SetConfig+0x1fa>
 8004be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be4:	d81b      	bhi.n	8004c1e <UART_SetConfig+0x202>
 8004be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bea:	d00c      	beq.n	8004c06 <UART_SetConfig+0x1ea>
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf0:	d815      	bhi.n	8004c1e <UART_SetConfig+0x202>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <UART_SetConfig+0x1e2>
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfa:	d008      	beq.n	8004c0e <UART_SetConfig+0x1f2>
 8004bfc:	e00f      	b.n	8004c1e <UART_SetConfig+0x202>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c04:	e012      	b.n	8004c2c <UART_SetConfig+0x210>
 8004c06:	2302      	movs	r3, #2
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0c:	e00e      	b.n	8004c2c <UART_SetConfig+0x210>
 8004c0e:	2304      	movs	r3, #4
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c14:	e00a      	b.n	8004c2c <UART_SetConfig+0x210>
 8004c16:	2308      	movs	r3, #8
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1c:	e006      	b.n	8004c2c <UART_SetConfig+0x210>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c24:	e002      	b.n	8004c2c <UART_SetConfig+0x210>
 8004c26:	2310      	movs	r3, #16
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <UART_SetConfig+0x2ac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	f040 808a 	bne.w	8004d4c <UART_SetConfig+0x330>
 8004c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d824      	bhi.n	8004c8a <UART_SetConfig+0x26e>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x22c>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c8b 	.word	0x08004c8b
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004c7b 	.word	0x08004c7b
 8004c5c:	08004c8b 	.word	0x08004c8b
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004c8b 	.word	0x08004c8b
 8004c68:	08004c83 	.word	0x08004c83
 8004c6c:	f7fe fd12 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004c70:	61f8      	str	r0, [r7, #28]
 8004c72:	e010      	b.n	8004c96 <UART_SetConfig+0x27a>
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <UART_SetConfig+0x2c0>)
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e00d      	b.n	8004c96 <UART_SetConfig+0x27a>
 8004c7a:	f7fe fc75 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8004c7e:	61f8      	str	r0, [r7, #28]
 8004c80:	e009      	b.n	8004c96 <UART_SetConfig+0x27a>
 8004c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e005      	b.n	8004c96 <UART_SetConfig+0x27a>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c94:	bf00      	nop
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8109 	beq.w	8004eb0 <UART_SetConfig+0x494>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d305      	bcc.n	8004cba <UART_SetConfig+0x29e>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d912      	bls.n	8004ce0 <UART_SetConfig+0x2c4>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cc0:	e0f6      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004cc2:	bf00      	nop
 8004cc4:	efff69f3 	.word	0xefff69f3
 8004cc8:	40008000 	.word	0x40008000
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40004400 	.word	0x40004400
 8004cd8:	40004800 	.word	0x40004800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	461c      	mov	r4, r3
 8004ce6:	4615      	mov	r5, r2
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	022b      	lsls	r3, r5, #8
 8004cf2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cf6:	0222      	lsls	r2, r4, #8
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	6849      	ldr	r1, [r1, #4]
 8004cfc:	0849      	lsrs	r1, r1, #1
 8004cfe:	2000      	movs	r0, #0
 8004d00:	4688      	mov	r8, r1
 8004d02:	4681      	mov	r9, r0
 8004d04:	eb12 0a08 	adds.w	sl, r2, r8
 8004d08:	eb43 0b09 	adc.w	fp, r3, r9
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	f7fb faa7 	bl	8000270 <__aeabi_uldivmod>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4613      	mov	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d30:	d308      	bcc.n	8004d44 <UART_SetConfig+0x328>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d38:	d204      	bcs.n	8004d44 <UART_SetConfig+0x328>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	e0b5      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d4a:	e0b1      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d15d      	bne.n	8004e12 <UART_SetConfig+0x3f6>
 8004d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d827      	bhi.n	8004dae <UART_SetConfig+0x392>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x348>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004daf 	.word	0x08004daf
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	f7fe fc84 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
 8004d8e:	e014      	b.n	8004dba <UART_SetConfig+0x39e>
 8004d90:	f7fe fc96 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8004d94:	61f8      	str	r0, [r7, #28]
 8004d96:	e010      	b.n	8004dba <UART_SetConfig+0x39e>
 8004d98:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <UART_SetConfig+0x4b0>)
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e00d      	b.n	8004dba <UART_SetConfig+0x39e>
 8004d9e:	f7fe fbe3 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8004da2:	61f8      	str	r0, [r7, #28]
 8004da4:	e009      	b.n	8004dba <UART_SetConfig+0x39e>
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e005      	b.n	8004dba <UART_SetConfig+0x39e>
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004db8:	bf00      	nop
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d077      	beq.n	8004eb0 <UART_SetConfig+0x494>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005a      	lsls	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	441a      	add	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d916      	bls.n	8004e0a <UART_SetConfig+0x3ee>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d212      	bcs.n	8004e0a <UART_SetConfig+0x3ee>
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f023 030f 	bic.w	r3, r3, #15
 8004dec:	82fb      	strh	r3, [r7, #22]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	82fb      	strh	r3, [r7, #22]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	8afa      	ldrh	r2, [r7, #22]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e052      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e10:	e04e      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d827      	bhi.n	8004e6a <UART_SetConfig+0x44e>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x404>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e63 	.word	0x08004e63
 8004e44:	f7fe fc26 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
 8004e4a:	e014      	b.n	8004e76 <UART_SetConfig+0x45a>
 8004e4c:	f7fe fc38 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
 8004e52:	e010      	b.n	8004e76 <UART_SetConfig+0x45a>
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <UART_SetConfig+0x4b0>)
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x45a>
 8004e5a:	f7fe fb85 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8004e5e:	61f8      	str	r0, [r7, #28]
 8004e60:	e009      	b.n	8004e76 <UART_SetConfig+0x45a>
 8004e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x45a>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e74:	bf00      	nop
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d019      	beq.n	8004eb0 <UART_SetConfig+0x494>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	085a      	lsrs	r2, r3, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b0f      	cmp	r3, #15
 8004e94:	d909      	bls.n	8004eaa <UART_SetConfig+0x48e>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d205      	bcs.n	8004eaa <UART_SetConfig+0x48e>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e002      	b.n	8004eb0 <UART_SetConfig+0x494>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	669a      	str	r2, [r3, #104]	; 0x68
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ebc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3728      	adds	r7, #40	; 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eca:	bf00      	nop
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <UART_AdvFeatureConfig>:
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
 8005014:	b580      	push	{r7, lr}
 8005016:	b098      	sub	sp, #96	; 0x60
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005024:	f7fc f95e 	bl	80012e4 <HAL_GetTick>
 8005028:	6578      	str	r0, [r7, #84]	; 0x54
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d12e      	bne.n	8005096 <UART_CheckIdleState+0x82>
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88c 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d021      	beq.n	8005096 <UART_CheckIdleState+0x82>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
 8005072:	643a      	str	r2, [r7, #64]	; 0x40
 8005074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_CheckIdleState+0x3e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8005092:	2303      	movs	r3, #3
 8005094:	e062      	b.n	800515c <UART_CheckIdleState+0x148>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d149      	bne.n	8005138 <UART_CheckIdleState+0x124>
 80050a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f856 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03c      	beq.n	8005138 <UART_CheckIdleState+0x124>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_CheckIdleState+0xaa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	64bb      	str	r3, [r7, #72]	; 0x48
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_CheckIdleState+0xdc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8005134:	2303      	movs	r3, #3
 8005136:	e011      	b.n	800515c <UART_CheckIdleState+0x148>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	665a      	str	r2, [r3, #100]	; 0x64
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800515a:	2300      	movs	r3, #0
 800515c:	4618      	mov	r0, r3
 800515e:	3758      	adds	r7, #88	; 0x58
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_WaitOnFlagUntilTimeout>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
 8005174:	e049      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d045      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
 800517e:	f7fc f8b1 	bl	80012e4 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <UART_WaitOnFlagUntilTimeout+0x30>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <UART_WaitOnFlagUntilTimeout+0x34>
 8005194:	2303      	movs	r3, #3
 8005196:	e048      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d031      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d110      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x72>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2208      	movs	r2, #8
 80051ba:	621a      	str	r2, [r3, #32]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f838 	bl	8005232 <UART_EndRxTransfer>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2208      	movs	r2, #8
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80051d2:	2301      	movs	r3, #1
 80051d4:	e029      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d111      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ee:	621a      	str	r2, [r3, #32]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f81e 	bl	8005232 <UART_EndRxTransfer>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0a6      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0x12>
 8005228:	2300      	movs	r3, #0
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_EndRxTransfer>:
 8005232:	b480      	push	{r7}
 8005234:	b095      	sub	sp, #84	; 0x54
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800525c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_EndRxTransfer+0x8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_EndRxTransfer+0x3a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xa8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	617a      	str	r2, [r7, #20]
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_EndRxTransfer+0x76>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
 80052ee:	bf00      	nop
 80052f0:	3754      	adds	r7, #84	; 0x54
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_CoreInit>:
 80052fa:	b084      	sub	sp, #16
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	f107 0014 	add.w	r0, r7, #20
 8005308:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800530c:	2300      	movs	r3, #0
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	b004      	add	sp, #16
 800531a:	4770      	bx	lr

0800531c <USB_DisableGlobalInt>:
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	b29b      	uxth	r3, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	4013      	ands	r3, r2
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005344:	2300      	movs	r3, #0
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_SetCurrentMode>:
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
 800535e:	2300      	movs	r3, #0
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_DevInit>:
 800536c:	b084      	sub	sp, #16
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	f107 0014 	add.w	r0, r7, #20
 800537a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800539e:	2300      	movs	r3, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	b004      	add	sp, #16
 80053ac:	4770      	bx	lr

080053ae <USB_DevDisconnect>:
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80053ca:	2300      	movs	r3, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80053dc:	4904      	ldr	r1, [pc, #16]	; (80053f0 <MX_FATFS_Init+0x18>)
 80053de:	4805      	ldr	r0, [pc, #20]	; (80053f4 <MX_FATFS_Init+0x1c>)
 80053e0:	f000 fe8a 	bl	80060f8 <FATFS_LinkDriver>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <MX_FATFS_Init+0x20>)
 80053ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000630 	.word	0x20000630
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	2000062c 	.word	0x2000062c

080053fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); // for SPI SD card
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f001 f80f 	bl	800642c <USER_SPI_initialize>
 800540e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); // for SPI SD card
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	4618      	mov	r0, r3
 8005426:	f001 f8ed 	bl	8006604 <USER_SPI_status>
 800542a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); // for SPI SD card
 8005444:	7bf8      	ldrb	r0, [r7, #15]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	f001 f8f0 	bl	8006630 <USER_SPI_read>
 8005450:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); // for SPI SD card
 800546a:	7bf8      	ldrb	r0, [r7, #15]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	f001 f943 	bl	80066fc <USER_SPI_write>
 8005476:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	603a      	str	r2, [r7, #0]
 800548a:	71fb      	strb	r3, [r7, #7]
 800548c:	460b      	mov	r3, r1
 800548e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); // for SPI SD card
 8005490:	79b9      	ldrb	r1, [r7, #6]
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f9ac 	bl	80067f4 <USER_SPI_ioctl>
 800549c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <disk_status+0x30>)
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	79fa      	ldrb	r2, [r7, #7]
 80054c0:	4905      	ldr	r1, [pc, #20]	; (80054d8 <disk_status+0x30>)
 80054c2:	440a      	add	r2, r1
 80054c4:	7a12      	ldrb	r2, [r2, #8]
 80054c6:	4610      	mov	r0, r2
 80054c8:	4798      	blx	r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	2000065c 	.word	0x2000065c

080054dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <disk_initialize+0x48>)
 80054ee:	5cd3      	ldrb	r3, [r2, r3]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d111      	bne.n	8005518 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <disk_initialize+0x48>)
 80054f8:	2101      	movs	r1, #1
 80054fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	4a09      	ldr	r2, [pc, #36]	; (8005524 <disk_initialize+0x48>)
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	79fa      	ldrb	r2, [r7, #7]
 800550a:	4906      	ldr	r1, [pc, #24]	; (8005524 <disk_initialize+0x48>)
 800550c:	440a      	add	r2, r1
 800550e:	7a12      	ldrb	r2, [r2, #8]
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	2000065c 	.word	0x2000065c

08005528 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <disk_read+0x3c>)
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	689c      	ldr	r4, [r3, #8]
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <disk_read+0x3c>)
 8005548:	4413      	add	r3, r2
 800554a:	7a18      	ldrb	r0, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	47a0      	blx	r4
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]
  return res;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}
 8005562:	bf00      	nop
 8005564:	2000065c 	.word	0x2000065c

08005568 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <disk_write+0x3c>)
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68dc      	ldr	r4, [r3, #12]
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <disk_write+0x3c>)
 8005588:	4413      	add	r3, r2
 800558a:	7a18      	ldrb	r0, [r3, #8]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	47a0      	blx	r4
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
  return res;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000065c 	.word	0x2000065c

080055a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3301      	adds	r3, #1
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	b21a      	sxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055ca:	89fb      	ldrh	r3, [r7, #14]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3303      	adds	r3, #3
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	3202      	adds	r2, #2
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	3201      	adds	r2, #1
 80055fe:	7812      	ldrb	r2, [r2, #0]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e010      	b.n	8005650 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <clear_lock+0x44>)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	4413      	add	r3, r2
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d105      	bne.n	800564a <clear_lock+0x2a>
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <clear_lock+0x44>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4413      	add	r3, r2
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d9eb      	bls.n	800562e <clear_lock+0xe>
	}
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	2000063c 	.word	0x2000063c

08005668 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d034      	beq.n	80056e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7858      	ldrb	r0, [r3, #1]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800568c:	2301      	movs	r3, #1
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	f7ff ff6a 	bl	8005568 <disk_write>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
 800569e:	e022      	b.n	80056e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d217      	bcs.n	80056e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	789b      	ldrb	r3, [r3, #2]
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e010      	b.n	80056e0 <sync_window+0x78>
					wsect += fs->fsize;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4413      	add	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7858      	ldrb	r0, [r3, #1]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056d2:	2301      	movs	r3, #1
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	f7ff ff47 	bl	8005568 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3b01      	subs	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d8eb      	bhi.n	80056be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d01b      	beq.n	8005740 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ffad 	bl	8005668 <sync_window>
 800570e:	4603      	mov	r3, r0
 8005710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d113      	bne.n	8005740 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7858      	ldrb	r0, [r3, #1]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005722:	2301      	movs	r3, #1
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	f7ff feff 	bl	8005528 <disk_read>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d904      	bls.n	800576a <get_fat+0x20>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <get_fat+0x26>
		val = 1;	/* Internal error */
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e08f      	b.n	8005890 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d062      	beq.n	8005844 <get_fat+0xfa>
 800577e:	2b03      	cmp	r3, #3
 8005780:	dc7c      	bgt.n	800587c <get_fat+0x132>
 8005782:	2b01      	cmp	r3, #1
 8005784:	d002      	beq.n	800578c <get_fat+0x42>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d042      	beq.n	8005810 <get_fat+0xc6>
 800578a:	e077      	b.n	800587c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	0a5b      	lsrs	r3, r3, #9
 80057a2:	4413      	add	r3, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	6938      	ldr	r0, [r7, #16]
 80057a8:	f7ff ffa2 	bl	80056f0 <move_window>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d167      	bne.n	8005882 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	0a5b      	lsrs	r3, r3, #9
 80057ce:	4413      	add	r3, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	6938      	ldr	r0, [r7, #16]
 80057d4:	f7ff ff8c 	bl	80056f0 <move_window>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d153      	bne.n	8005886 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <get_fat+0xbc>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	e002      	b.n	800580c <get_fat+0xc2>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	617b      	str	r3, [r7, #20]
			break;
 800580e:	e03f      	b.n	8005890 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	4413      	add	r3, r2
 800581a:	4619      	mov	r1, r3
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff ff67 	bl	80056f0 <move_window>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d130      	bne.n	800588a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005836:	4413      	add	r3, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff feb5 	bl	80055a8 <ld_word>
 800583e:	4603      	mov	r3, r0
 8005840:	617b      	str	r3, [r7, #20]
			break;
 8005842:	e025      	b.n	8005890 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	09db      	lsrs	r3, r3, #7
 800584c:	4413      	add	r3, r2
 800584e:	4619      	mov	r1, r3
 8005850:	6938      	ldr	r0, [r7, #16]
 8005852:	f7ff ff4d 	bl	80056f0 <move_window>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d118      	bne.n	800588e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800586a:	4413      	add	r3, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff feb3 	bl	80055d8 <ld_dword>
 8005872:	4603      	mov	r3, r0
 8005874:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005878:	617b      	str	r3, [r7, #20]
			break;
 800587a:	e009      	b.n	8005890 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e006      	b.n	8005890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800588e:	bf00      	nop
		}
	}

	return val;
 8005890:	697b      	ldr	r3, [r7, #20]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d031      	beq.n	8005914 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e002      	b.n	80058be <get_ldnumber+0x24>
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d903      	bls.n	80058ce <get_ldnumber+0x34>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b3a      	cmp	r3, #58	; 0x3a
 80058cc:	d1f4      	bne.n	80058b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b3a      	cmp	r3, #58	; 0x3a
 80058d4:	d11c      	bne.n	8005910 <get_ldnumber+0x76>
			tp = *path;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	60fa      	str	r2, [r7, #12]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	3b30      	subs	r3, #48	; 0x30
 80058e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	d80e      	bhi.n	800590c <get_ldnumber+0x72>
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10a      	bne.n	800590c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <get_ldnumber+0x72>
					vol = (int)i;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3301      	adds	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	e002      	b.n	8005916 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005914:	693b      	ldr	r3, [r7, #16]
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	70da      	strb	r2, [r3, #3]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f04f 32ff 	mov.w	r2, #4294967295
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fed6 	bl	80056f0 <move_window>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <check_fs+0x2a>
 800594a:	2304      	movs	r3, #4
 800594c:	e038      	b.n	80059c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3330      	adds	r3, #48	; 0x30
 8005952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fe26 	bl	80055a8 <ld_word>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <check_fs+0x48>
 8005968:	2303      	movs	r3, #3
 800596a:	e029      	b.n	80059c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005972:	2be9      	cmp	r3, #233	; 0xe9
 8005974:	d009      	beq.n	800598a <check_fs+0x66>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800597c:	2beb      	cmp	r3, #235	; 0xeb
 800597e:	d11e      	bne.n	80059be <check_fs+0x9a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005986:	2b90      	cmp	r3, #144	; 0x90
 8005988:	d119      	bne.n	80059be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3330      	adds	r3, #48	; 0x30
 800598e:	3336      	adds	r3, #54	; 0x36
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff fe21 	bl	80055d8 <ld_dword>
 8005996:	4603      	mov	r3, r0
 8005998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <check_fs+0xa4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <check_fs+0x82>
 80059a2:	2300      	movs	r3, #0
 80059a4:	e00c      	b.n	80059c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3330      	adds	r3, #48	; 0x30
 80059aa:	3352      	adds	r3, #82	; 0x52
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fe13 	bl	80055d8 <ld_dword>
 80059b2:	4603      	mov	r3, r0
 80059b4:	4a05      	ldr	r2, [pc, #20]	; (80059cc <check_fs+0xa8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <check_fs+0x9a>
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80059be:	2302      	movs	r3, #2
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	00544146 	.word	0x00544146
 80059cc:	33544146 	.word	0x33544146

080059d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b096      	sub	sp, #88	; 0x58
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ff58 	bl	800589a <get_ldnumber>
 80059ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da01      	bge.n	80059f6 <find_volume+0x26>
 80059f2:	230b      	movs	r3, #11
 80059f4:	e22d      	b.n	8005e52 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80059f6:	4aa1      	ldr	r2, [pc, #644]	; (8005c7c <find_volume+0x2ac>)
 80059f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <find_volume+0x3a>
 8005a06:	230c      	movs	r3, #12
 8005a08:	e223      	b.n	8005e52 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fd3f 	bl	80054a8 <disk_status>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10c      	bne.n	8005a56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <find_volume+0x82>
 8005a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e1ff      	b.n	8005e52 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005a52:	2300      	movs	r3, #0
 8005a54:	e1fd      	b.n	8005e52 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fd37 	bl	80054dc <disk_initialize>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1e6      	b.n	8005e52 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <find_volume+0xca>
 8005a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a96:	230a      	movs	r3, #10
 8005a98:	e1db      	b.n	8005e52 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aa2:	f7ff ff3f 	bl	8005924 <check_fs>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d149      	bne.n	8005b48 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab8:	e01e      	b.n	8005af8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ac8:	4413      	add	r3, r2
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	3304      	adds	r3, #4
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <find_volume+0x114>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	3308      	adds	r3, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fd7c 	bl	80055d8 <ld_dword>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	e000      	b.n	8005ae6 <find_volume+0x116>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3358      	adds	r3, #88	; 0x58
 8005aec:	443b      	add	r3, r7
 8005aee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af4:	3301      	adds	r3, #1
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40
 8005af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d9dd      	bls.n	8005aba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005afe:	2300      	movs	r3, #0
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <find_volume+0x13e>
 8005b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3358      	adds	r3, #88	; 0x58
 8005b14:	443b      	add	r3, r7
 8005b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <find_volume+0x15e>
 8005b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b26:	f7ff fefd 	bl	8005924 <check_fs>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	e000      	b.n	8005b30 <find_volume+0x160>
 8005b2e:	2303      	movs	r3, #3
 8005b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d905      	bls.n	8005b48 <find_volume+0x178>
 8005b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3e:	3301      	adds	r3, #1
 8005b40:	643b      	str	r3, [r7, #64]	; 0x40
 8005b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d9e2      	bls.n	8005b0e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d101      	bne.n	8005b54 <find_volume+0x184>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e17e      	b.n	8005e52 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d901      	bls.n	8005b60 <find_volume+0x190>
 8005b5c:	230d      	movs	r3, #13
 8005b5e:	e178      	b.n	8005e52 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	3330      	adds	r3, #48	; 0x30
 8005b64:	330b      	adds	r3, #11
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fd1e 	bl	80055a8 <ld_word>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b72:	d001      	beq.n	8005b78 <find_volume+0x1a8>
 8005b74:	230d      	movs	r3, #13
 8005b76:	e16c      	b.n	8005e52 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	3330      	adds	r3, #48	; 0x30
 8005b7c:	3316      	adds	r3, #22
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fd12 	bl	80055a8 <ld_word>
 8005b84:	4603      	mov	r3, r0
 8005b86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <find_volume+0x1cc>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	3330      	adds	r3, #48	; 0x30
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fd1f 	bl	80055d8 <ld_dword>
 8005b9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ba0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	789b      	ldrb	r3, [r3, #2]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d005      	beq.n	8005bc0 <find_volume+0x1f0>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d001      	beq.n	8005bc0 <find_volume+0x1f0>
 8005bbc:	230d      	movs	r3, #13
 8005bbe:	e148      	b.n	8005e52 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	789b      	ldrb	r3, [r3, #2]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	895b      	ldrh	r3, [r3, #10]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <find_volume+0x224>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	895b      	ldrh	r3, [r3, #10]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	895b      	ldrh	r3, [r3, #10]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <find_volume+0x228>
 8005bf4:	230d      	movs	r3, #13
 8005bf6:	e12c      	b.n	8005e52 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	3330      	adds	r3, #48	; 0x30
 8005bfc:	3311      	adds	r3, #17
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fcd2 	bl	80055a8 <ld_word>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	891b      	ldrh	r3, [r3, #8]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <find_volume+0x24e>
 8005c1a:	230d      	movs	r3, #13
 8005c1c:	e119      	b.n	8005e52 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	3330      	adds	r3, #48	; 0x30
 8005c22:	3313      	adds	r3, #19
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fcbf 	bl	80055a8 <ld_word>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <find_volume+0x272>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	3330      	adds	r3, #48	; 0x30
 8005c38:	3320      	adds	r3, #32
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fccc 	bl	80055d8 <ld_dword>
 8005c40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	330e      	adds	r3, #14
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fcad 	bl	80055a8 <ld_word>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <find_volume+0x28c>
 8005c58:	230d      	movs	r3, #13
 8005c5a:	e0fa      	b.n	8005e52 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	4413      	add	r3, r2
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	8912      	ldrh	r2, [r2, #8]
 8005c66:	0912      	lsrs	r2, r2, #4
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d204      	bcs.n	8005c80 <find_volume+0x2b0>
 8005c76:	230d      	movs	r3, #13
 8005c78:	e0eb      	b.n	8005e52 <find_volume+0x482>
 8005c7a:	bf00      	nop
 8005c7c:	20000634 	.word	0x20000634
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c88:	8952      	ldrh	r2, [r2, #10]
 8005c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <find_volume+0x2ca>
 8005c96:	230d      	movs	r3, #13
 8005c98:	e0db      	b.n	8005e52 <find_volume+0x482>
		fmt = FS_FAT32;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d802      	bhi.n	8005cb0 <find_volume+0x2e0>
 8005caa:	2302      	movs	r3, #2
 8005cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d802      	bhi.n	8005cc0 <find_volume+0x2f0>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ccc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005cce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd2:	441a      	add	r2, r3
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	441a      	add	r2, r3
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d11e      	bne.n	8005d28 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	3330      	adds	r3, #48	; 0x30
 8005cee:	332a      	adds	r3, #42	; 0x2a
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fc59 	bl	80055a8 <ld_word>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <find_volume+0x330>
 8005cfc:	230d      	movs	r3, #13
 8005cfe:	e0a8      	b.n	8005e52 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	891b      	ldrh	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <find_volume+0x33c>
 8005d08:	230d      	movs	r3, #13
 8005d0a:	e0a2      	b.n	8005e52 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	3330      	adds	r3, #48	; 0x30
 8005d10:	332c      	adds	r3, #44	; 0x2c
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fc60 	bl	80055d8 <ld_dword>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	e01f      	b.n	8005d68 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	891b      	ldrh	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <find_volume+0x364>
 8005d30:	230d      	movs	r3, #13
 8005d32:	e08e      	b.n	8005e52 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3a:	441a      	add	r2, r3
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d103      	bne.n	8005d50 <find_volume+0x380>
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	e00a      	b.n	8005d66 <find_volume+0x396>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	695a      	ldr	r2, [r3, #20]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	085a      	lsrs	r2, r3, #1
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d66:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005d72:	0a5b      	lsrs	r3, r3, #9
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d201      	bcs.n	8005d7c <find_volume+0x3ac>
 8005d78:	230d      	movs	r3, #13
 8005d7a:	e06a      	b.n	8005e52 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	611a      	str	r2, [r3, #16]
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d149      	bne.n	8005e2e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	3330      	adds	r3, #48	; 0x30
 8005d9e:	3330      	adds	r3, #48	; 0x30
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fc01 	bl	80055a8 <ld_word>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d140      	bne.n	8005e2e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dae:	3301      	adds	r3, #1
 8005db0:	4619      	mov	r1, r3
 8005db2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005db4:	f7ff fc9c 	bl	80056f0 <move_window>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d137      	bne.n	8005e2e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	3330      	adds	r3, #48	; 0x30
 8005dc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fbeb 	bl	80055a8 <ld_word>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d127      	bne.n	8005e2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	3330      	adds	r3, #48	; 0x30
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fbf8 	bl	80055d8 <ld_dword>
 8005de8:	4603      	mov	r3, r0
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <find_volume+0x48c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d11e      	bne.n	8005e2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	3330      	adds	r3, #48	; 0x30
 8005df4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fbed 	bl	80055d8 <ld_dword>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <find_volume+0x490>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d113      	bne.n	8005e2e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	3330      	adds	r3, #48	; 0x30
 8005e0a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fbe2 	bl	80055d8 <ld_dword>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	3330      	adds	r3, #48	; 0x30
 8005e1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fbd8 	bl	80055d8 <ld_dword>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <find_volume+0x494>)
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <find_volume+0x494>)
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <find_volume+0x494>)
 8005e44:	881a      	ldrh	r2, [r3, #0]
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e4c:	f7ff fbe8 	bl	8005620 <clear_lock>
#endif
	return FR_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3758      	adds	r7, #88	; 0x58
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	41615252 	.word	0x41615252
 8005e60:	61417272 	.word	0x61417272
 8005e64:	20000638 	.word	0x20000638

08005e68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fd0b 	bl	800589a <get_ldnumber>
 8005e84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da01      	bge.n	8005e90 <f_mount+0x28>
 8005e8c:	230b      	movs	r3, #11
 8005e8e:	e02b      	b.n	8005ee8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <f_mount+0x88>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ea0:	69b8      	ldr	r0, [r7, #24]
 8005ea2:	f7ff fbbd 	bl	8005620 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	490d      	ldr	r1, [pc, #52]	; (8005ef0 <f_mount+0x88>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <f_mount+0x66>
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <f_mount+0x6a>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e00a      	b.n	8005ee8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ed2:	f107 010c 	add.w	r1, r7, #12
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	2200      	movs	r2, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fd77 	bl	80059d0 <find_volume>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000634 	.word	0x20000634

08005ef4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b092      	sub	sp, #72	; 0x48
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005f00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f04:	f107 030c 	add.w	r3, r7, #12
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fd60 	bl	80059d0 <find_volume>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005f16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 8099 	bne.w	8006052 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	3b02      	subs	r3, #2
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d804      	bhi.n	8005f3e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e089      	b.n	8006052 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d128      	bne.n	8005f9c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fbf6 	bl	800574a <get_fat>
 8005f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d103      	bne.n	8005f70 <f_getfree+0x7c>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f6e:	e063      	b.n	8006038 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d103      	bne.n	8005f7e <f_getfree+0x8a>
 8005f76:	2302      	movs	r3, #2
 8005f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f7c:	e05c      	b.n	8006038 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <f_getfree+0x96>
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	3301      	adds	r3, #1
 8005f88:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d3db      	bcc.n	8005f52 <f_getfree+0x5e>
 8005f9a:	e04d      	b.n	8006038 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
 8005fac:	2300      	movs	r3, #0
 8005fae:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d113      	bne.n	8005fde <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f7ff fb96 	bl	80056f0 <move_window>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005fca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d131      	bne.n	8006036 <f_getfree+0x142>
							p = fs->win;
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	3330      	adds	r3, #48	; 0x30
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d10f      	bne.n	8006006 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe8:	f7ff fade 	bl	80055a8 <ld_word>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <f_getfree+0x104>
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	3b02      	subs	r3, #2
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	e010      	b.n	8006028 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006008:	f7ff fae6 	bl	80055d8 <ld_dword>
 800600c:	4603      	mov	r3, r0
 800600e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <f_getfree+0x128>
 8006016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006018:	3301      	adds	r3, #1
 800601a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	3304      	adds	r3, #4
 8006020:	633b      	str	r3, [r7, #48]	; 0x30
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	3b04      	subs	r3, #4
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602a:	3b01      	subs	r3, #1
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1bd      	bne.n	8005fb0 <f_getfree+0xbc>
 8006034:	e000      	b.n	8006038 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006036:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800603c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006042:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	791a      	ldrb	r2, [r3, #4]
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006052:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006056:	4618      	mov	r0, r3
 8006058:	3748      	adds	r7, #72	; 0x48
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006076:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 8006078:	7a5b      	ldrb	r3, [r3, #9]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d131      	bne.n	80060e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006080:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 8006082:	7a5b      	ldrb	r3, [r3, #9]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 800608a:	2100      	movs	r1, #0
 800608c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 8006090:	7a5b      	ldrb	r3, [r3, #9]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 80060a0:	7a5b      	ldrb	r3, [r3, #9]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 80060a8:	4413      	add	r3, r2
 80060aa:	79fa      	ldrb	r2, [r7, #7]
 80060ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 80060b0:	7a5b      	ldrb	r3, [r3, #9]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	b2d1      	uxtb	r1, r2
 80060b8:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <FATFS_LinkDriverEx+0x94>)
 80060ba:	7251      	strb	r1, [r2, #9]
 80060bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80060be:	7dbb      	ldrb	r3, [r7, #22]
 80060c0:	3330      	adds	r3, #48	; 0x30
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3301      	adds	r3, #1
 80060cc:	223a      	movs	r2, #58	; 0x3a
 80060ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3302      	adds	r3, #2
 80060d4:	222f      	movs	r2, #47	; 0x2f
 80060d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3303      	adds	r3, #3
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000065c 	.word	0x2000065c

080060f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006102:	2200      	movs	r2, #0
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ffaa 	bl	8006060 <FATFS_LinkDriverEx>
 800610c:	4603      	mov	r3, r0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006120:	f7fb f8e0 	bl	80012e4 <HAL_GetTick>
 8006124:	4603      	mov	r3, r0
 8006126:	4a04      	ldr	r2, [pc, #16]	; (8006138 <SPI_Timer_On+0x20>)
 8006128:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800612a:	4a04      	ldr	r2, [pc, #16]	; (800613c <SPI_Timer_On+0x24>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	2000066c 	.word	0x2000066c
 800613c:	20000670 	.word	0x20000670

08006140 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006144:	f7fb f8ce 	bl	80012e4 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <SPI_Timer_Status+0x24>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <SPI_Timer_Status+0x28>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	bf34      	ite	cc
 8006158:	2301      	movcc	r3, #1
 800615a:	2300      	movcs	r3, #0
 800615c:	b2db      	uxtb	r3, r3
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000066c 	.word	0x2000066c
 8006168:	20000670 	.word	0x20000670

0800616c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af02      	add	r7, sp, #8
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006176:	f107 020f 	add.w	r2, r7, #15
 800617a:	1df9      	adds	r1, r7, #7
 800617c:	2332      	movs	r3, #50	; 0x32
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2301      	movs	r3, #1
 8006182:	4804      	ldr	r0, [pc, #16]	; (8006194 <xchg_spi+0x28>)
 8006184:	f7fe f876 	bl	8004274 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200002c8 	.word	0x200002c8

08006198 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e00a      	b.n	80061be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	18d4      	adds	r4, r2, r3
 80061ae:	20ff      	movs	r0, #255	; 0xff
 80061b0:	f7ff ffdc 	bl	800616c <xchg_spi>
 80061b4:	4603      	mov	r3, r0
 80061b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d3f0      	bcc.n	80061a8 <rcvr_spi_multi+0x10>
	}
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4803      	ldr	r0, [pc, #12]	; (80061f4 <xmit_spi_multi+0x24>)
 80061e6:	f7fd fed0 	bl	8003f8a <HAL_SPI_Transmit>
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200002c8 	.word	0x200002c8

080061f8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006200:	f7fb f870 	bl	80012e4 <HAL_GetTick>
 8006204:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800620a:	20ff      	movs	r0, #255	; 0xff
 800620c:	f7ff ffae 	bl	800616c <xchg_spi>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2bff      	cmp	r3, #255	; 0xff
 8006218:	d007      	beq.n	800622a <wait_ready+0x32>
 800621a:	f7fb f863 	bl	80012e4 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	429a      	cmp	r2, r3
 8006228:	d8ef      	bhi.n	800620a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2bff      	cmp	r3, #255	; 0xff
 800622e:	bf0c      	ite	eq
 8006230:	2301      	moveq	r3, #1
 8006232:	2300      	movne	r3, #0
 8006234:	b2db      	uxtb	r3, r3
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006244:	2201      	movs	r2, #1
 8006246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800624a:	4804      	ldr	r0, [pc, #16]	; (800625c <despiselect+0x1c>)
 800624c:	f7fc f98a 	bl	8002564 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006250:	20ff      	movs	r0, #255	; 0xff
 8006252:	f7ff ff8b 	bl	800616c <xchg_spi>

}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	48000400 	.word	0x48000400

08006260 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800626a:	480a      	ldr	r0, [pc, #40]	; (8006294 <spiselect+0x34>)
 800626c:	f7fc f97a 	bl	8002564 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006270:	20ff      	movs	r0, #255	; 0xff
 8006272:	f7ff ff7b 	bl	800616c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800627a:	f7ff ffbd 	bl	80061f8 <wait_ready>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <spiselect+0x28>
 8006284:	2301      	movs	r3, #1
 8006286:	e002      	b.n	800628e <spiselect+0x2e>

	despiselect();
 8006288:	f7ff ffda 	bl	8006240 <despiselect>
	return 0;	/* Timeout */
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	48000400 	.word	0x48000400

08006298 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80062a2:	20c8      	movs	r0, #200	; 0xc8
 80062a4:	f7ff ff38 	bl	8006118 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80062a8:	20ff      	movs	r0, #255	; 0xff
 80062aa:	f7ff ff5f 	bl	800616c <xchg_spi>
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2bff      	cmp	r3, #255	; 0xff
 80062b6:	d104      	bne.n	80062c2 <rcvr_datablock+0x2a>
 80062b8:	f7ff ff42 	bl	8006140 <SPI_Timer_Status>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f2      	bne.n	80062a8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2bfe      	cmp	r3, #254	; 0xfe
 80062c6:	d001      	beq.n	80062cc <rcvr_datablock+0x34>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e00a      	b.n	80062e2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff62 	bl	8006198 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80062d4:	20ff      	movs	r0, #255	; 0xff
 80062d6:	f7ff ff49 	bl	800616c <xchg_spi>
 80062da:	20ff      	movs	r0, #255	; 0xff
 80062dc:	f7ff ff46 	bl	800616c <xchg_spi>

	return 1;						/* Function succeeded */
 80062e0:	2301      	movs	r3, #1
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80062f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062fa:	f7ff ff7d 	bl	80061f8 <wait_ready>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xmit_datablock+0x1e>
 8006304:	2300      	movs	r3, #0
 8006306:	e01e      	b.n	8006346 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff2e 	bl	800616c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2bfd      	cmp	r3, #253	; 0xfd
 8006314:	d016      	beq.n	8006344 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff ff58 	bl	80061d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006320:	20ff      	movs	r0, #255	; 0xff
 8006322:	f7ff ff23 	bl	800616c <xchg_spi>
 8006326:	20ff      	movs	r0, #255	; 0xff
 8006328:	f7ff ff20 	bl	800616c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800632c:	20ff      	movs	r0, #255	; 0xff
 800632e:	f7ff ff1d 	bl	800616c <xchg_spi>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b05      	cmp	r3, #5
 800633e:	d001      	beq.n	8006344 <xmit_datablock+0x5a>
 8006340:	2300      	movs	r3, #0
 8006342:	e000      	b.n	8006346 <xmit_datablock+0x5c>
	}
	return 1;
 8006344:	2301      	movs	r3, #1
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	4603      	mov	r3, r0
 8006356:	6039      	str	r1, [r7, #0]
 8006358:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	da0e      	bge.n	8006380 <send_cmd+0x32>
		cmd &= 0x7F;
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006368:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800636a:	2100      	movs	r1, #0
 800636c:	2037      	movs	r0, #55	; 0x37
 800636e:	f7ff ffee 	bl	800634e <send_cmd>
 8006372:	4603      	mov	r3, r0
 8006374:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d901      	bls.n	8006380 <send_cmd+0x32>
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	e051      	b.n	8006424 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	2b0c      	cmp	r3, #12
 8006384:	d008      	beq.n	8006398 <send_cmd+0x4a>
		despiselect();
 8006386:	f7ff ff5b 	bl	8006240 <despiselect>
		if (!spiselect()) return 0xFF;
 800638a:	f7ff ff69 	bl	8006260 <spiselect>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <send_cmd+0x4a>
 8006394:	23ff      	movs	r3, #255	; 0xff
 8006396:	e045      	b.n	8006424 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fee3 	bl	800616c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	0e1b      	lsrs	r3, r3, #24
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fedd 	bl	800616c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fed7 	bl	800616c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fed1 	bl	800616c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fecc 	bl	800616c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <send_cmd+0x94>
 80063de:	2395      	movs	r3, #149	; 0x95
 80063e0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d101      	bne.n	80063ec <send_cmd+0x9e>
 80063e8:	2387      	movs	r3, #135	; 0x87
 80063ea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff febc 	bl	800616c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	2b0c      	cmp	r3, #12
 80063f8:	d102      	bne.n	8006400 <send_cmd+0xb2>
 80063fa:	20ff      	movs	r0, #255	; 0xff
 80063fc:	f7ff feb6 	bl	800616c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006400:	230a      	movs	r3, #10
 8006402:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006404:	20ff      	movs	r0, #255	; 0xff
 8006406:	f7ff feb1 	bl	800616c <xchg_spi>
 800640a:	4603      	mov	r3, r0
 800640c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800640e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	da05      	bge.n	8006422 <send_cmd+0xd4>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	3b01      	subs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006422:	7bbb      	ldrb	r3, [r7, #14]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800642c:	b590      	push	{r4, r7, lr}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <USER_SPI_initialize+0x14>
 800643c:	2301      	movs	r3, #1
 800643e:	e0d6      	b.n	80065ee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006440:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <USER_SPI_initialize+0x2a>
 800644e:	4b6a      	ldr	r3, [pc, #424]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e0cb      	b.n	80065ee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006456:	4b69      	ldr	r3, [pc, #420]	; (80065fc <USER_SPI_initialize+0x1d0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006460:	4b66      	ldr	r3, [pc, #408]	; (80065fc <USER_SPI_initialize+0x1d0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006468:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800646a:	230a      	movs	r3, #10
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	e005      	b.n	800647c <USER_SPI_initialize+0x50>
 8006470:	20ff      	movs	r0, #255	; 0xff
 8006472:	f7ff fe7b 	bl	800616c <xchg_spi>
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	3b01      	subs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f6      	bne.n	8006470 <USER_SPI_initialize+0x44>

	ty = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006486:	2100      	movs	r1, #0
 8006488:	2000      	movs	r0, #0
 800648a:	f7ff ff60 	bl	800634e <send_cmd>
 800648e:	4603      	mov	r3, r0
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 808b 	bne.w	80065ac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800649a:	f7ff fe3d 	bl	8006118 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800649e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064a2:	2008      	movs	r0, #8
 80064a4:	f7ff ff53 	bl	800634e <send_cmd>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d151      	bne.n	8006552 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
 80064b2:	e00d      	b.n	80064d0 <USER_SPI_initialize+0xa4>
 80064b4:	7bfc      	ldrb	r4, [r7, #15]
 80064b6:	20ff      	movs	r0, #255	; 0xff
 80064b8:	f7ff fe58 	bl	800616c <xchg_spi>
 80064bc:	4603      	mov	r3, r0
 80064be:	461a      	mov	r2, r3
 80064c0:	f104 0310 	add.w	r3, r4, #16
 80064c4:	443b      	add	r3, r7
 80064c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3301      	adds	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d9ee      	bls.n	80064b4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80064d6:	7abb      	ldrb	r3, [r7, #10]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d167      	bne.n	80065ac <USER_SPI_initialize+0x180>
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	2baa      	cmp	r3, #170	; 0xaa
 80064e0:	d164      	bne.n	80065ac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80064e2:	bf00      	nop
 80064e4:	f7ff fe2c 	bl	8006140 <SPI_Timer_Status>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <USER_SPI_initialize+0xd2>
 80064ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064f2:	20a9      	movs	r0, #169	; 0xa9
 80064f4:	f7ff ff2b 	bl	800634e <send_cmd>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f2      	bne.n	80064e4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80064fe:	f7ff fe1f 	bl	8006140 <SPI_Timer_Status>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d051      	beq.n	80065ac <USER_SPI_initialize+0x180>
 8006508:	2100      	movs	r1, #0
 800650a:	203a      	movs	r0, #58	; 0x3a
 800650c:	f7ff ff1f 	bl	800634e <send_cmd>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d14a      	bne.n	80065ac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e00d      	b.n	8006538 <USER_SPI_initialize+0x10c>
 800651c:	7bfc      	ldrb	r4, [r7, #15]
 800651e:	20ff      	movs	r0, #255	; 0xff
 8006520:	f7ff fe24 	bl	800616c <xchg_spi>
 8006524:	4603      	mov	r3, r0
 8006526:	461a      	mov	r2, r3
 8006528:	f104 0310 	add.w	r3, r4, #16
 800652c:	443b      	add	r3, r7
 800652e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	3301      	adds	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d9ee      	bls.n	800651c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800653e:	7a3b      	ldrb	r3, [r7, #8]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USER_SPI_initialize+0x120>
 8006548:	230c      	movs	r3, #12
 800654a:	e000      	b.n	800654e <USER_SPI_initialize+0x122>
 800654c:	2304      	movs	r3, #4
 800654e:	737b      	strb	r3, [r7, #13]
 8006550:	e02c      	b.n	80065ac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006552:	2100      	movs	r1, #0
 8006554:	20a9      	movs	r0, #169	; 0xa9
 8006556:	f7ff fefa 	bl	800634e <send_cmd>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d804      	bhi.n	800656a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006560:	2302      	movs	r3, #2
 8006562:	737b      	strb	r3, [r7, #13]
 8006564:	23a9      	movs	r3, #169	; 0xa9
 8006566:	73bb      	strb	r3, [r7, #14]
 8006568:	e003      	b.n	8006572 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800656a:	2301      	movs	r3, #1
 800656c:	737b      	strb	r3, [r7, #13]
 800656e:	2301      	movs	r3, #1
 8006570:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006572:	bf00      	nop
 8006574:	f7ff fde4 	bl	8006140 <SPI_Timer_Status>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <USER_SPI_initialize+0x162>
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fee3 	bl	800634e <send_cmd>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f2      	bne.n	8006574 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800658e:	f7ff fdd7 	bl	8006140 <SPI_Timer_Status>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <USER_SPI_initialize+0x17c>
 8006598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800659c:	2010      	movs	r0, #16
 800659e:	f7ff fed6 	bl	800634e <send_cmd>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <USER_SPI_initialize+0x180>
				ty = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80065ac:	4a14      	ldr	r2, [pc, #80]	; (8006600 <USER_SPI_initialize+0x1d4>)
 80065ae:	7b7b      	ldrb	r3, [r7, #13]
 80065b0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80065b2:	f7ff fe45 	bl	8006240 <despiselect>

	if (ty) {			/* OK */
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d012      	beq.n	80065e2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <USER_SPI_initialize+0x1d0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <USER_SPI_initialize+0x1d0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e002      	b.n	80065e8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <USER_SPI_initialize+0x1cc>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd90      	pop	{r4, r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000020 	.word	0x20000020
 80065fc:	200002c8 	.word	0x200002c8
 8006600:	20000668 	.word	0x20000668

08006604 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USER_SPI_status+0x14>
 8006614:	2301      	movs	r3, #1
 8006616:	e002      	b.n	800661e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <USER_SPI_status+0x28>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b2db      	uxtb	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000020 	.word	0x20000020

08006630 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <USER_SPI_read+0x1c>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USER_SPI_read+0x20>
 800664c:	2304      	movs	r3, #4
 800664e:	e04d      	b.n	80066ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006650:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <USER_SPI_read+0xc4>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <USER_SPI_read+0x32>
 800665e:	2303      	movs	r3, #3
 8006660:	e044      	b.n	80066ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006662:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <USER_SPI_read+0xc8>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <USER_SPI_read+0x44>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	025b      	lsls	r3, r3, #9
 8006672:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d111      	bne.n	800669e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	2011      	movs	r0, #17
 800667e:	f7ff fe66 	bl	800634e <send_cmd>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d129      	bne.n	80066dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800668c:	68b8      	ldr	r0, [r7, #8]
 800668e:	f7ff fe03 	bl	8006298 <rcvr_datablock>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d021      	beq.n	80066dc <USER_SPI_read+0xac>
			count = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	e01e      	b.n	80066dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	2012      	movs	r0, #18
 80066a2:	f7ff fe54 	bl	800634e <send_cmd>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d117      	bne.n	80066dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80066ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066b0:	68b8      	ldr	r0, [r7, #8]
 80066b2:	f7ff fdf1 	bl	8006298 <rcvr_datablock>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <USER_SPI_read+0xa2>
				buff += 512;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80066c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ed      	bne.n	80066ac <USER_SPI_read+0x7c>
 80066d0:	e000      	b.n	80066d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80066d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80066d4:	2100      	movs	r1, #0
 80066d6:	200c      	movs	r0, #12
 80066d8:	f7ff fe39 	bl	800634e <send_cmd>
		}
	}
	despiselect();
 80066dc:	f7ff fdb0 	bl	8006240 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000020 	.word	0x20000020
 80066f8:	20000668 	.word	0x20000668

080066fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <USER_SPI_write+0x1c>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USER_SPI_write+0x20>
 8006718:	2304      	movs	r3, #4
 800671a:	e063      	b.n	80067e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800671c:	4b33      	ldr	r3, [pc, #204]	; (80067ec <USER_SPI_write+0xf0>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <USER_SPI_write+0x32>
 800672a:	2303      	movs	r3, #3
 800672c:	e05a      	b.n	80067e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800672e:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <USER_SPI_write+0xf0>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USER_SPI_write+0x44>
 800673c:	2302      	movs	r3, #2
 800673e:	e051      	b.n	80067e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006740:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <USER_SPI_write+0xf4>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <USER_SPI_write+0x56>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	025b      	lsls	r3, r3, #9
 8006750:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d110      	bne.n	800677a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	2018      	movs	r0, #24
 800675c:	f7ff fdf7 	bl	800634e <send_cmd>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d136      	bne.n	80067d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006766:	21fe      	movs	r1, #254	; 0xfe
 8006768:	68b8      	ldr	r0, [r7, #8]
 800676a:	f7ff fdbe 	bl	80062ea <xmit_datablock>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02f      	beq.n	80067d4 <USER_SPI_write+0xd8>
			count = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	e02c      	b.n	80067d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <USER_SPI_write+0xf4>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 0306 	and.w	r3, r3, #6
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <USER_SPI_write+0x92>
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	2097      	movs	r0, #151	; 0x97
 800678a:	f7ff fde0 	bl	800634e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	2019      	movs	r0, #25
 8006792:	f7ff fddc 	bl	800634e <send_cmd>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11b      	bne.n	80067d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800679c:	21fc      	movs	r1, #252	; 0xfc
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f7ff fda3 	bl	80062ea <xmit_datablock>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <USER_SPI_write+0xc4>
				buff += 512;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1ee      	bne.n	800679c <USER_SPI_write+0xa0>
 80067be:	e000      	b.n	80067c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80067c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80067c2:	21fd      	movs	r1, #253	; 0xfd
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7ff fd90 	bl	80062ea <xmit_datablock>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <USER_SPI_write+0xd8>
 80067d0:	2301      	movs	r3, #1
 80067d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80067d4:	f7ff fd34 	bl	8006240 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	bf14      	ite	ne
 80067de:	2301      	movne	r3, #1
 80067e0:	2300      	moveq	r3, #0
 80067e2:	b2db      	uxtb	r3, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000020 	.word	0x20000020
 80067f0:	20000668 	.word	0x20000668

080067f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08c      	sub	sp, #48	; 0x30
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	603a      	str	r2, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
 8006800:	460b      	mov	r3, r1
 8006802:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <USER_SPI_ioctl+0x1a>
 800680a:	2304      	movs	r3, #4
 800680c:	e15a      	b.n	8006ac4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800680e:	4baf      	ldr	r3, [pc, #700]	; (8006acc <USER_SPI_ioctl+0x2d8>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <USER_SPI_ioctl+0x2c>
 800681c:	2303      	movs	r3, #3
 800681e:	e151      	b.n	8006ac4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006826:	79bb      	ldrb	r3, [r7, #6]
 8006828:	2b04      	cmp	r3, #4
 800682a:	f200 8136 	bhi.w	8006a9a <USER_SPI_ioctl+0x2a6>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <USER_SPI_ioctl+0x40>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006849 	.word	0x08006849
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006a9b 	.word	0x08006a9b
 8006840:	08006909 	.word	0x08006909
 8006844:	080069ff 	.word	0x080069ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006848:	f7ff fd0a 	bl	8006260 <spiselect>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8127 	beq.w	8006aa2 <USER_SPI_ioctl+0x2ae>
 8006854:	2300      	movs	r3, #0
 8006856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800685a:	e122      	b.n	8006aa2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800685c:	2100      	movs	r1, #0
 800685e:	2009      	movs	r0, #9
 8006860:	f7ff fd75 	bl	800634e <send_cmd>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 811d 	bne.w	8006aa6 <USER_SPI_ioctl+0x2b2>
 800686c:	f107 030c 	add.w	r3, r7, #12
 8006870:	2110      	movs	r1, #16
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fd10 	bl	8006298 <rcvr_datablock>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8113 	beq.w	8006aa6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006880:	7b3b      	ldrb	r3, [r7, #12]
 8006882:	099b      	lsrs	r3, r3, #6
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	d111      	bne.n	80068ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800688a:	7d7b      	ldrb	r3, [r7, #21]
 800688c:	461a      	mov	r2, r3
 800688e:	7d3b      	ldrb	r3, [r7, #20]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	4413      	add	r3, r2
 8006894:	461a      	mov	r2, r3
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	041b      	lsls	r3, r3, #16
 800689a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800689e:	4413      	add	r3, r2
 80068a0:	3301      	adds	r3, #1
 80068a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	029a      	lsls	r2, r3, #10
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e028      	b.n	8006900 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80068ae:	7c7b      	ldrb	r3, [r7, #17]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	7dbb      	ldrb	r3, [r7, #22]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4413      	add	r3, r2
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	7d7b      	ldrb	r3, [r7, #21]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f003 0306 	and.w	r3, r3, #6
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	3302      	adds	r3, #2
 80068d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80068d6:	7d3b      	ldrb	r3, [r7, #20]
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	7cfb      	ldrb	r3, [r7, #19]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	7cbb      	ldrb	r3, [r7, #18]
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068ec:	4413      	add	r3, r2
 80068ee:	3301      	adds	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80068f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80068f6:	3b09      	subs	r3, #9
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	409a      	lsls	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006906:	e0ce      	b.n	8006aa6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006908:	4b71      	ldr	r3, [pc, #452]	; (8006ad0 <USER_SPI_ioctl+0x2dc>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d031      	beq.n	8006978 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006914:	2100      	movs	r1, #0
 8006916:	208d      	movs	r0, #141	; 0x8d
 8006918:	f7ff fd19 	bl	800634e <send_cmd>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80c3 	bne.w	8006aaa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006924:	20ff      	movs	r0, #255	; 0xff
 8006926:	f7ff fc21 	bl	800616c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	2110      	movs	r1, #16
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fcb1 	bl	8006298 <rcvr_datablock>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80b6 	beq.w	8006aaa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800693e:	2330      	movs	r3, #48	; 0x30
 8006940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006944:	e007      	b.n	8006956 <USER_SPI_ioctl+0x162>
 8006946:	20ff      	movs	r0, #255	; 0xff
 8006948:	f7ff fc10 	bl	800616c <xchg_spi>
 800694c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006950:	3b01      	subs	r3, #1
 8006952:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006956:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f3      	bne.n	8006946 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800695e:	7dbb      	ldrb	r3, [r7, #22]
 8006960:	091b      	lsrs	r3, r3, #4
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	2310      	movs	r3, #16
 8006968:	fa03 f202 	lsl.w	r2, r3, r2
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006976:	e098      	b.n	8006aaa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006978:	2100      	movs	r1, #0
 800697a:	2009      	movs	r0, #9
 800697c:	f7ff fce7 	bl	800634e <send_cmd>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 8091 	bne.w	8006aaa <USER_SPI_ioctl+0x2b6>
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	2110      	movs	r1, #16
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fc82 	bl	8006298 <rcvr_datablock>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8087 	beq.w	8006aaa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800699c:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <USER_SPI_ioctl+0x2dc>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d012      	beq.n	80069ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80069a8:	7dbb      	ldrb	r3, [r7, #22]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80069b0:	7dfa      	ldrb	r2, [r7, #23]
 80069b2:	09d2      	lsrs	r2, r2, #7
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	4413      	add	r3, r2
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	7e7b      	ldrb	r3, [r7, #25]
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e013      	b.n	80069f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80069ce:	7dbb      	ldrb	r3, [r7, #22]
 80069d0:	109b      	asrs	r3, r3, #2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	3301      	adds	r3, #1
 80069da:	7dfa      	ldrb	r2, [r7, #23]
 80069dc:	00d2      	lsls	r2, r2, #3
 80069de:	f002 0218 	and.w	r2, r2, #24
 80069e2:	7df9      	ldrb	r1, [r7, #23]
 80069e4:	0949      	lsrs	r1, r1, #5
 80069e6:	b2c9      	uxtb	r1, r1
 80069e8:	440a      	add	r2, r1
 80069ea:	3201      	adds	r2, #1
 80069ec:	fb02 f303 	mul.w	r3, r2, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80069fc:	e055      	b.n	8006aaa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80069fe:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <USER_SPI_ioctl+0x2dc>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 0306 	and.w	r3, r3, #6
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d051      	beq.n	8006aae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006a0a:	f107 020c 	add.w	r2, r7, #12
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	210b      	movs	r1, #11
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff feee 	bl	80067f4 <USER_SPI_ioctl>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d149      	bne.n	8006ab2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006a1e:	7b3b      	ldrb	r3, [r7, #12]
 8006a20:	099b      	lsrs	r3, r3, #6
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <USER_SPI_ioctl+0x23e>
 8006a28:	7dbb      	ldrb	r3, [r7, #22]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d041      	beq.n	8006ab6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <USER_SPI_ioctl+0x2dc>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	025b      	lsls	r3, r3, #9
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	025b      	lsls	r3, r3, #9
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5c:	2020      	movs	r0, #32
 8006a5e:	f7ff fc76 	bl	800634e <send_cmd>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d128      	bne.n	8006aba <USER_SPI_ioctl+0x2c6>
 8006a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a6a:	2021      	movs	r0, #33	; 0x21
 8006a6c:	f7ff fc6f 	bl	800634e <send_cmd>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d121      	bne.n	8006aba <USER_SPI_ioctl+0x2c6>
 8006a76:	2100      	movs	r1, #0
 8006a78:	2026      	movs	r0, #38	; 0x26
 8006a7a:	f7ff fc68 	bl	800634e <send_cmd>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d11a      	bne.n	8006aba <USER_SPI_ioctl+0x2c6>
 8006a84:	f247 5030 	movw	r0, #30000	; 0x7530
 8006a88:	f7ff fbb6 	bl	80061f8 <wait_ready>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d013      	beq.n	8006aba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006a92:	2300      	movs	r3, #0
 8006a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006a98:	e00f      	b.n	8006aba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006aa0:	e00c      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		break;
 8006aa2:	bf00      	nop
 8006aa4:	e00a      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		break;
 8006aa6:	bf00      	nop
 8006aa8:	e008      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		break;
 8006aaa:	bf00      	nop
 8006aac:	e006      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006aae:	bf00      	nop
 8006ab0:	e004      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006ab2:	bf00      	nop
 8006ab4:	e002      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006ab6:	bf00      	nop
 8006ab8:	e000      	b.n	8006abc <USER_SPI_ioctl+0x2c8>
		break;
 8006aba:	bf00      	nop
	}

	despiselect();
 8006abc:	f7ff fbc0 	bl	8006240 <despiselect>

	return res;
 8006ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3730      	adds	r7, #48	; 0x30
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000020 	.word	0x20000020
 8006ad0:	20000668 	.word	0x20000668

08006ad4 <std>:
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	e9c0 3300 	strd	r3, r3, [r0]
 8006ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae2:	6083      	str	r3, [r0, #8]
 8006ae4:	8181      	strh	r1, [r0, #12]
 8006ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae8:	81c2      	strh	r2, [r0, #14]
 8006aea:	6183      	str	r3, [r0, #24]
 8006aec:	4619      	mov	r1, r3
 8006aee:	2208      	movs	r2, #8
 8006af0:	305c      	adds	r0, #92	; 0x5c
 8006af2:	f000 f9f7 	bl	8006ee4 <memset>
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <std+0x58>)
 8006af8:	6263      	str	r3, [r4, #36]	; 0x24
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <std+0x5c>)
 8006afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <std+0x60>)
 8006b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <std+0x64>)
 8006b04:	6323      	str	r3, [r4, #48]	; 0x30
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <std+0x68>)
 8006b08:	6224      	str	r4, [r4, #32]
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d006      	beq.n	8006b1c <std+0x48>
 8006b0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b12:	4294      	cmp	r4, r2
 8006b14:	d002      	beq.n	8006b1c <std+0x48>
 8006b16:	33d0      	adds	r3, #208	; 0xd0
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d105      	bne.n	8006b28 <std+0x54>
 8006b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b24:	f000 ba56 	b.w	8006fd4 <__retarget_lock_init_recursive>
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08006d35 	.word	0x08006d35
 8006b30:	08006d57 	.word	0x08006d57
 8006b34:	08006d8f 	.word	0x08006d8f
 8006b38:	08006db3 	.word	0x08006db3
 8006b3c:	20000674 	.word	0x20000674

08006b40 <stdio_exit_handler>:
 8006b40:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <stdio_exit_handler+0xc>)
 8006b42:	4903      	ldr	r1, [pc, #12]	; (8006b50 <stdio_exit_handler+0x10>)
 8006b44:	4803      	ldr	r0, [pc, #12]	; (8006b54 <stdio_exit_handler+0x14>)
 8006b46:	f000 b869 	b.w	8006c1c <_fwalk_sglue>
 8006b4a:	bf00      	nop
 8006b4c:	20000024 	.word	0x20000024
 8006b50:	08007881 	.word	0x08007881
 8006b54:	20000030 	.word	0x20000030

08006b58 <cleanup_stdio>:
 8006b58:	6841      	ldr	r1, [r0, #4]
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <cleanup_stdio+0x34>)
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	4604      	mov	r4, r0
 8006b62:	d001      	beq.n	8006b68 <cleanup_stdio+0x10>
 8006b64:	f000 fe8c 	bl	8007880 <_fflush_r>
 8006b68:	68a1      	ldr	r1, [r4, #8]
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <cleanup_stdio+0x38>)
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	d002      	beq.n	8006b76 <cleanup_stdio+0x1e>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fe85 	bl	8007880 <_fflush_r>
 8006b76:	68e1      	ldr	r1, [r4, #12]
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <cleanup_stdio+0x3c>)
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d004      	beq.n	8006b88 <cleanup_stdio+0x30>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f000 be7c 	b.w	8007880 <_fflush_r>
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000674 	.word	0x20000674
 8006b90:	200006dc 	.word	0x200006dc
 8006b94:	20000744 	.word	0x20000744

08006b98 <global_stdio_init.part.0>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <global_stdio_init.part.0+0x30>)
 8006b9c:	4c0b      	ldr	r4, [pc, #44]	; (8006bcc <global_stdio_init.part.0+0x34>)
 8006b9e:	4a0c      	ldr	r2, [pc, #48]	; (8006bd0 <global_stdio_init.part.0+0x38>)
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	f7ff ff94 	bl	8006ad4 <std>
 8006bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	2109      	movs	r1, #9
 8006bb4:	f7ff ff8e 	bl	8006ad4 <std>
 8006bb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	f7ff bf86 	b.w	8006ad4 <std>
 8006bc8:	200007ac 	.word	0x200007ac
 8006bcc:	20000674 	.word	0x20000674
 8006bd0:	08006b41 	.word	0x08006b41

08006bd4 <__sfp_lock_acquire>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sfp_lock_acquire+0x8>)
 8006bd6:	f000 b9fe 	b.w	8006fd6 <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200007b5 	.word	0x200007b5

08006be0 <__sfp_lock_release>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sfp_lock_release+0x8>)
 8006be2:	f000 b9f9 	b.w	8006fd8 <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	200007b5 	.word	0x200007b5

08006bec <__sinit>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4604      	mov	r4, r0
 8006bf0:	f7ff fff0 	bl	8006bd4 <__sfp_lock_acquire>
 8006bf4:	6a23      	ldr	r3, [r4, #32]
 8006bf6:	b11b      	cbz	r3, 8006c00 <__sinit+0x14>
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f7ff bff0 	b.w	8006be0 <__sfp_lock_release>
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <__sinit+0x28>)
 8006c02:	6223      	str	r3, [r4, #32]
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <__sinit+0x2c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f5      	bne.n	8006bf8 <__sinit+0xc>
 8006c0c:	f7ff ffc4 	bl	8006b98 <global_stdio_init.part.0>
 8006c10:	e7f2      	b.n	8006bf8 <__sinit+0xc>
 8006c12:	bf00      	nop
 8006c14:	08006b59 	.word	0x08006b59
 8006c18:	200007ac 	.word	0x200007ac

08006c1c <_fwalk_sglue>:
 8006c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	4607      	mov	r7, r0
 8006c22:	4688      	mov	r8, r1
 8006c24:	4614      	mov	r4, r2
 8006c26:	2600      	movs	r6, #0
 8006c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c30:	d505      	bpl.n	8006c3e <_fwalk_sglue+0x22>
 8006c32:	6824      	ldr	r4, [r4, #0]
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d1f7      	bne.n	8006c28 <_fwalk_sglue+0xc>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d907      	bls.n	8006c54 <_fwalk_sglue+0x38>
 8006c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	d003      	beq.n	8006c54 <_fwalk_sglue+0x38>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4638      	mov	r0, r7
 8006c50:	47c0      	blx	r8
 8006c52:	4306      	orrs	r6, r0
 8006c54:	3568      	adds	r5, #104	; 0x68
 8006c56:	e7e9      	b.n	8006c2c <_fwalk_sglue+0x10>

08006c58 <iprintf>:
 8006c58:	b40f      	push	{r0, r1, r2, r3}
 8006c5a:	b507      	push	{r0, r1, r2, lr}
 8006c5c:	4906      	ldr	r1, [pc, #24]	; (8006c78 <iprintf+0x20>)
 8006c5e:	ab04      	add	r3, sp, #16
 8006c60:	6808      	ldr	r0, [r1, #0]
 8006c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c66:	6881      	ldr	r1, [r0, #8]
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	f000 fad9 	bl	8007220 <_vfiprintf_r>
 8006c6e:	b003      	add	sp, #12
 8006c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr
 8006c78:	2000007c 	.word	0x2000007c

08006c7c <_puts_r>:
 8006c7c:	6a03      	ldr	r3, [r0, #32]
 8006c7e:	b570      	push	{r4, r5, r6, lr}
 8006c80:	6884      	ldr	r4, [r0, #8]
 8006c82:	4605      	mov	r5, r0
 8006c84:	460e      	mov	r6, r1
 8006c86:	b90b      	cbnz	r3, 8006c8c <_puts_r+0x10>
 8006c88:	f7ff ffb0 	bl	8006bec <__sinit>
 8006c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c8e:	07db      	lsls	r3, r3, #31
 8006c90:	d405      	bmi.n	8006c9e <_puts_r+0x22>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	0598      	lsls	r0, r3, #22
 8006c96:	d402      	bmi.n	8006c9e <_puts_r+0x22>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f000 f99c 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	0719      	lsls	r1, r3, #28
 8006ca2:	d513      	bpl.n	8006ccc <_puts_r+0x50>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	b18b      	cbz	r3, 8006ccc <_puts_r+0x50>
 8006ca8:	3e01      	subs	r6, #1
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	60a3      	str	r3, [r4, #8]
 8006cb4:	b9e9      	cbnz	r1, 8006cf2 <_puts_r+0x76>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da2e      	bge.n	8006d18 <_puts_r+0x9c>
 8006cba:	4622      	mov	r2, r4
 8006cbc:	210a      	movs	r1, #10
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f87b 	bl	8006dba <__swbuf_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d007      	beq.n	8006cd8 <_puts_r+0x5c>
 8006cc8:	250a      	movs	r5, #10
 8006cca:	e007      	b.n	8006cdc <_puts_r+0x60>
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f8b0 	bl	8006e34 <__swsetup_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0e7      	beq.n	8006ca8 <_puts_r+0x2c>
 8006cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cde:	07da      	lsls	r2, r3, #31
 8006ce0:	d405      	bmi.n	8006cee <_puts_r+0x72>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	059b      	lsls	r3, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_puts_r+0x72>
 8006ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cea:	f000 f975 	bl	8006fd8 <__retarget_lock_release_recursive>
 8006cee:	4628      	mov	r0, r5
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da04      	bge.n	8006d00 <_puts_r+0x84>
 8006cf6:	69a2      	ldr	r2, [r4, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dc06      	bgt.n	8006d0a <_puts_r+0x8e>
 8006cfc:	290a      	cmp	r1, #10
 8006cfe:	d004      	beq.n	8006d0a <_puts_r+0x8e>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	6022      	str	r2, [r4, #0]
 8006d06:	7019      	strb	r1, [r3, #0]
 8006d08:	e7cf      	b.n	8006caa <_puts_r+0x2e>
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 f854 	bl	8006dba <__swbuf_r>
 8006d12:	3001      	adds	r0, #1
 8006d14:	d1c9      	bne.n	8006caa <_puts_r+0x2e>
 8006d16:	e7df      	b.n	8006cd8 <_puts_r+0x5c>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	250a      	movs	r5, #10
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	701d      	strb	r5, [r3, #0]
 8006d22:	e7db      	b.n	8006cdc <_puts_r+0x60>

08006d24 <puts>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <puts+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f7ff bfa7 	b.w	8006c7c <_puts_r>
 8006d2e:	bf00      	nop
 8006d30:	2000007c 	.word	0x2000007c

08006d34 <__sread>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	f000 f8fc 	bl	8006f38 <_read_r>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	bfab      	itete	ge
 8006d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d46:	89a3      	ldrhlt	r3, [r4, #12]
 8006d48:	181b      	addge	r3, r3, r0
 8006d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d4e:	bfac      	ite	ge
 8006d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d52:	81a3      	strhlt	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__swrite>:
 8006d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	05db      	lsls	r3, r3, #23
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4616      	mov	r6, r2
 8006d66:	d505      	bpl.n	8006d74 <__swrite+0x1e>
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f000 f8d0 	bl	8006f14 <_lseek_r>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	4628      	mov	r0, r5
 8006d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8a:	f000 b8e7 	b.w	8006f5c <_write_r>

08006d8e <__sseek>:
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	460c      	mov	r4, r1
 8006d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d96:	f000 f8bd 	bl	8006f14 <_lseek_r>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	bf15      	itete	ne
 8006da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006daa:	81a3      	strheq	r3, [r4, #12]
 8006dac:	bf18      	it	ne
 8006dae:	81a3      	strhne	r3, [r4, #12]
 8006db0:	bd10      	pop	{r4, pc}

08006db2 <__sclose>:
 8006db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db6:	f000 b89d 	b.w	8006ef4 <_close_r>

08006dba <__swbuf_r>:
 8006dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbc:	460e      	mov	r6, r1
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	b118      	cbz	r0, 8006dcc <__swbuf_r+0x12>
 8006dc4:	6a03      	ldr	r3, [r0, #32]
 8006dc6:	b90b      	cbnz	r3, 8006dcc <__swbuf_r+0x12>
 8006dc8:	f7ff ff10 	bl	8006bec <__sinit>
 8006dcc:	69a3      	ldr	r3, [r4, #24]
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	071a      	lsls	r2, r3, #28
 8006dd4:	d525      	bpl.n	8006e22 <__swbuf_r+0x68>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	b31b      	cbz	r3, 8006e22 <__swbuf_r+0x68>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	6922      	ldr	r2, [r4, #16]
 8006dde:	1a98      	subs	r0, r3, r2
 8006de0:	6963      	ldr	r3, [r4, #20]
 8006de2:	b2f6      	uxtb	r6, r6
 8006de4:	4283      	cmp	r3, r0
 8006de6:	4637      	mov	r7, r6
 8006de8:	dc04      	bgt.n	8006df4 <__swbuf_r+0x3a>
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 fd47 	bl	8007880 <_fflush_r>
 8006df2:	b9e0      	cbnz	r0, 8006e2e <__swbuf_r+0x74>
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	701e      	strb	r6, [r3, #0]
 8006e02:	6962      	ldr	r2, [r4, #20]
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d004      	beq.n	8006e14 <__swbuf_r+0x5a>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	07db      	lsls	r3, r3, #31
 8006e0e:	d506      	bpl.n	8006e1e <__swbuf_r+0x64>
 8006e10:	2e0a      	cmp	r6, #10
 8006e12:	d104      	bne.n	8006e1e <__swbuf_r+0x64>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fd32 	bl	8007880 <_fflush_r>
 8006e1c:	b938      	cbnz	r0, 8006e2e <__swbuf_r+0x74>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e22:	4621      	mov	r1, r4
 8006e24:	4628      	mov	r0, r5
 8006e26:	f000 f805 	bl	8006e34 <__swsetup_r>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d0d5      	beq.n	8006dda <__swbuf_r+0x20>
 8006e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8006e32:	e7f4      	b.n	8006e1e <__swbuf_r+0x64>

08006e34 <__swsetup_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <__swsetup_r+0xac>)
 8006e38:	4605      	mov	r5, r0
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	b118      	cbz	r0, 8006e48 <__swsetup_r+0x14>
 8006e40:	6a03      	ldr	r3, [r0, #32]
 8006e42:	b90b      	cbnz	r3, 8006e48 <__swsetup_r+0x14>
 8006e44:	f7ff fed2 	bl	8006bec <__sinit>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e4e:	0718      	lsls	r0, r3, #28
 8006e50:	d422      	bmi.n	8006e98 <__swsetup_r+0x64>
 8006e52:	06d9      	lsls	r1, r3, #27
 8006e54:	d407      	bmi.n	8006e66 <__swsetup_r+0x32>
 8006e56:	2309      	movs	r3, #9
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e034      	b.n	8006ed0 <__swsetup_r+0x9c>
 8006e66:	0758      	lsls	r0, r3, #29
 8006e68:	d512      	bpl.n	8006e90 <__swsetup_r+0x5c>
 8006e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6c:	b141      	cbz	r1, 8006e80 <__swsetup_r+0x4c>
 8006e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e72:	4299      	cmp	r1, r3
 8006e74:	d002      	beq.n	8006e7c <__swsetup_r+0x48>
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 f8b0 	bl	8006fdc <_free_r>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f043 0308 	orr.w	r3, r3, #8
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	b94b      	cbnz	r3, 8006eb0 <__swsetup_r+0x7c>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea6:	d003      	beq.n	8006eb0 <__swsetup_r+0x7c>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 fd36 	bl	800791c <__smakebuf_r>
 8006eb0:	89a0      	ldrh	r0, [r4, #12]
 8006eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb6:	f010 0301 	ands.w	r3, r0, #1
 8006eba:	d00a      	beq.n	8006ed2 <__swsetup_r+0x9e>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	6963      	ldr	r3, [r4, #20]
 8006ec2:	425b      	negs	r3, r3
 8006ec4:	61a3      	str	r3, [r4, #24]
 8006ec6:	6923      	ldr	r3, [r4, #16]
 8006ec8:	b943      	cbnz	r3, 8006edc <__swsetup_r+0xa8>
 8006eca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ece:	d1c4      	bne.n	8006e5a <__swsetup_r+0x26>
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	0781      	lsls	r1, r0, #30
 8006ed4:	bf58      	it	pl
 8006ed6:	6963      	ldrpl	r3, [r4, #20]
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	e7f4      	b.n	8006ec6 <__swsetup_r+0x92>
 8006edc:	2000      	movs	r0, #0
 8006ede:	e7f7      	b.n	8006ed0 <__swsetup_r+0x9c>
 8006ee0:	2000007c 	.word	0x2000007c

08006ee4 <memset>:
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <_close_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d06      	ldr	r5, [pc, #24]	; (8006f10 <_close_r+0x1c>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fa f8e1 	bl	80010c6 <_close>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_close_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_close_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200007b0 	.word	0x200007b0

08006f14 <_lseek_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	; (8006f34 <_lseek_r+0x20>)
 8006f18:	4604      	mov	r4, r0
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	2200      	movs	r2, #0
 8006f20:	602a      	str	r2, [r5, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f7fa f8f6 	bl	8001114 <_lseek>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d102      	bne.n	8006f32 <_lseek_r+0x1e>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	b103      	cbz	r3, 8006f32 <_lseek_r+0x1e>
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	200007b0 	.word	0x200007b0

08006f38 <_read_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	; (8006f58 <_read_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7fa f884 	bl	8001054 <_read>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_read_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_read_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	200007b0 	.word	0x200007b0

08006f5c <_write_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_write_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fa f88f 	bl	800108e <_write>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_write_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_write_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	200007b0 	.word	0x200007b0

08006f80 <__errno>:
 8006f80:	4b01      	ldr	r3, [pc, #4]	; (8006f88 <__errno+0x8>)
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	2000007c 	.word	0x2000007c

08006f8c <__libc_init_array>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4d0d      	ldr	r5, [pc, #52]	; (8006fc4 <__libc_init_array+0x38>)
 8006f90:	4c0d      	ldr	r4, [pc, #52]	; (8006fc8 <__libc_init_array+0x3c>)
 8006f92:	1b64      	subs	r4, r4, r5
 8006f94:	10a4      	asrs	r4, r4, #2
 8006f96:	2600      	movs	r6, #0
 8006f98:	42a6      	cmp	r6, r4
 8006f9a:	d109      	bne.n	8006fb0 <__libc_init_array+0x24>
 8006f9c:	4d0b      	ldr	r5, [pc, #44]	; (8006fcc <__libc_init_array+0x40>)
 8006f9e:	4c0c      	ldr	r4, [pc, #48]	; (8006fd0 <__libc_init_array+0x44>)
 8006fa0:	f000 fd2a 	bl	80079f8 <_init>
 8006fa4:	1b64      	subs	r4, r4, r5
 8006fa6:	10a4      	asrs	r4, r4, #2
 8006fa8:	2600      	movs	r6, #0
 8006faa:	42a6      	cmp	r6, r4
 8006fac:	d105      	bne.n	8006fba <__libc_init_array+0x2e>
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb4:	4798      	blx	r3
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	e7ee      	b.n	8006f98 <__libc_init_array+0xc>
 8006fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbe:	4798      	blx	r3
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	e7f2      	b.n	8006faa <__libc_init_array+0x1e>
 8006fc4:	08007b3c 	.word	0x08007b3c
 8006fc8:	08007b3c 	.word	0x08007b3c
 8006fcc:	08007b3c 	.word	0x08007b3c
 8006fd0:	08007b40 	.word	0x08007b40

08006fd4 <__retarget_lock_init_recursive>:
 8006fd4:	4770      	bx	lr

08006fd6 <__retarget_lock_acquire_recursive>:
 8006fd6:	4770      	bx	lr

08006fd8 <__retarget_lock_release_recursive>:
 8006fd8:	4770      	bx	lr
	...

08006fdc <_free_r>:
 8006fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d044      	beq.n	800706c <_free_r+0x90>
 8006fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe6:	9001      	str	r0, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f1a1 0404 	sub.w	r4, r1, #4
 8006fee:	bfb8      	it	lt
 8006ff0:	18e4      	addlt	r4, r4, r3
 8006ff2:	f000 f8df 	bl	80071b4 <__malloc_lock>
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	; (8007070 <_free_r+0x94>)
 8006ff8:	9801      	ldr	r0, [sp, #4]
 8006ffa:	6813      	ldr	r3, [r2, #0]
 8006ffc:	b933      	cbnz	r3, 800700c <_free_r+0x30>
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	6014      	str	r4, [r2, #0]
 8007002:	b003      	add	sp, #12
 8007004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007008:	f000 b8da 	b.w	80071c0 <__malloc_unlock>
 800700c:	42a3      	cmp	r3, r4
 800700e:	d908      	bls.n	8007022 <_free_r+0x46>
 8007010:	6825      	ldr	r5, [r4, #0]
 8007012:	1961      	adds	r1, r4, r5
 8007014:	428b      	cmp	r3, r1
 8007016:	bf01      	itttt	eq
 8007018:	6819      	ldreq	r1, [r3, #0]
 800701a:	685b      	ldreq	r3, [r3, #4]
 800701c:	1949      	addeq	r1, r1, r5
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	e7ed      	b.n	8006ffe <_free_r+0x22>
 8007022:	461a      	mov	r2, r3
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b10b      	cbz	r3, 800702c <_free_r+0x50>
 8007028:	42a3      	cmp	r3, r4
 800702a:	d9fa      	bls.n	8007022 <_free_r+0x46>
 800702c:	6811      	ldr	r1, [r2, #0]
 800702e:	1855      	adds	r5, r2, r1
 8007030:	42a5      	cmp	r5, r4
 8007032:	d10b      	bne.n	800704c <_free_r+0x70>
 8007034:	6824      	ldr	r4, [r4, #0]
 8007036:	4421      	add	r1, r4
 8007038:	1854      	adds	r4, r2, r1
 800703a:	42a3      	cmp	r3, r4
 800703c:	6011      	str	r1, [r2, #0]
 800703e:	d1e0      	bne.n	8007002 <_free_r+0x26>
 8007040:	681c      	ldr	r4, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	6053      	str	r3, [r2, #4]
 8007046:	440c      	add	r4, r1
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	e7da      	b.n	8007002 <_free_r+0x26>
 800704c:	d902      	bls.n	8007054 <_free_r+0x78>
 800704e:	230c      	movs	r3, #12
 8007050:	6003      	str	r3, [r0, #0]
 8007052:	e7d6      	b.n	8007002 <_free_r+0x26>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	1961      	adds	r1, r4, r5
 8007058:	428b      	cmp	r3, r1
 800705a:	bf04      	itt	eq
 800705c:	6819      	ldreq	r1, [r3, #0]
 800705e:	685b      	ldreq	r3, [r3, #4]
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	bf04      	itt	eq
 8007064:	1949      	addeq	r1, r1, r5
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	6054      	str	r4, [r2, #4]
 800706a:	e7ca      	b.n	8007002 <_free_r+0x26>
 800706c:	b003      	add	sp, #12
 800706e:	bd30      	pop	{r4, r5, pc}
 8007070:	200007b8 	.word	0x200007b8

08007074 <sbrk_aligned>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4e0e      	ldr	r6, [pc, #56]	; (80070b0 <sbrk_aligned+0x3c>)
 8007078:	460c      	mov	r4, r1
 800707a:	6831      	ldr	r1, [r6, #0]
 800707c:	4605      	mov	r5, r0
 800707e:	b911      	cbnz	r1, 8007086 <sbrk_aligned+0x12>
 8007080:	f000 fcaa 	bl	80079d8 <_sbrk_r>
 8007084:	6030      	str	r0, [r6, #0]
 8007086:	4621      	mov	r1, r4
 8007088:	4628      	mov	r0, r5
 800708a:	f000 fca5 	bl	80079d8 <_sbrk_r>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d00a      	beq.n	80070a8 <sbrk_aligned+0x34>
 8007092:	1cc4      	adds	r4, r0, #3
 8007094:	f024 0403 	bic.w	r4, r4, #3
 8007098:	42a0      	cmp	r0, r4
 800709a:	d007      	beq.n	80070ac <sbrk_aligned+0x38>
 800709c:	1a21      	subs	r1, r4, r0
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fc9a 	bl	80079d8 <_sbrk_r>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d101      	bne.n	80070ac <sbrk_aligned+0x38>
 80070a8:	f04f 34ff 	mov.w	r4, #4294967295
 80070ac:	4620      	mov	r0, r4
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	200007bc 	.word	0x200007bc

080070b4 <_malloc_r>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	1ccd      	adds	r5, r1, #3
 80070ba:	f025 0503 	bic.w	r5, r5, #3
 80070be:	3508      	adds	r5, #8
 80070c0:	2d0c      	cmp	r5, #12
 80070c2:	bf38      	it	cc
 80070c4:	250c      	movcc	r5, #12
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	4607      	mov	r7, r0
 80070ca:	db01      	blt.n	80070d0 <_malloc_r+0x1c>
 80070cc:	42a9      	cmp	r1, r5
 80070ce:	d905      	bls.n	80070dc <_malloc_r+0x28>
 80070d0:	230c      	movs	r3, #12
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	2600      	movs	r6, #0
 80070d6:	4630      	mov	r0, r6
 80070d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071b0 <_malloc_r+0xfc>
 80070e0:	f000 f868 	bl	80071b4 <__malloc_lock>
 80070e4:	f8d8 3000 	ldr.w	r3, [r8]
 80070e8:	461c      	mov	r4, r3
 80070ea:	bb5c      	cbnz	r4, 8007144 <_malloc_r+0x90>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff ffc0 	bl	8007074 <sbrk_aligned>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	4604      	mov	r4, r0
 80070f8:	d155      	bne.n	80071a6 <_malloc_r+0xf2>
 80070fa:	f8d8 4000 	ldr.w	r4, [r8]
 80070fe:	4626      	mov	r6, r4
 8007100:	2e00      	cmp	r6, #0
 8007102:	d145      	bne.n	8007190 <_malloc_r+0xdc>
 8007104:	2c00      	cmp	r4, #0
 8007106:	d048      	beq.n	800719a <_malloc_r+0xe6>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	4631      	mov	r1, r6
 800710c:	4638      	mov	r0, r7
 800710e:	eb04 0903 	add.w	r9, r4, r3
 8007112:	f000 fc61 	bl	80079d8 <_sbrk_r>
 8007116:	4581      	cmp	r9, r0
 8007118:	d13f      	bne.n	800719a <_malloc_r+0xe6>
 800711a:	6821      	ldr	r1, [r4, #0]
 800711c:	1a6d      	subs	r5, r5, r1
 800711e:	4629      	mov	r1, r5
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff ffa7 	bl	8007074 <sbrk_aligned>
 8007126:	3001      	adds	r0, #1
 8007128:	d037      	beq.n	800719a <_malloc_r+0xe6>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	442b      	add	r3, r5
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	f8d8 3000 	ldr.w	r3, [r8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d038      	beq.n	80071aa <_malloc_r+0xf6>
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	42a2      	cmp	r2, r4
 800713c:	d12b      	bne.n	8007196 <_malloc_r+0xe2>
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	e00f      	b.n	8007164 <_malloc_r+0xb0>
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	1b52      	subs	r2, r2, r5
 8007148:	d41f      	bmi.n	800718a <_malloc_r+0xd6>
 800714a:	2a0b      	cmp	r2, #11
 800714c:	d917      	bls.n	800717e <_malloc_r+0xca>
 800714e:	1961      	adds	r1, r4, r5
 8007150:	42a3      	cmp	r3, r4
 8007152:	6025      	str	r5, [r4, #0]
 8007154:	bf18      	it	ne
 8007156:	6059      	strne	r1, [r3, #4]
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	bf08      	it	eq
 800715c:	f8c8 1000 	streq.w	r1, [r8]
 8007160:	5162      	str	r2, [r4, r5]
 8007162:	604b      	str	r3, [r1, #4]
 8007164:	4638      	mov	r0, r7
 8007166:	f104 060b 	add.w	r6, r4, #11
 800716a:	f000 f829 	bl	80071c0 <__malloc_unlock>
 800716e:	f026 0607 	bic.w	r6, r6, #7
 8007172:	1d23      	adds	r3, r4, #4
 8007174:	1af2      	subs	r2, r6, r3
 8007176:	d0ae      	beq.n	80070d6 <_malloc_r+0x22>
 8007178:	1b9b      	subs	r3, r3, r6
 800717a:	50a3      	str	r3, [r4, r2]
 800717c:	e7ab      	b.n	80070d6 <_malloc_r+0x22>
 800717e:	42a3      	cmp	r3, r4
 8007180:	6862      	ldr	r2, [r4, #4]
 8007182:	d1dd      	bne.n	8007140 <_malloc_r+0x8c>
 8007184:	f8c8 2000 	str.w	r2, [r8]
 8007188:	e7ec      	b.n	8007164 <_malloc_r+0xb0>
 800718a:	4623      	mov	r3, r4
 800718c:	6864      	ldr	r4, [r4, #4]
 800718e:	e7ac      	b.n	80070ea <_malloc_r+0x36>
 8007190:	4634      	mov	r4, r6
 8007192:	6876      	ldr	r6, [r6, #4]
 8007194:	e7b4      	b.n	8007100 <_malloc_r+0x4c>
 8007196:	4613      	mov	r3, r2
 8007198:	e7cc      	b.n	8007134 <_malloc_r+0x80>
 800719a:	230c      	movs	r3, #12
 800719c:	603b      	str	r3, [r7, #0]
 800719e:	4638      	mov	r0, r7
 80071a0:	f000 f80e 	bl	80071c0 <__malloc_unlock>
 80071a4:	e797      	b.n	80070d6 <_malloc_r+0x22>
 80071a6:	6025      	str	r5, [r4, #0]
 80071a8:	e7dc      	b.n	8007164 <_malloc_r+0xb0>
 80071aa:	605b      	str	r3, [r3, #4]
 80071ac:	deff      	udf	#255	; 0xff
 80071ae:	bf00      	nop
 80071b0:	200007b8 	.word	0x200007b8

080071b4 <__malloc_lock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__malloc_lock+0x8>)
 80071b6:	f7ff bf0e 	b.w	8006fd6 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	200007b4 	.word	0x200007b4

080071c0 <__malloc_unlock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__malloc_unlock+0x8>)
 80071c2:	f7ff bf09 	b.w	8006fd8 <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	200007b4 	.word	0x200007b4

080071cc <__sfputc_r>:
 80071cc:	6893      	ldr	r3, [r2, #8]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	b410      	push	{r4}
 80071d4:	6093      	str	r3, [r2, #8]
 80071d6:	da08      	bge.n	80071ea <__sfputc_r+0x1e>
 80071d8:	6994      	ldr	r4, [r2, #24]
 80071da:	42a3      	cmp	r3, r4
 80071dc:	db01      	blt.n	80071e2 <__sfputc_r+0x16>
 80071de:	290a      	cmp	r1, #10
 80071e0:	d103      	bne.n	80071ea <__sfputc_r+0x1e>
 80071e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e6:	f7ff bde8 	b.w	8006dba <__swbuf_r>
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	1c58      	adds	r0, r3, #1
 80071ee:	6010      	str	r0, [r2, #0]
 80071f0:	7019      	strb	r1, [r3, #0]
 80071f2:	4608      	mov	r0, r1
 80071f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <__sfputs_r>:
 80071fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4614      	mov	r4, r2
 8007202:	18d5      	adds	r5, r2, r3
 8007204:	42ac      	cmp	r4, r5
 8007206:	d101      	bne.n	800720c <__sfputs_r+0x12>
 8007208:	2000      	movs	r0, #0
 800720a:	e007      	b.n	800721c <__sfputs_r+0x22>
 800720c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007210:	463a      	mov	r2, r7
 8007212:	4630      	mov	r0, r6
 8007214:	f7ff ffda 	bl	80071cc <__sfputc_r>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d1f3      	bne.n	8007204 <__sfputs_r+0xa>
 800721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007220 <_vfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	460d      	mov	r5, r1
 8007226:	b09d      	sub	sp, #116	; 0x74
 8007228:	4614      	mov	r4, r2
 800722a:	4698      	mov	r8, r3
 800722c:	4606      	mov	r6, r0
 800722e:	b118      	cbz	r0, 8007238 <_vfiprintf_r+0x18>
 8007230:	6a03      	ldr	r3, [r0, #32]
 8007232:	b90b      	cbnz	r3, 8007238 <_vfiprintf_r+0x18>
 8007234:	f7ff fcda 	bl	8006bec <__sinit>
 8007238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	d405      	bmi.n	800724a <_vfiprintf_r+0x2a>
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	059a      	lsls	r2, r3, #22
 8007242:	d402      	bmi.n	800724a <_vfiprintf_r+0x2a>
 8007244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007246:	f7ff fec6 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 800724a:	89ab      	ldrh	r3, [r5, #12]
 800724c:	071b      	lsls	r3, r3, #28
 800724e:	d501      	bpl.n	8007254 <_vfiprintf_r+0x34>
 8007250:	692b      	ldr	r3, [r5, #16]
 8007252:	b99b      	cbnz	r3, 800727c <_vfiprintf_r+0x5c>
 8007254:	4629      	mov	r1, r5
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff fdec 	bl	8006e34 <__swsetup_r>
 800725c:	b170      	cbz	r0, 800727c <_vfiprintf_r+0x5c>
 800725e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007260:	07dc      	lsls	r4, r3, #31
 8007262:	d504      	bpl.n	800726e <_vfiprintf_r+0x4e>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	b01d      	add	sp, #116	; 0x74
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	0598      	lsls	r0, r3, #22
 8007272:	d4f7      	bmi.n	8007264 <_vfiprintf_r+0x44>
 8007274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007276:	f7ff feaf 	bl	8006fd8 <__retarget_lock_release_recursive>
 800727a:	e7f3      	b.n	8007264 <_vfiprintf_r+0x44>
 800727c:	2300      	movs	r3, #0
 800727e:	9309      	str	r3, [sp, #36]	; 0x24
 8007280:	2320      	movs	r3, #32
 8007282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007286:	f8cd 800c 	str.w	r8, [sp, #12]
 800728a:	2330      	movs	r3, #48	; 0x30
 800728c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007440 <_vfiprintf_r+0x220>
 8007290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007294:	f04f 0901 	mov.w	r9, #1
 8007298:	4623      	mov	r3, r4
 800729a:	469a      	mov	sl, r3
 800729c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a0:	b10a      	cbz	r2, 80072a6 <_vfiprintf_r+0x86>
 80072a2:	2a25      	cmp	r2, #37	; 0x25
 80072a4:	d1f9      	bne.n	800729a <_vfiprintf_r+0x7a>
 80072a6:	ebba 0b04 	subs.w	fp, sl, r4
 80072aa:	d00b      	beq.n	80072c4 <_vfiprintf_r+0xa4>
 80072ac:	465b      	mov	r3, fp
 80072ae:	4622      	mov	r2, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffa1 	bl	80071fa <__sfputs_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	f000 80a9 	beq.w	8007410 <_vfiprintf_r+0x1f0>
 80072be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c0:	445a      	add	r2, fp
 80072c2:	9209      	str	r2, [sp, #36]	; 0x24
 80072c4:	f89a 3000 	ldrb.w	r3, [sl]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80a1 	beq.w	8007410 <_vfiprintf_r+0x1f0>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d8:	f10a 0a01 	add.w	sl, sl, #1
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	9307      	str	r3, [sp, #28]
 80072e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e4:	931a      	str	r3, [sp, #104]	; 0x68
 80072e6:	4654      	mov	r4, sl
 80072e8:	2205      	movs	r2, #5
 80072ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ee:	4854      	ldr	r0, [pc, #336]	; (8007440 <_vfiprintf_r+0x220>)
 80072f0:	f7f8 ff6e 	bl	80001d0 <memchr>
 80072f4:	9a04      	ldr	r2, [sp, #16]
 80072f6:	b9d8      	cbnz	r0, 8007330 <_vfiprintf_r+0x110>
 80072f8:	06d1      	lsls	r1, r2, #27
 80072fa:	bf44      	itt	mi
 80072fc:	2320      	movmi	r3, #32
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007302:	0713      	lsls	r3, r2, #28
 8007304:	bf44      	itt	mi
 8007306:	232b      	movmi	r3, #43	; 0x2b
 8007308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730c:	f89a 3000 	ldrb.w	r3, [sl]
 8007310:	2b2a      	cmp	r3, #42	; 0x2a
 8007312:	d015      	beq.n	8007340 <_vfiprintf_r+0x120>
 8007314:	9a07      	ldr	r2, [sp, #28]
 8007316:	4654      	mov	r4, sl
 8007318:	2000      	movs	r0, #0
 800731a:	f04f 0c0a 	mov.w	ip, #10
 800731e:	4621      	mov	r1, r4
 8007320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007324:	3b30      	subs	r3, #48	; 0x30
 8007326:	2b09      	cmp	r3, #9
 8007328:	d94d      	bls.n	80073c6 <_vfiprintf_r+0x1a6>
 800732a:	b1b0      	cbz	r0, 800735a <_vfiprintf_r+0x13a>
 800732c:	9207      	str	r2, [sp, #28]
 800732e:	e014      	b.n	800735a <_vfiprintf_r+0x13a>
 8007330:	eba0 0308 	sub.w	r3, r0, r8
 8007334:	fa09 f303 	lsl.w	r3, r9, r3
 8007338:	4313      	orrs	r3, r2
 800733a:	9304      	str	r3, [sp, #16]
 800733c:	46a2      	mov	sl, r4
 800733e:	e7d2      	b.n	80072e6 <_vfiprintf_r+0xc6>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9103      	str	r1, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfbb      	ittet	lt
 800734c:	425b      	neglt	r3, r3
 800734e:	f042 0202 	orrlt.w	r2, r2, #2
 8007352:	9307      	strge	r3, [sp, #28]
 8007354:	9307      	strlt	r3, [sp, #28]
 8007356:	bfb8      	it	lt
 8007358:	9204      	strlt	r2, [sp, #16]
 800735a:	7823      	ldrb	r3, [r4, #0]
 800735c:	2b2e      	cmp	r3, #46	; 0x2e
 800735e:	d10c      	bne.n	800737a <_vfiprintf_r+0x15a>
 8007360:	7863      	ldrb	r3, [r4, #1]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	d134      	bne.n	80073d0 <_vfiprintf_r+0x1b0>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	1d1a      	adds	r2, r3, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	9203      	str	r2, [sp, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	bfb8      	it	lt
 8007372:	f04f 33ff 	movlt.w	r3, #4294967295
 8007376:	3402      	adds	r4, #2
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007450 <_vfiprintf_r+0x230>
 800737e:	7821      	ldrb	r1, [r4, #0]
 8007380:	2203      	movs	r2, #3
 8007382:	4650      	mov	r0, sl
 8007384:	f7f8 ff24 	bl	80001d0 <memchr>
 8007388:	b138      	cbz	r0, 800739a <_vfiprintf_r+0x17a>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	eba0 000a 	sub.w	r0, r0, sl
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	4082      	lsls	r2, r0
 8007394:	4313      	orrs	r3, r2
 8007396:	3401      	adds	r4, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739e:	4829      	ldr	r0, [pc, #164]	; (8007444 <_vfiprintf_r+0x224>)
 80073a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a4:	2206      	movs	r2, #6
 80073a6:	f7f8 ff13 	bl	80001d0 <memchr>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d03f      	beq.n	800742e <_vfiprintf_r+0x20e>
 80073ae:	4b26      	ldr	r3, [pc, #152]	; (8007448 <_vfiprintf_r+0x228>)
 80073b0:	bb1b      	cbnz	r3, 80073fa <_vfiprintf_r+0x1da>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	3307      	adds	r3, #7
 80073b6:	f023 0307 	bic.w	r3, r3, #7
 80073ba:	3308      	adds	r3, #8
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	443b      	add	r3, r7
 80073c2:	9309      	str	r3, [sp, #36]	; 0x24
 80073c4:	e768      	b.n	8007298 <_vfiprintf_r+0x78>
 80073c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ca:	460c      	mov	r4, r1
 80073cc:	2001      	movs	r0, #1
 80073ce:	e7a6      	b.n	800731e <_vfiprintf_r+0xfe>
 80073d0:	2300      	movs	r3, #0
 80073d2:	3401      	adds	r4, #1
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	4619      	mov	r1, r3
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4620      	mov	r0, r4
 80073de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e2:	3a30      	subs	r2, #48	; 0x30
 80073e4:	2a09      	cmp	r2, #9
 80073e6:	d903      	bls.n	80073f0 <_vfiprintf_r+0x1d0>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0c6      	beq.n	800737a <_vfiprintf_r+0x15a>
 80073ec:	9105      	str	r1, [sp, #20]
 80073ee:	e7c4      	b.n	800737a <_vfiprintf_r+0x15a>
 80073f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f4:	4604      	mov	r4, r0
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7f0      	b.n	80073dc <_vfiprintf_r+0x1bc>
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	462a      	mov	r2, r5
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <_vfiprintf_r+0x22c>)
 8007402:	a904      	add	r1, sp, #16
 8007404:	4630      	mov	r0, r6
 8007406:	f3af 8000 	nop.w
 800740a:	4607      	mov	r7, r0
 800740c:	1c78      	adds	r0, r7, #1
 800740e:	d1d6      	bne.n	80073be <_vfiprintf_r+0x19e>
 8007410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	d405      	bmi.n	8007422 <_vfiprintf_r+0x202>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	059a      	lsls	r2, r3, #22
 800741a:	d402      	bmi.n	8007422 <_vfiprintf_r+0x202>
 800741c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800741e:	f7ff fddb 	bl	8006fd8 <__retarget_lock_release_recursive>
 8007422:	89ab      	ldrh	r3, [r5, #12]
 8007424:	065b      	lsls	r3, r3, #25
 8007426:	f53f af1d 	bmi.w	8007264 <_vfiprintf_r+0x44>
 800742a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742c:	e71c      	b.n	8007268 <_vfiprintf_r+0x48>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <_vfiprintf_r+0x22c>)
 8007436:	a904      	add	r1, sp, #16
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f879 	bl	8007530 <_printf_i>
 800743e:	e7e4      	b.n	800740a <_vfiprintf_r+0x1ea>
 8007440:	08007b00 	.word	0x08007b00
 8007444:	08007b0a 	.word	0x08007b0a
 8007448:	00000000 	.word	0x00000000
 800744c:	080071fb 	.word	0x080071fb
 8007450:	08007b06 	.word	0x08007b06

08007454 <_printf_common>:
 8007454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	4616      	mov	r6, r2
 800745a:	4699      	mov	r9, r3
 800745c:	688a      	ldr	r2, [r1, #8]
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007464:	4293      	cmp	r3, r2
 8007466:	bfb8      	it	lt
 8007468:	4613      	movlt	r3, r2
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007470:	4607      	mov	r7, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b10a      	cbz	r2, 800747a <_printf_common+0x26>
 8007476:	3301      	adds	r3, #1
 8007478:	6033      	str	r3, [r6, #0]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	0699      	lsls	r1, r3, #26
 800747e:	bf42      	ittt	mi
 8007480:	6833      	ldrmi	r3, [r6, #0]
 8007482:	3302      	addmi	r3, #2
 8007484:	6033      	strmi	r3, [r6, #0]
 8007486:	6825      	ldr	r5, [r4, #0]
 8007488:	f015 0506 	ands.w	r5, r5, #6
 800748c:	d106      	bne.n	800749c <_printf_common+0x48>
 800748e:	f104 0a19 	add.w	sl, r4, #25
 8007492:	68e3      	ldr	r3, [r4, #12]
 8007494:	6832      	ldr	r2, [r6, #0]
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	42ab      	cmp	r3, r5
 800749a:	dc26      	bgt.n	80074ea <_printf_common+0x96>
 800749c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074a0:	1e13      	subs	r3, r2, #0
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	bf18      	it	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	0692      	lsls	r2, r2, #26
 80074aa:	d42b      	bmi.n	8007504 <_printf_common+0xb0>
 80074ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074b0:	4649      	mov	r1, r9
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	3001      	adds	r0, #1
 80074b8:	d01e      	beq.n	80074f8 <_printf_common+0xa4>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6922      	ldr	r2, [r4, #16]
 80074be:	f003 0306 	and.w	r3, r3, #6
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	bf02      	ittt	eq
 80074c6:	68e5      	ldreq	r5, [r4, #12]
 80074c8:	6833      	ldreq	r3, [r6, #0]
 80074ca:	1aed      	subeq	r5, r5, r3
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	bf0c      	ite	eq
 80074d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d4:	2500      	movne	r5, #0
 80074d6:	4293      	cmp	r3, r2
 80074d8:	bfc4      	itt	gt
 80074da:	1a9b      	subgt	r3, r3, r2
 80074dc:	18ed      	addgt	r5, r5, r3
 80074de:	2600      	movs	r6, #0
 80074e0:	341a      	adds	r4, #26
 80074e2:	42b5      	cmp	r5, r6
 80074e4:	d11a      	bne.n	800751c <_printf_common+0xc8>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e008      	b.n	80074fc <_printf_common+0xa8>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	4649      	mov	r1, r9
 80074f0:	4638      	mov	r0, r7
 80074f2:	47c0      	blx	r8
 80074f4:	3001      	adds	r0, #1
 80074f6:	d103      	bne.n	8007500 <_printf_common+0xac>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	3501      	adds	r5, #1
 8007502:	e7c6      	b.n	8007492 <_printf_common+0x3e>
 8007504:	18e1      	adds	r1, r4, r3
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	2030      	movs	r0, #48	; 0x30
 800750a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800750e:	4422      	add	r2, r4
 8007510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007518:	3302      	adds	r3, #2
 800751a:	e7c7      	b.n	80074ac <_printf_common+0x58>
 800751c:	2301      	movs	r3, #1
 800751e:	4622      	mov	r2, r4
 8007520:	4649      	mov	r1, r9
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	3001      	adds	r0, #1
 8007528:	d0e6      	beq.n	80074f8 <_printf_common+0xa4>
 800752a:	3601      	adds	r6, #1
 800752c:	e7d9      	b.n	80074e2 <_printf_common+0x8e>
	...

08007530 <_printf_i>:
 8007530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	7e0f      	ldrb	r7, [r1, #24]
 8007536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007538:	2f78      	cmp	r7, #120	; 0x78
 800753a:	4691      	mov	r9, r2
 800753c:	4680      	mov	r8, r0
 800753e:	460c      	mov	r4, r1
 8007540:	469a      	mov	sl, r3
 8007542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007546:	d807      	bhi.n	8007558 <_printf_i+0x28>
 8007548:	2f62      	cmp	r7, #98	; 0x62
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x32>
 800754c:	2f00      	cmp	r7, #0
 800754e:	f000 80d4 	beq.w	80076fa <_printf_i+0x1ca>
 8007552:	2f58      	cmp	r7, #88	; 0x58
 8007554:	f000 80c0 	beq.w	80076d8 <_printf_i+0x1a8>
 8007558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800755c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007560:	e03a      	b.n	80075d8 <_printf_i+0xa8>
 8007562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007566:	2b15      	cmp	r3, #21
 8007568:	d8f6      	bhi.n	8007558 <_printf_i+0x28>
 800756a:	a101      	add	r1, pc, #4	; (adr r1, 8007570 <_printf_i+0x40>)
 800756c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075dd 	.word	0x080075dd
 8007578:	08007559 	.word	0x08007559
 800757c:	08007559 	.word	0x08007559
 8007580:	08007559 	.word	0x08007559
 8007584:	08007559 	.word	0x08007559
 8007588:	080075dd 	.word	0x080075dd
 800758c:	08007559 	.word	0x08007559
 8007590:	08007559 	.word	0x08007559
 8007594:	08007559 	.word	0x08007559
 8007598:	08007559 	.word	0x08007559
 800759c:	080076e1 	.word	0x080076e1
 80075a0:	08007609 	.word	0x08007609
 80075a4:	0800769b 	.word	0x0800769b
 80075a8:	08007559 	.word	0x08007559
 80075ac:	08007559 	.word	0x08007559
 80075b0:	08007703 	.word	0x08007703
 80075b4:	08007559 	.word	0x08007559
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007559 	.word	0x08007559
 80075c0:	08007559 	.word	0x08007559
 80075c4:	080076a3 	.word	0x080076a3
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	602a      	str	r2, [r5, #0]
 80075d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d8:	2301      	movs	r3, #1
 80075da:	e09f      	b.n	800771c <_printf_i+0x1ec>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	0607      	lsls	r7, r0, #24
 80075e2:	f103 0104 	add.w	r1, r3, #4
 80075e6:	6029      	str	r1, [r5, #0]
 80075e8:	d501      	bpl.n	80075ee <_printf_i+0xbe>
 80075ea:	681e      	ldr	r6, [r3, #0]
 80075ec:	e003      	b.n	80075f6 <_printf_i+0xc6>
 80075ee:	0646      	lsls	r6, r0, #25
 80075f0:	d5fb      	bpl.n	80075ea <_printf_i+0xba>
 80075f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	da03      	bge.n	8007602 <_printf_i+0xd2>
 80075fa:	232d      	movs	r3, #45	; 0x2d
 80075fc:	4276      	negs	r6, r6
 80075fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007602:	485a      	ldr	r0, [pc, #360]	; (800776c <_printf_i+0x23c>)
 8007604:	230a      	movs	r3, #10
 8007606:	e012      	b.n	800762e <_printf_i+0xfe>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	1d19      	adds	r1, r3, #4
 800760e:	6029      	str	r1, [r5, #0]
 8007610:	0605      	lsls	r5, r0, #24
 8007612:	d501      	bpl.n	8007618 <_printf_i+0xe8>
 8007614:	681e      	ldr	r6, [r3, #0]
 8007616:	e002      	b.n	800761e <_printf_i+0xee>
 8007618:	0641      	lsls	r1, r0, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0xe4>
 800761c:	881e      	ldrh	r6, [r3, #0]
 800761e:	4853      	ldr	r0, [pc, #332]	; (800776c <_printf_i+0x23c>)
 8007620:	2f6f      	cmp	r7, #111	; 0x6f
 8007622:	bf0c      	ite	eq
 8007624:	2308      	moveq	r3, #8
 8007626:	230a      	movne	r3, #10
 8007628:	2100      	movs	r1, #0
 800762a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800762e:	6865      	ldr	r5, [r4, #4]
 8007630:	60a5      	str	r5, [r4, #8]
 8007632:	2d00      	cmp	r5, #0
 8007634:	bfa2      	ittt	ge
 8007636:	6821      	ldrge	r1, [r4, #0]
 8007638:	f021 0104 	bicge.w	r1, r1, #4
 800763c:	6021      	strge	r1, [r4, #0]
 800763e:	b90e      	cbnz	r6, 8007644 <_printf_i+0x114>
 8007640:	2d00      	cmp	r5, #0
 8007642:	d04b      	beq.n	80076dc <_printf_i+0x1ac>
 8007644:	4615      	mov	r5, r2
 8007646:	fbb6 f1f3 	udiv	r1, r6, r3
 800764a:	fb03 6711 	mls	r7, r3, r1, r6
 800764e:	5dc7      	ldrb	r7, [r0, r7]
 8007650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007654:	4637      	mov	r7, r6
 8007656:	42bb      	cmp	r3, r7
 8007658:	460e      	mov	r6, r1
 800765a:	d9f4      	bls.n	8007646 <_printf_i+0x116>
 800765c:	2b08      	cmp	r3, #8
 800765e:	d10b      	bne.n	8007678 <_printf_i+0x148>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	07de      	lsls	r6, r3, #31
 8007664:	d508      	bpl.n	8007678 <_printf_i+0x148>
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	4299      	cmp	r1, r3
 800766c:	bfde      	ittt	le
 800766e:	2330      	movle	r3, #48	; 0x30
 8007670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007674:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007678:	1b52      	subs	r2, r2, r5
 800767a:	6122      	str	r2, [r4, #16]
 800767c:	f8cd a000 	str.w	sl, [sp]
 8007680:	464b      	mov	r3, r9
 8007682:	aa03      	add	r2, sp, #12
 8007684:	4621      	mov	r1, r4
 8007686:	4640      	mov	r0, r8
 8007688:	f7ff fee4 	bl	8007454 <_printf_common>
 800768c:	3001      	adds	r0, #1
 800768e:	d14a      	bne.n	8007726 <_printf_i+0x1f6>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	b004      	add	sp, #16
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	f043 0320 	orr.w	r3, r3, #32
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	4833      	ldr	r0, [pc, #204]	; (8007770 <_printf_i+0x240>)
 80076a4:	2778      	movs	r7, #120	; 0x78
 80076a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	6829      	ldr	r1, [r5, #0]
 80076ae:	061f      	lsls	r7, r3, #24
 80076b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076b4:	d402      	bmi.n	80076bc <_printf_i+0x18c>
 80076b6:	065f      	lsls	r7, r3, #25
 80076b8:	bf48      	it	mi
 80076ba:	b2b6      	uxthmi	r6, r6
 80076bc:	07df      	lsls	r7, r3, #31
 80076be:	bf48      	it	mi
 80076c0:	f043 0320 	orrmi.w	r3, r3, #32
 80076c4:	6029      	str	r1, [r5, #0]
 80076c6:	bf48      	it	mi
 80076c8:	6023      	strmi	r3, [r4, #0]
 80076ca:	b91e      	cbnz	r6, 80076d4 <_printf_i+0x1a4>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	f023 0320 	bic.w	r3, r3, #32
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	2310      	movs	r3, #16
 80076d6:	e7a7      	b.n	8007628 <_printf_i+0xf8>
 80076d8:	4824      	ldr	r0, [pc, #144]	; (800776c <_printf_i+0x23c>)
 80076da:	e7e4      	b.n	80076a6 <_printf_i+0x176>
 80076dc:	4615      	mov	r5, r2
 80076de:	e7bd      	b.n	800765c <_printf_i+0x12c>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	6826      	ldr	r6, [r4, #0]
 80076e4:	6961      	ldr	r1, [r4, #20]
 80076e6:	1d18      	adds	r0, r3, #4
 80076e8:	6028      	str	r0, [r5, #0]
 80076ea:	0635      	lsls	r5, r6, #24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	d501      	bpl.n	80076f4 <_printf_i+0x1c4>
 80076f0:	6019      	str	r1, [r3, #0]
 80076f2:	e002      	b.n	80076fa <_printf_i+0x1ca>
 80076f4:	0670      	lsls	r0, r6, #25
 80076f6:	d5fb      	bpl.n	80076f0 <_printf_i+0x1c0>
 80076f8:	8019      	strh	r1, [r3, #0]
 80076fa:	2300      	movs	r3, #0
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	4615      	mov	r5, r2
 8007700:	e7bc      	b.n	800767c <_printf_i+0x14c>
 8007702:	682b      	ldr	r3, [r5, #0]
 8007704:	1d1a      	adds	r2, r3, #4
 8007706:	602a      	str	r2, [r5, #0]
 8007708:	681d      	ldr	r5, [r3, #0]
 800770a:	6862      	ldr	r2, [r4, #4]
 800770c:	2100      	movs	r1, #0
 800770e:	4628      	mov	r0, r5
 8007710:	f7f8 fd5e 	bl	80001d0 <memchr>
 8007714:	b108      	cbz	r0, 800771a <_printf_i+0x1ea>
 8007716:	1b40      	subs	r0, r0, r5
 8007718:	6060      	str	r0, [r4, #4]
 800771a:	6863      	ldr	r3, [r4, #4]
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	2300      	movs	r3, #0
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007724:	e7aa      	b.n	800767c <_printf_i+0x14c>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	462a      	mov	r2, r5
 800772a:	4649      	mov	r1, r9
 800772c:	4640      	mov	r0, r8
 800772e:	47d0      	blx	sl
 8007730:	3001      	adds	r0, #1
 8007732:	d0ad      	beq.n	8007690 <_printf_i+0x160>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	079b      	lsls	r3, r3, #30
 8007738:	d413      	bmi.n	8007762 <_printf_i+0x232>
 800773a:	68e0      	ldr	r0, [r4, #12]
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	4298      	cmp	r0, r3
 8007740:	bfb8      	it	lt
 8007742:	4618      	movlt	r0, r3
 8007744:	e7a6      	b.n	8007694 <_printf_i+0x164>
 8007746:	2301      	movs	r3, #1
 8007748:	4632      	mov	r2, r6
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d09d      	beq.n	8007690 <_printf_i+0x160>
 8007754:	3501      	adds	r5, #1
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	9903      	ldr	r1, [sp, #12]
 800775a:	1a5b      	subs	r3, r3, r1
 800775c:	42ab      	cmp	r3, r5
 800775e:	dcf2      	bgt.n	8007746 <_printf_i+0x216>
 8007760:	e7eb      	b.n	800773a <_printf_i+0x20a>
 8007762:	2500      	movs	r5, #0
 8007764:	f104 0619 	add.w	r6, r4, #25
 8007768:	e7f5      	b.n	8007756 <_printf_i+0x226>
 800776a:	bf00      	nop
 800776c:	08007b11 	.word	0x08007b11
 8007770:	08007b22 	.word	0x08007b22

08007774 <__sflush_r>:
 8007774:	898a      	ldrh	r2, [r1, #12]
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	4605      	mov	r5, r0
 800777c:	0710      	lsls	r0, r2, #28
 800777e:	460c      	mov	r4, r1
 8007780:	d458      	bmi.n	8007834 <__sflush_r+0xc0>
 8007782:	684b      	ldr	r3, [r1, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc05      	bgt.n	8007794 <__sflush_r+0x20>
 8007788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	dc02      	bgt.n	8007794 <__sflush_r+0x20>
 800778e:	2000      	movs	r0, #0
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007796:	2e00      	cmp	r6, #0
 8007798:	d0f9      	beq.n	800778e <__sflush_r+0x1a>
 800779a:	2300      	movs	r3, #0
 800779c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077a0:	682f      	ldr	r7, [r5, #0]
 80077a2:	6a21      	ldr	r1, [r4, #32]
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	d032      	beq.n	800780e <__sflush_r+0x9a>
 80077a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	075a      	lsls	r2, r3, #29
 80077ae:	d505      	bpl.n	80077bc <__sflush_r+0x48>
 80077b0:	6863      	ldr	r3, [r4, #4]
 80077b2:	1ac0      	subs	r0, r0, r3
 80077b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077b6:	b10b      	cbz	r3, 80077bc <__sflush_r+0x48>
 80077b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ba:	1ac0      	subs	r0, r0, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	4602      	mov	r2, r0
 80077c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077c2:	6a21      	ldr	r1, [r4, #32]
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	d106      	bne.n	80077dc <__sflush_r+0x68>
 80077ce:	6829      	ldr	r1, [r5, #0]
 80077d0:	291d      	cmp	r1, #29
 80077d2:	d82b      	bhi.n	800782c <__sflush_r+0xb8>
 80077d4:	4a29      	ldr	r2, [pc, #164]	; (800787c <__sflush_r+0x108>)
 80077d6:	410a      	asrs	r2, r1
 80077d8:	07d6      	lsls	r6, r2, #31
 80077da:	d427      	bmi.n	800782c <__sflush_r+0xb8>
 80077dc:	2200      	movs	r2, #0
 80077de:	6062      	str	r2, [r4, #4]
 80077e0:	04d9      	lsls	r1, r3, #19
 80077e2:	6922      	ldr	r2, [r4, #16]
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	d504      	bpl.n	80077f2 <__sflush_r+0x7e>
 80077e8:	1c42      	adds	r2, r0, #1
 80077ea:	d101      	bne.n	80077f0 <__sflush_r+0x7c>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b903      	cbnz	r3, 80077f2 <__sflush_r+0x7e>
 80077f0:	6560      	str	r0, [r4, #84]	; 0x54
 80077f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f4:	602f      	str	r7, [r5, #0]
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d0c9      	beq.n	800778e <__sflush_r+0x1a>
 80077fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fe:	4299      	cmp	r1, r3
 8007800:	d002      	beq.n	8007808 <__sflush_r+0x94>
 8007802:	4628      	mov	r0, r5
 8007804:	f7ff fbea 	bl	8006fdc <_free_r>
 8007808:	2000      	movs	r0, #0
 800780a:	6360      	str	r0, [r4, #52]	; 0x34
 800780c:	e7c0      	b.n	8007790 <__sflush_r+0x1c>
 800780e:	2301      	movs	r3, #1
 8007810:	4628      	mov	r0, r5
 8007812:	47b0      	blx	r6
 8007814:	1c41      	adds	r1, r0, #1
 8007816:	d1c8      	bne.n	80077aa <__sflush_r+0x36>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c5      	beq.n	80077aa <__sflush_r+0x36>
 800781e:	2b1d      	cmp	r3, #29
 8007820:	d001      	beq.n	8007826 <__sflush_r+0xb2>
 8007822:	2b16      	cmp	r3, #22
 8007824:	d101      	bne.n	800782a <__sflush_r+0xb6>
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	e7b1      	b.n	800778e <__sflush_r+0x1a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e7ad      	b.n	8007790 <__sflush_r+0x1c>
 8007834:	690f      	ldr	r7, [r1, #16]
 8007836:	2f00      	cmp	r7, #0
 8007838:	d0a9      	beq.n	800778e <__sflush_r+0x1a>
 800783a:	0793      	lsls	r3, r2, #30
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	bf08      	it	eq
 8007840:	694b      	ldreq	r3, [r1, #20]
 8007842:	600f      	str	r7, [r1, #0]
 8007844:	bf18      	it	ne
 8007846:	2300      	movne	r3, #0
 8007848:	eba6 0807 	sub.w	r8, r6, r7
 800784c:	608b      	str	r3, [r1, #8]
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	dd9c      	ble.n	800778e <__sflush_r+0x1a>
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007858:	4643      	mov	r3, r8
 800785a:	463a      	mov	r2, r7
 800785c:	4628      	mov	r0, r5
 800785e:	47b0      	blx	r6
 8007860:	2800      	cmp	r0, #0
 8007862:	dc06      	bgt.n	8007872 <__sflush_r+0xfe>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e78e      	b.n	8007790 <__sflush_r+0x1c>
 8007872:	4407      	add	r7, r0
 8007874:	eba8 0800 	sub.w	r8, r8, r0
 8007878:	e7e9      	b.n	800784e <__sflush_r+0xda>
 800787a:	bf00      	nop
 800787c:	dfbffffe 	.word	0xdfbffffe

08007880 <_fflush_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	690b      	ldr	r3, [r1, #16]
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	b913      	cbnz	r3, 8007890 <_fflush_r+0x10>
 800788a:	2500      	movs	r5, #0
 800788c:	4628      	mov	r0, r5
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	b118      	cbz	r0, 800789a <_fflush_r+0x1a>
 8007892:	6a03      	ldr	r3, [r0, #32]
 8007894:	b90b      	cbnz	r3, 800789a <_fflush_r+0x1a>
 8007896:	f7ff f9a9 	bl	8006bec <__sinit>
 800789a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f3      	beq.n	800788a <_fflush_r+0xa>
 80078a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078a4:	07d0      	lsls	r0, r2, #31
 80078a6:	d404      	bmi.n	80078b2 <_fflush_r+0x32>
 80078a8:	0599      	lsls	r1, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_fflush_r+0x32>
 80078ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ae:	f7ff fb92 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 80078b2:	4628      	mov	r0, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	f7ff ff5d 	bl	8007774 <__sflush_r>
 80078ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078bc:	07da      	lsls	r2, r3, #31
 80078be:	4605      	mov	r5, r0
 80078c0:	d4e4      	bmi.n	800788c <_fflush_r+0xc>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	059b      	lsls	r3, r3, #22
 80078c6:	d4e1      	bmi.n	800788c <_fflush_r+0xc>
 80078c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ca:	f7ff fb85 	bl	8006fd8 <__retarget_lock_release_recursive>
 80078ce:	e7dd      	b.n	800788c <_fflush_r+0xc>

080078d0 <__swhatbuf_r>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d8:	2900      	cmp	r1, #0
 80078da:	b096      	sub	sp, #88	; 0x58
 80078dc:	4615      	mov	r5, r2
 80078de:	461e      	mov	r6, r3
 80078e0:	da0d      	bge.n	80078fe <__swhatbuf_r+0x2e>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078e8:	f04f 0100 	mov.w	r1, #0
 80078ec:	bf0c      	ite	eq
 80078ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078f2:	2340      	movne	r3, #64	; 0x40
 80078f4:	2000      	movs	r0, #0
 80078f6:	6031      	str	r1, [r6, #0]
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	b016      	add	sp, #88	; 0x58
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	466a      	mov	r2, sp
 8007900:	f000 f848 	bl	8007994 <_fstat_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	dbec      	blt.n	80078e2 <__swhatbuf_r+0x12>
 8007908:	9901      	ldr	r1, [sp, #4]
 800790a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800790e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007912:	4259      	negs	r1, r3
 8007914:	4159      	adcs	r1, r3
 8007916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791a:	e7eb      	b.n	80078f4 <__swhatbuf_r+0x24>

0800791c <__smakebuf_r>:
 800791c:	898b      	ldrh	r3, [r1, #12]
 800791e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007920:	079d      	lsls	r5, r3, #30
 8007922:	4606      	mov	r6, r0
 8007924:	460c      	mov	r4, r1
 8007926:	d507      	bpl.n	8007938 <__smakebuf_r+0x1c>
 8007928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	2301      	movs	r3, #1
 8007932:	6163      	str	r3, [r4, #20]
 8007934:	b002      	add	sp, #8
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	ab01      	add	r3, sp, #4
 800793a:	466a      	mov	r2, sp
 800793c:	f7ff ffc8 	bl	80078d0 <__swhatbuf_r>
 8007940:	9900      	ldr	r1, [sp, #0]
 8007942:	4605      	mov	r5, r0
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff fbb5 	bl	80070b4 <_malloc_r>
 800794a:	b948      	cbnz	r0, 8007960 <__smakebuf_r+0x44>
 800794c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d4ef      	bmi.n	8007934 <__smakebuf_r+0x18>
 8007954:	f023 0303 	bic.w	r3, r3, #3
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	e7e3      	b.n	8007928 <__smakebuf_r+0xc>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	6020      	str	r0, [r4, #0]
 8007964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	6163      	str	r3, [r4, #20]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	6120      	str	r0, [r4, #16]
 8007972:	b15b      	cbz	r3, 800798c <__smakebuf_r+0x70>
 8007974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007978:	4630      	mov	r0, r6
 800797a:	f000 f81d 	bl	80079b8 <_isatty_r>
 800797e:	b128      	cbz	r0, 800798c <__smakebuf_r+0x70>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	431d      	orrs	r5, r3
 8007990:	81a5      	strh	r5, [r4, #12]
 8007992:	e7cf      	b.n	8007934 <__smakebuf_r+0x18>

08007994 <_fstat_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	; (80079b4 <_fstat_r+0x20>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	f7f9 fb9c 	bl	80010de <_fstat>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	d102      	bne.n	80079b0 <_fstat_r+0x1c>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	b103      	cbz	r3, 80079b0 <_fstat_r+0x1c>
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	bd38      	pop	{r3, r4, r5, pc}
 80079b2:	bf00      	nop
 80079b4:	200007b0 	.word	0x200007b0

080079b8 <_isatty_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d06      	ldr	r5, [pc, #24]	; (80079d4 <_isatty_r+0x1c>)
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	602b      	str	r3, [r5, #0]
 80079c4:	f7f9 fb9b 	bl	80010fe <_isatty>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_isatty_r+0x1a>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_isatty_r+0x1a>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200007b0 	.word	0x200007b0

080079d8 <_sbrk_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_sbrk_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 fba4 	bl	8001130 <_sbrk>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_sbrk_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_sbrk_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200007b0 	.word	0x200007b0

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
